
ProjectFinalCode_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002c34  00002cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800072  00800072  00002cda  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00002cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001412  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a884  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b43f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 0c 	call	0x1880	; 0x1880 <main>
      8a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void EEPROM_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	I2C_ConfigType Config = {0b00000010,2};
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	8a 83       	std	Y+2, r24	; 0x02
	TWI_Init(&Config);
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_Init>
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <EEPROM_writeByte+0x6>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <EEPROM_writeByte+0x8>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
     b7c:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_Start>
	if((TWI_Get_Status()) != TW_START )
     b80:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     b84:	88 30       	cpi	r24, 0x08	; 8
     b86:	11 f0       	breq	.+4      	; 0xb8c <EEPROM_writeByte+0x22>
	{
		return ERROR;
     b88:	1c 82       	std	Y+4, r1	; 0x04
     b8a:	28 c0       	rjmp	.+80     	; 0xbdc <EEPROM_writeByte+0x72>
	}

	TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	80 70       	andi	r24, 0x00	; 0
     b92:	97 70       	andi	r25, 0x07	; 7
     b94:	88 0f       	add	r24, r24
     b96:	89 2f       	mov	r24, r25
     b98:	88 1f       	adc	r24, r24
     b9a:	99 0b       	sbc	r25, r25
     b9c:	91 95       	neg	r25
     b9e:	80 6a       	ori	r24, 0xA0	; 160
     ba0:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_SLA_W_ACK )
     ba4:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     ba8:	88 31       	cpi	r24, 0x18	; 24
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x46>
	{
		return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	16 c0       	rjmp	.+44     	; 0xbdc <EEPROM_writeByte+0x72>
	}

	TWI_Write((uint8)u16addr);
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_DATA_ACK )
     bb6:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     bba:	88 32       	cpi	r24, 0x28	; 40
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <EEPROM_writeByte+0x58>
	{
		return ERROR;
     bbe:	1c 82       	std	Y+4, r1	; 0x04
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <EEPROM_writeByte+0x72>
	}

	TWI_Write(u8data);
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_DATA_ACK )
     bc8:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     bcc:	88 32       	cpi	r24, 0x28	; 40
     bce:	11 f0       	breq	.+4      	; 0xbd4 <EEPROM_writeByte+0x6a>
	{
		return ERROR;
     bd0:	1c 82       	std	Y+4, r1	; 0x04
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <EEPROM_writeByte+0x72>
	}

	TWI_Stop();
     bd4:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_Stop>

	return SUCCESS;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	8c 83       	std	Y+4, r24	; 0x04
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <EEPROM_readByte+0x6>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <EEPROM_readByte+0x8>
     bf4:	0f 92       	push	r0
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	7c 83       	std	Y+4, r23	; 0x04
     c00:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
     c02:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_Start>
	if((TWI_Get_Status()) != TW_START )
     c06:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	11 f0       	breq	.+4      	; 0xc12 <EEPROM_readByte+0x26>
	{
		return ERROR;
     c0e:	1d 82       	std	Y+5, r1	; 0x05
     c10:	44 c0       	rjmp	.+136    	; 0xc9a <EEPROM_readByte+0xae>
	}

	TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	80 70       	andi	r24, 0x00	; 0
     c18:	97 70       	andi	r25, 0x07	; 7
     c1a:	88 0f       	add	r24, r24
     c1c:	89 2f       	mov	r24, r25
     c1e:	88 1f       	adc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	91 95       	neg	r25
     c24:	80 6a       	ori	r24, 0xA0	; 160
     c26:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_SLA_W_ACK )
     c2a:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c2e:	88 31       	cpi	r24, 0x18	; 24
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x4a>
	{
		return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	32 c0       	rjmp	.+100    	; 0xc9a <EEPROM_readByte+0xae>
	}

	TWI_Write((uint8)u16addr);
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_DATA_ACK )
     c3c:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c40:	88 32       	cpi	r24, 0x28	; 40
     c42:	11 f0       	breq	.+4      	; 0xc48 <EEPROM_readByte+0x5c>
	{
		return ERROR;
     c44:	1d 82       	std	Y+5, r1	; 0x05
     c46:	29 c0       	rjmp	.+82     	; 0xc9a <EEPROM_readByte+0xae>
	}

	TWI_Start();
     c48:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_Start>
	if((TWI_Get_Status()) != TW_REP_START )
     c4c:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c50:	80 31       	cpi	r24, 0x10	; 16
     c52:	11 f0       	breq	.+4      	; 0xc58 <EEPROM_readByte+0x6c>
	{
		return ERROR;
     c54:	1d 82       	std	Y+5, r1	; 0x05
     c56:	21 c0       	rjmp	.+66     	; 0xc9a <EEPROM_readByte+0xae>
	}

	TWI_Write((uint8)((u16addr & 0x700)>>7) | 0xA0 | 1);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	80 70       	andi	r24, 0x00	; 0
     c5e:	97 70       	andi	r25, 0x07	; 7
     c60:	88 0f       	add	r24, r24
     c62:	89 2f       	mov	r24, r25
     c64:	88 1f       	adc	r24, r24
     c66:	99 0b       	sbc	r25, r25
     c68:	91 95       	neg	r25
     c6a:	81 6a       	ori	r24, 0xA1	; 161
     c6c:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_SLA_R_ACK )
     c70:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	11 f0       	breq	.+4      	; 0xc7c <EEPROM_readByte+0x90>
	{
		return ERROR;
     c78:	1d 82       	std	Y+5, r1	; 0x05
     c7a:	0f c0       	rjmp	.+30     	; 0xc9a <EEPROM_readByte+0xae>
	}

	*u8data = TWI_Read_With_NACK();
     c7c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TWI_Read_With_NACK>
     c80:	eb 81       	ldd	r30, Y+3	; 0x03
     c82:	fc 81       	ldd	r31, Y+4	; 0x04
     c84:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
     c86:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     c8a:	88 35       	cpi	r24, 0x58	; 88
     c8c:	11 f0       	breq	.+4      	; 0xc92 <EEPROM_readByte+0xa6>
	{
		return ERROR;
     c8e:	1d 82       	std	Y+5, r1	; 0x05
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <EEPROM_readByte+0xae>
	}

	TWI_Stop();
     c92:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_Stop>
	return SUCCESS;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	8d 83       	std	Y+5, r24	; 0x05
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05

}
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <EEPROM_readstring>:

uint8 EEPROM_readstring(uint16 u16addr,uint8 * str)
{
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <EEPROM_readstring+0xa>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <EEPROM_readstring+0xc>
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	7c 83       	std	Y+4, r23	; 0x04
     cc4:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start();
     cc6:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_Start>
	if((TWI_Get_Status()) != TW_START )
     cca:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     cce:	88 30       	cpi	r24, 0x08	; 8
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <EEPROM_readstring+0x2a>
	{
		return ERROR;
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	80 c0       	rjmp	.+256    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	80 70       	andi	r24, 0x00	; 0
     cdc:	97 70       	andi	r25, 0x07	; 7
     cde:	88 0f       	add	r24, r24
     ce0:	89 2f       	mov	r24, r25
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	91 95       	neg	r25
     ce8:	80 6a       	ori	r24, 0xA0	; 160
     cea:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_SLA_W_ACK )
     cee:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     cf2:	88 31       	cpi	r24, 0x18	; 24
     cf4:	11 f0       	breq	.+4      	; 0xcfa <EEPROM_readstring+0x4e>
	{
		return ERROR;
     cf6:	1d 82       	std	Y+5, r1	; 0x05
     cf8:	6e c0       	rjmp	.+220    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	TWI_Write((uint8)u16addr);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_DATA_ACK )
     d00:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d04:	88 32       	cpi	r24, 0x28	; 40
     d06:	11 f0       	breq	.+4      	; 0xd0c <EEPROM_readstring+0x60>
	{
		return ERROR;
     d08:	1d 82       	std	Y+5, r1	; 0x05
     d0a:	65 c0       	rjmp	.+202    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	TWI_Start();
     d0c:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_Start>
	if((TWI_Get_Status()) != TW_REP_START )
     d10:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d14:	80 31       	cpi	r24, 0x10	; 16
     d16:	11 f0       	breq	.+4      	; 0xd1c <EEPROM_readstring+0x70>
	{
		return ERROR;
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	5d c0       	rjmp	.+186    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	TWI_Write((uint8)((u16addr & 0x700)>>7) | 0xA0 | 1);
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	80 70       	andi	r24, 0x00	; 0
     d22:	97 70       	andi	r25, 0x07	; 7
     d24:	88 0f       	add	r24, r24
     d26:	89 2f       	mov	r24, r25
     d28:	88 1f       	adc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	91 95       	neg	r25
     d2e:	81 6a       	ori	r24, 0xA1	; 161
     d30:	0e 94 30 07 	call	0xe60	; 0xe60 <TWI_Write>
	if((TWI_Get_Status()) != TW_MT_SLA_R_ACK )
     d34:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	11 f0       	breq	.+4      	; 0xd40 <EEPROM_readstring+0x94>
	{
		return ERROR;
     d3c:	1d 82       	std	Y+5, r1	; 0x05
     d3e:	4b c0       	rjmp	.+150    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	str[0] = TWI_Read_With_ACK();
     d40:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_Read_With_ACK>
     d44:	eb 81       	ldd	r30, Y+3	; 0x03
     d46:	fc 81       	ldd	r31, Y+4	; 0x04
     d48:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
     d4a:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d4e:	80 35       	cpi	r24, 0x50	; 80
     d50:	11 f0       	breq	.+4      	; 0xd56 <EEPROM_readstring+0xaa>
	{
		return ERROR;
     d52:	1d 82       	std	Y+5, r1	; 0x05
     d54:	40 c0       	rjmp	.+128    	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	str[1] = TWI_Read_With_ACK();
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	8c 01       	movw	r16, r24
     d5c:	0f 5f       	subi	r16, 0xFF	; 255
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_Read_With_ACK>
     d64:	f8 01       	movw	r30, r16
     d66:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
     d68:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d6c:	80 35       	cpi	r24, 0x50	; 80
     d6e:	11 f0       	breq	.+4      	; 0xd74 <EEPROM_readstring+0xc8>
	{
		return ERROR;
     d70:	1d 82       	std	Y+5, r1	; 0x05
     d72:	31 c0       	rjmp	.+98     	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	str[2] = TWI_Read_With_ACK();
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	8c 01       	movw	r16, r24
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_Read_With_ACK>
     d82:	f8 01       	movw	r30, r16
     d84:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
     d86:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     d8a:	80 35       	cpi	r24, 0x50	; 80
     d8c:	11 f0       	breq	.+4      	; 0xd92 <EEPROM_readstring+0xe6>
	{
		return ERROR;
     d8e:	1d 82       	std	Y+5, r1	; 0x05
     d90:	22 c0       	rjmp	.+68     	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	str[3] = TWI_Read_With_ACK();
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	8c 01       	movw	r16, r24
     d98:	0d 5f       	subi	r16, 0xFD	; 253
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_Read_With_ACK>
     da0:	f8 01       	movw	r30, r16
     da2:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
     da4:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     da8:	80 35       	cpi	r24, 0x50	; 80
     daa:	11 f0       	breq	.+4      	; 0xdb0 <EEPROM_readstring+0x104>
	{
		return ERROR;
     dac:	1d 82       	std	Y+5, r1	; 0x05
     dae:	13 c0       	rjmp	.+38     	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	str[4] = TWI_Read_With_NACK();
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	8c 01       	movw	r16, r24
     db6:	0c 5f       	subi	r16, 0xFC	; 252
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TWI_Read_With_NACK>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
     dc2:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_Get_Status>
     dc6:	88 35       	cpi	r24, 0x58	; 88
     dc8:	11 f0       	breq	.+4      	; 0xdce <EEPROM_readstring+0x122>
	{
		return ERROR;
     dca:	1d 82       	std	Y+5, r1	; 0x05
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <EEPROM_readstring+0x12a>
	}

	TWI_Stop();
     dce:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_Stop>
	return SUCCESS;
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	fd 83       	std	Y+5, r31	; 0x05
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <TWI_Init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TWI_Init(const I2C_ConfigType * Config_Ptr)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <TWI_Init+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWEN);
     dfa:	e6 e5       	ldi	r30, 0x56	; 86
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	80 83       	st	Z, r24
	TWAR = (Config_Ptr -> add); // slave address
     e02:	a2 e2       	ldi	r26, 0x22	; 34
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	80 81       	ld	r24, Z
     e0c:	8c 93       	st	X, r24
	TWSR = 0;
     e0e:	e1 e2       	ldi	r30, 0x21	; 33
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	10 82       	st	Z, r1
	TWBR = (Config_Ptr -> bit_rate); // division factor that controls bit rate
     e14:	a0 e2       	ldi	r26, 0x20	; 32
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e9 81       	ldd	r30, Y+1	; 0x01
     e1a:	fa 81       	ldd	r31, Y+2	; 0x02
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	8c 93       	st	X, r24
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TWI_Start>:

void TWI_Start()
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWSTA) | (1<<TWINT); // Enable TWI Operation, sending start bit, clear TWINT flag before starting the operation
     e32:	e6 e5       	ldi	r30, 0x56	; 86
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	84 ea       	ldi	r24, 0xA4	; 164
     e38:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)); //The bit is set by the hardware when The action has finished
     e3a:	e6 e5       	ldi	r30, 0x56	; 86
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 23       	and	r24, r24
     e42:	dc f7       	brge	.-10     	; 0xe3a <TWI_Start+0x10>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <TWI_Stop>:

void TWI_Stop()
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT); //Enable TWI Operation, sending stop bit, clear TWINT flag before starting the operation
     e52:	e6 e5       	ldi	r30, 0x56	; 86
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	84 e9       	ldi	r24, 0x94	; 148
     e58:	80 83       	st	Z, r24
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <TWI_Write>:

void TWI_Write(uint8 data)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     e6c:	e3 e2       	ldi	r30, 0x23	; 35
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	80 83       	st	Z, r24
	TWCR = (1<<TWEN) | (1<<TWINT); // Enable TWI Operation, clear TWINT flag before starting the operation
     e74:	e6 e5       	ldi	r30, 0x56	; 86
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	84 e8       	ldi	r24, 0x84	; 132
     e7a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e7c:	e6 e5       	ldi	r30, 0x56	; 86
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	dc f7       	brge	.-10     	; 0xe7c <TWI_Write+0x1c>
}
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA); // Enable TWI Operation, enabling Ack bit, clear TWINT flag beafore starting the operation
     e96:	e6 e5       	ldi	r30, 0x56	; 86
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	84 ec       	ldi	r24, 0xC4	; 196
     e9c:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e9e:	e6 e5       	ldi	r30, 0x56	; 86
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 23       	and	r24, r24
     ea6:	dc f7       	brge	.-10     	; 0xe9e <TWI_Read_With_ACK+0x10>
	return TWDR;
     ea8:	e3 e2       	ldi	r30, 0x23	; 35
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK()
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT);// Enable TWI Operation, clear TWINT flag beafore starting the operation
     ebc:	e6 e5       	ldi	r30, 0x56	; 86
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	84 e8       	ldi	r24, 0x84	; 132
     ec2:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     ec4:	e6 e5       	ldi	r30, 0x56	; 86
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	dc f7       	brge	.-10     	; 0xec4 <TWI_Read_With_NACK+0x10>
	return TWDR;
     ece:	e3 e2       	ldi	r30, 0x23	; 35
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    status = TWSR & 0xF8;
     ee4:	e1 e2       	ldi	r30, 0x21	; 33
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 7f       	andi	r24, 0xF8	; 248
     eec:	89 83       	std	Y+1, r24	; 0x01
    return status;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <LCD_init>:
 *******************************************************************************/

#include "LCD.h"

void LCD_init()
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_DIR |= (1<<Rs)|(1<<RW)|(1<<E);
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 67       	ori	r24, 0x70	; 112
     f0c:	8c 93       	st	X, r24
	LCD_DATA_DIR |= 0x0F;
	#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
	#elif(DATA_BITS_MODE==8)
	LCD_DATA_DIR = 0xFF;
     f0e:	e5 e3       	ldi	r30, 0x35	; 53
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* 2 lines + 8bit mode */
     f16:	88 e3       	ldi	r24, 0x38	; 56
     f18:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_sendCommand>
	#endif
	LCD_sendCommand(CURSOR_OFF); /* Cursor_OFF */
     f1c:	8c e0       	ldi	r24, 0x0C	; 12
     f1e:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear screen */
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_sendCommand>
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	e9 97       	sbiw	r28, 0x39	; 57
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,Rs);
     f44:	a2 e3       	ldi	r26, 0x32	; 50
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e2 e3       	ldi	r30, 0x32	; 50
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7e       	andi	r24, 0xEF	; 239
     f50:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     f52:	a2 e3       	ldi	r26, 0x32	; 50
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e2 e3       	ldi	r30, 0x32	; 50
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	8c 93       	st	X, r24
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e8       	ldi	r26, 0x80	; 128
     f66:	bf e3       	ldi	r27, 0x3F	; 63
     f68:	8d ab       	std	Y+53, r24	; 0x35
     f6a:	9e ab       	std	Y+54, r25	; 0x36
     f6c:	af ab       	std	Y+55, r26	; 0x37
     f6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	6d a9       	ldd	r22, Y+53	; 0x35
     f72:	7e a9       	ldd	r23, Y+54	; 0x36
     f74:	8f a9       	ldd	r24, Y+55	; 0x37
     f76:	98 ad       	ldd	r25, Y+56	; 0x38
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a ef       	ldi	r20, 0xFA	; 250
     f7e:	54 e4       	ldi	r21, 0x44	; 68
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	89 ab       	std	Y+49, r24	; 0x31
     f8a:	9a ab       	std	Y+50, r25	; 0x32
     f8c:	ab ab       	std	Y+51, r26	; 0x33
     f8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f90:	69 a9       	ldd	r22, Y+49	; 0x31
     f92:	7a a9       	ldd	r23, Y+50	; 0x32
     f94:	8b a9       	ldd	r24, Y+51	; 0x33
     f96:	9c a9       	ldd	r25, Y+52	; 0x34
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <LCD_sendCommand+0x84>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	98 ab       	std	Y+48, r25	; 0x30
     fae:	8f a7       	std	Y+47, r24	; 0x2f
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     fb2:	69 a9       	ldd	r22, Y+49	; 0x31
     fb4:	7a a9       	ldd	r23, Y+50	; 0x32
     fb6:	8b a9       	ldd	r24, Y+51	; 0x33
     fb8:	9c a9       	ldd	r25, Y+52	; 0x34
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6d a9       	ldd	r22, Y+53	; 0x35
     fcc:	7e a9       	ldd	r23, Y+54	; 0x36
     fce:	8f a9       	ldd	r24, Y+55	; 0x37
     fd0:	98 ad       	ldd	r25, Y+56	; 0x38
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	98 ab       	std	Y+48, r25	; 0x30
     ff0:	8f a7       	std	Y+47, r24	; 0x2f
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <LCD_sendCommand+0xe4>
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9e a7       	std	Y+46, r25	; 0x2e
     ffa:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
     ffe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <LCD_sendCommand+0xd2>
    1004:	9e a7       	std	Y+46, r25	; 0x2e
    1006:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8f a5       	ldd	r24, Y+47	; 0x2f
    100a:	98 a9       	ldd	r25, Y+48	; 0x30
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	98 ab       	std	Y+48, r25	; 0x30
    1010:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8f a5       	ldd	r24, Y+47	; 0x2f
    1014:	98 a9       	ldd	r25, Y+48	; 0x30
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <LCD_sendCommand+0xc6>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	69 a9       	ldd	r22, Y+49	; 0x31
    101e:	7a a9       	ldd	r23, Y+50	; 0x32
    1020:	8b a9       	ldd	r24, Y+51	; 0x33
    1022:	9c a9       	ldd	r25, Y+52	; 0x34
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	98 ab       	std	Y+48, r25	; 0x30
    102e:	8f a7       	std	Y+47, r24	; 0x2f
    1030:	8f a5       	ldd	r24, Y+47	; 0x2f
    1032:	98 a9       	ldd	r25, Y+48	; 0x30
    1034:	9c a7       	std	Y+44, r25	; 0x2c
    1036:	8b a7       	std	Y+43, r24	; 0x2b
    1038:	8b a5       	ldd	r24, Y+43	; 0x2b
    103a:	9c a5       	ldd	r25, Y+44	; 0x2c
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <LCD_sendCommand+0x10e>
    1040:	9c a7       	std	Y+44, r25	; 0x2c
    1042:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	8c 93       	st	X, r24
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e8       	ldi	r26, 0x80	; 128
    1058:	bf e3       	ldi	r27, 0x3F	; 63
    105a:	8f a3       	std	Y+39, r24	; 0x27
    105c:	98 a7       	std	Y+40, r25	; 0x28
    105e:	a9 a7       	std	Y+41, r26	; 0x29
    1060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1062:	6f a1       	ldd	r22, Y+39	; 0x27
    1064:	78 a5       	ldd	r23, Y+40	; 0x28
    1066:	89 a5       	ldd	r24, Y+41	; 0x29
    1068:	9a a5       	ldd	r25, Y+42	; 0x2a
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a ef       	ldi	r20, 0xFA	; 250
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8b a3       	std	Y+35, r24	; 0x23
    107c:	9c a3       	std	Y+36, r25	; 0x24
    107e:	ad a3       	std	Y+37, r26	; 0x25
    1080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1082:	6b a1       	ldd	r22, Y+35	; 0x23
    1084:	7c a1       	ldd	r23, Y+36	; 0x24
    1086:	8d a1       	ldd	r24, Y+37	; 0x25
    1088:	9e a1       	ldd	r25, Y+38	; 0x26
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <LCD_sendCommand+0x176>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a a3       	std	Y+34, r25	; 0x22
    10a0:	89 a3       	std	Y+33, r24	; 0x21
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	6f a1       	ldd	r22, Y+39	; 0x27
    10be:	78 a5       	ldd	r23, Y+40	; 0x28
    10c0:	89 a5       	ldd	r24, Y+41	; 0x29
    10c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <LCD_sendCommand+0x1d6>
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	98 a3       	std	Y+32, r25	; 0x20
    10ec:	8f 8f       	std	Y+31, r24	; 0x1f
    10ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10f0:	98 a1       	ldd	r25, Y+32	; 0x20
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <LCD_sendCommand+0x1c4>
    10f6:	98 a3       	std	Y+32, r25	; 0x20
    10f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9a a3       	std	Y+34, r25	; 0x22
    1102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	89 a1       	ldd	r24, Y+33	; 0x21
    1106:	9a a1       	ldd	r25, Y+34	; 0x22
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f7       	brne	.-38     	; 0x10e6 <LCD_sendCommand+0x1b8>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	6b a1       	ldd	r22, Y+35	; 0x23
    1110:	7c a1       	ldd	r23, Y+36	; 0x24
    1112:	8d a1       	ldd	r24, Y+37	; 0x25
    1114:	9e a1       	ldd	r25, Y+38	; 0x26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	89 a1       	ldd	r24, Y+33	; 0x21
    1124:	9a a1       	ldd	r25, Y+34	; 0x22
    1126:	9e 8f       	std	Y+30, r25	; 0x1e
    1128:	8d 8f       	std	Y+29, r24	; 0x1d
    112a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <LCD_sendCommand+0x200>
    1132:	9e 8f       	std	Y+30, r25	; 0x1e
    1134:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);

	#elif(DATA_BITS_MODE==8)
	LCD_DATA_PORT = command;
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	89 ad       	ldd	r24, Y+57	; 0x39
    113c:	80 83       	st	Z, r24
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a0 e8       	ldi	r26, 0x80	; 128
    1144:	bf e3       	ldi	r27, 0x3F	; 63
    1146:	89 8f       	std	Y+25, r24	; 0x19
    1148:	9a 8f       	std	Y+26, r25	; 0x1a
    114a:	ab 8f       	std	Y+27, r26	; 0x1b
    114c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114e:	69 8d       	ldd	r22, Y+25	; 0x19
    1150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a ef       	ldi	r20, 0xFA	; 250
    115c:	54 e4       	ldi	r21, 0x44	; 68
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8d 8b       	std	Y+21, r24	; 0x15
    1168:	9e 8b       	std	Y+22, r25	; 0x16
    116a:	af 8b       	std	Y+23, r26	; 0x17
    116c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    116e:	6d 89       	ldd	r22, Y+21	; 0x15
    1170:	7e 89       	ldd	r23, Y+22	; 0x16
    1172:	8f 89       	ldd	r24, Y+23	; 0x17
    1174:	98 8d       	ldd	r25, Y+24	; 0x18
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1182:	88 23       	and	r24, r24
    1184:	2c f4       	brge	.+10     	; 0x1190 <LCD_sendCommand+0x262>
		__ticks = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9c 8b       	std	Y+20, r25	; 0x14
    118c:	8b 8b       	std	Y+19, r24	; 0x13
    118e:	3f c0       	rjmp	.+126    	; 0x120e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1190:	6d 89       	ldd	r22, Y+21	; 0x15
    1192:	7e 89       	ldd	r23, Y+22	; 0x16
    1194:	8f 89       	ldd	r24, Y+23	; 0x17
    1196:	98 8d       	ldd	r25, Y+24	; 0x18
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	4f e7       	ldi	r20, 0x7F	; 127
    119e:	57 e4       	ldi	r21, 0x47	; 71
    11a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	4c f5       	brge	.+82     	; 0x11fa <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a8:	69 8d       	ldd	r22, Y+25	; 0x19
    11aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	51 e4       	ldi	r21, 0x41	; 65
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c 8b       	std	Y+20, r25	; 0x14
    11ce:	8b 8b       	std	Y+19, r24	; 0x13
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <LCD_sendCommand+0x2c2>
    11d2:	88 ec       	ldi	r24, 0xC8	; 200
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9a 8b       	std	Y+18, r25	; 0x12
    11d8:	89 8b       	std	Y+17, r24	; 0x11
    11da:	89 89       	ldd	r24, Y+17	; 0x11
    11dc:	9a 89       	ldd	r25, Y+18	; 0x12
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <LCD_sendCommand+0x2b0>
    11e2:	9a 8b       	std	Y+18, r25	; 0x12
    11e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	8b 89       	ldd	r24, Y+19	; 0x13
    11e8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9c 8b       	std	Y+20, r25	; 0x14
    11ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f7       	brne	.-38     	; 0x11d2 <LCD_sendCommand+0x2a4>
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fa:	6d 89       	ldd	r22, Y+21	; 0x15
    11fc:	7e 89       	ldd	r23, Y+22	; 0x16
    11fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1200:	98 8d       	ldd	r25, Y+24	; 0x18
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9c 8b       	std	Y+20, r25	; 0x14
    120c:	8b 8b       	std	Y+19, r24	; 0x13
    120e:	8b 89       	ldd	r24, Y+19	; 0x13
    1210:	9c 89       	ldd	r25, Y+20	; 0x14
    1212:	98 8b       	std	Y+16, r25	; 0x10
    1214:	8f 87       	std	Y+15, r24	; 0x0f
    1216:	8f 85       	ldd	r24, Y+15	; 0x0f
    1218:	98 89       	ldd	r25, Y+16	; 0x10
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <LCD_sendCommand+0x2ec>
    121e:	98 8b       	std	Y+16, r25	; 0x10
    1220:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	8c 93       	st	X, r24
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e8       	ldi	r26, 0x80	; 128
    1236:	bf e3       	ldi	r27, 0x3F	; 63
    1238:	8b 87       	std	Y+11, r24	; 0x0b
    123a:	9c 87       	std	Y+12, r25	; 0x0c
    123c:	ad 87       	std	Y+13, r26	; 0x0d
    123e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1240:	6b 85       	ldd	r22, Y+11	; 0x0b
    1242:	7c 85       	ldd	r23, Y+12	; 0x0c
    1244:	8d 85       	ldd	r24, Y+13	; 0x0d
    1246:	9e 85       	ldd	r25, Y+14	; 0x0e
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a ef       	ldi	r20, 0xFA	; 250
    124e:	54 e4       	ldi	r21, 0x44	; 68
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	8f 83       	std	Y+7, r24	; 0x07
    125a:	98 87       	std	Y+8, r25	; 0x08
    125c:	a9 87       	std	Y+9, r26	; 0x09
    125e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	5f e3       	ldi	r21, 0x3F	; 63
    1270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1274:	88 23       	and	r24, r24
    1276:	2c f4       	brge	.+10     	; 0x1282 <LCD_sendCommand+0x354>
		__ticks = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	3f c0       	rjmp	.+126    	; 0x1300 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1296:	18 16       	cp	r1, r24
    1298:	4c f5       	brge	.+82     	; 0x12ec <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129a:	6b 85       	ldd	r22, Y+11	; 0x0b
    129c:	7c 85       	ldd	r23, Y+12	; 0x0c
    129e:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e2       	ldi	r20, 0x20	; 32
    12a8:	51 e4       	ldi	r21, 0x41	; 65
    12aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <LCD_sendCommand+0x3b4>
    12c4:	88 ec       	ldi	r24, 0xC8	; 200
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <LCD_sendCommand+0x3a2>
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <LCD_sendCommand+0x396>
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ec:	6f 81       	ldd	r22, Y+7	; 0x07
    12ee:	78 85       	ldd	r23, Y+8	; 0x08
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <LCD_sendCommand+0x3de>
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    1314:	e9 96       	adiw	r28, 0x39	; 57
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	e9 97       	sbiw	r28, 0x39	; 57
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,Rs);
    133c:	a2 e3       	ldi	r26, 0x32	; 50
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e2 e3       	ldi	r30, 0x32	; 50
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 61       	ori	r24, 0x10	; 16
    1348:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    134a:	a2 e3       	ldi	r26, 0x32	; 50
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e2 e3       	ldi	r30, 0x32	; 50
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7d       	andi	r24, 0xDF	; 223
    1356:	8c 93       	st	X, r24
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e8       	ldi	r26, 0x80	; 128
    135e:	bf e3       	ldi	r27, 0x3F	; 63
    1360:	8d ab       	std	Y+53, r24	; 0x35
    1362:	9e ab       	std	Y+54, r25	; 0x36
    1364:	af ab       	std	Y+55, r26	; 0x37
    1366:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	6d a9       	ldd	r22, Y+53	; 0x35
    136a:	7e a9       	ldd	r23, Y+54	; 0x36
    136c:	8f a9       	ldd	r24, Y+55	; 0x37
    136e:	98 ad       	ldd	r25, Y+56	; 0x38
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4a ef       	ldi	r20, 0xFA	; 250
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	89 ab       	std	Y+49, r24	; 0x31
    1382:	9a ab       	std	Y+50, r25	; 0x32
    1384:	ab ab       	std	Y+51, r26	; 0x33
    1386:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1388:	69 a9       	ldd	r22, Y+49	; 0x31
    138a:	7a a9       	ldd	r23, Y+50	; 0x32
    138c:	8b a9       	ldd	r24, Y+51	; 0x33
    138e:	9c a9       	ldd	r25, Y+52	; 0x34
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e8       	ldi	r20, 0x80	; 128
    1396:	5f e3       	ldi	r21, 0x3F	; 63
    1398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <LCD_displayCharacter+0x84>
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	98 ab       	std	Y+48, r25	; 0x30
    13a6:	8f a7       	std	Y+47, r24	; 0x2f
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    13aa:	69 a9       	ldd	r22, Y+49	; 0x31
    13ac:	7a a9       	ldd	r23, Y+50	; 0x32
    13ae:	8b a9       	ldd	r24, Y+51	; 0x33
    13b0:	9c a9       	ldd	r25, Y+52	; 0x34
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	4c f5       	brge	.+82     	; 0x1414 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c2:	6d a9       	ldd	r22, Y+53	; 0x35
    13c4:	7e a9       	ldd	r23, Y+54	; 0x36
    13c6:	8f a9       	ldd	r24, Y+55	; 0x37
    13c8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	98 ab       	std	Y+48, r25	; 0x30
    13e8:	8f a7       	std	Y+47, r24	; 0x2f
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <LCD_displayCharacter+0xe4>
    13ec:	88 ec       	ldi	r24, 0xC8	; 200
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9e a7       	std	Y+46, r25	; 0x2e
    13f2:	8d a7       	std	Y+45, r24	; 0x2d
    13f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <LCD_displayCharacter+0xd2>
    13fc:	9e a7       	std	Y+46, r25	; 0x2e
    13fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	8f a5       	ldd	r24, Y+47	; 0x2f
    1402:	98 a9       	ldd	r25, Y+48	; 0x30
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	98 ab       	std	Y+48, r25	; 0x30
    1408:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	8f a5       	ldd	r24, Y+47	; 0x2f
    140c:	98 a9       	ldd	r25, Y+48	; 0x30
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f7       	brne	.-38     	; 0x13ec <LCD_displayCharacter+0xc6>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	69 a9       	ldd	r22, Y+49	; 0x31
    1416:	7a a9       	ldd	r23, Y+50	; 0x32
    1418:	8b a9       	ldd	r24, Y+51	; 0x33
    141a:	9c a9       	ldd	r25, Y+52	; 0x34
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	98 ab       	std	Y+48, r25	; 0x30
    1426:	8f a7       	std	Y+47, r24	; 0x2f
    1428:	8f a5       	ldd	r24, Y+47	; 0x2f
    142a:	98 a9       	ldd	r25, Y+48	; 0x30
    142c:	9c a7       	std	Y+44, r25	; 0x2c
    142e:	8b a7       	std	Y+43, r24	; 0x2b
    1430:	8b a5       	ldd	r24, Y+43	; 0x2b
    1432:	9c a5       	ldd	r25, Y+44	; 0x2c
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <LCD_displayCharacter+0x10e>
    1438:	9c a7       	std	Y+44, r25	; 0x2c
    143a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 64       	ori	r24, 0x40	; 64
    1448:	8c 93       	st	X, r24
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e8       	ldi	r26, 0x80	; 128
    1450:	bf e3       	ldi	r27, 0x3F	; 63
    1452:	8f a3       	std	Y+39, r24	; 0x27
    1454:	98 a7       	std	Y+40, r25	; 0x28
    1456:	a9 a7       	std	Y+41, r26	; 0x29
    1458:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6f a1       	ldd	r22, Y+39	; 0x27
    145c:	78 a5       	ldd	r23, Y+40	; 0x28
    145e:	89 a5       	ldd	r24, Y+41	; 0x29
    1460:	9a a5       	ldd	r25, Y+42	; 0x2a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a ef       	ldi	r20, 0xFA	; 250
    1468:	54 e4       	ldi	r21, 0x44	; 68
    146a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8b a3       	std	Y+35, r24	; 0x23
    1474:	9c a3       	std	Y+36, r25	; 0x24
    1476:	ad a3       	std	Y+37, r26	; 0x25
    1478:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    147a:	6b a1       	ldd	r22, Y+35	; 0x23
    147c:	7c a1       	ldd	r23, Y+36	; 0x24
    147e:	8d a1       	ldd	r24, Y+37	; 0x25
    1480:	9e a1       	ldd	r25, Y+38	; 0x26
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <LCD_displayCharacter+0x176>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9a a3       	std	Y+34, r25	; 0x22
    1498:	89 a3       	std	Y+33, r24	; 0x21
    149a:	3f c0       	rjmp	.+126    	; 0x151a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    149c:	6b a1       	ldd	r22, Y+35	; 0x23
    149e:	7c a1       	ldd	r23, Y+36	; 0x24
    14a0:	8d a1       	ldd	r24, Y+37	; 0x25
    14a2:	9e a1       	ldd	r25, Y+38	; 0x26
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6f a1       	ldd	r22, Y+39	; 0x27
    14b6:	78 a5       	ldd	r23, Y+40	; 0x28
    14b8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9a a3       	std	Y+34, r25	; 0x22
    14da:	89 a3       	std	Y+33, r24	; 0x21
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <LCD_displayCharacter+0x1d6>
    14de:	88 ec       	ldi	r24, 0xC8	; 200
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	98 a3       	std	Y+32, r25	; 0x20
    14e4:	8f 8f       	std	Y+31, r24	; 0x1f
    14e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e8:	98 a1       	ldd	r25, Y+32	; 0x20
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <LCD_displayCharacter+0x1c4>
    14ee:	98 a3       	std	Y+32, r25	; 0x20
    14f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	89 a1       	ldd	r24, Y+33	; 0x21
    14f4:	9a a1       	ldd	r25, Y+34	; 0x22
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	9a a3       	std	Y+34, r25	; 0x22
    14fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	89 a1       	ldd	r24, Y+33	; 0x21
    14fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <LCD_displayCharacter+0x1b8>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	6b a1       	ldd	r22, Y+35	; 0x23
    1508:	7c a1       	ldd	r23, Y+36	; 0x24
    150a:	8d a1       	ldd	r24, Y+37	; 0x25
    150c:	9e a1       	ldd	r25, Y+38	; 0x26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9a a3       	std	Y+34, r25	; 0x22
    1518:	89 a3       	std	Y+33, r24	; 0x21
    151a:	89 a1       	ldd	r24, Y+33	; 0x21
    151c:	9a a1       	ldd	r25, Y+34	; 0x22
    151e:	9e 8f       	std	Y+30, r25	; 0x1e
    1520:	8d 8f       	std	Y+29, r24	; 0x1d
    1522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1524:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <LCD_displayCharacter+0x200>
    152a:	9e 8f       	std	Y+30, r25	; 0x1e
    152c:	8d 8f       	std	Y+29, r24	; 0x1d
	#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
	#elif(DATA_BITS_MODE==8)
	LCD_DATA_PORT = data;
    152e:	e5 e3       	ldi	r30, 0x35	; 53
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	89 ad       	ldd	r24, Y+57	; 0x39
    1534:	80 83       	st	Z, r24
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a0 e8       	ldi	r26, 0x80	; 128
    153c:	bf e3       	ldi	r27, 0x3F	; 63
    153e:	89 8f       	std	Y+25, r24	; 0x19
    1540:	9a 8f       	std	Y+26, r25	; 0x1a
    1542:	ab 8f       	std	Y+27, r26	; 0x1b
    1544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	69 8d       	ldd	r22, Y+25	; 0x19
    1548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a ef       	ldi	r20, 0xFA	; 250
    1554:	54 e4       	ldi	r21, 0x44	; 68
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8d 8b       	std	Y+21, r24	; 0x15
    1560:	9e 8b       	std	Y+22, r25	; 0x16
    1562:	af 8b       	std	Y+23, r26	; 0x17
    1564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1566:	6d 89       	ldd	r22, Y+21	; 0x15
    1568:	7e 89       	ldd	r23, Y+22	; 0x16
    156a:	8f 89       	ldd	r24, Y+23	; 0x17
    156c:	98 8d       	ldd	r25, Y+24	; 0x18
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <LCD_displayCharacter+0x262>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1588:	6d 89       	ldd	r22, Y+21	; 0x15
    158a:	7e 89       	ldd	r23, Y+22	; 0x16
    158c:	8f 89       	ldd	r24, Y+23	; 0x17
    158e:	98 8d       	ldd	r25, Y+24	; 0x18
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	69 8d       	ldd	r22, Y+25	; 0x19
    15a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <LCD_displayCharacter+0x2c2>
    15ca:	88 ec       	ldi	r24, 0xC8	; 200
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9a 8b       	std	Y+18, r25	; 0x12
    15d0:	89 8b       	std	Y+17, r24	; 0x11
    15d2:	89 89       	ldd	r24, Y+17	; 0x11
    15d4:	9a 89       	ldd	r25, Y+18	; 0x12
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <LCD_displayCharacter+0x2b0>
    15da:	9a 8b       	std	Y+18, r25	; 0x12
    15dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9c 8b       	std	Y+20, r25	; 0x14
    15e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ea:	9c 89       	ldd	r25, Y+20	; 0x14
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <LCD_displayCharacter+0x2a4>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	6d 89       	ldd	r22, Y+21	; 0x15
    15f4:	7e 89       	ldd	r23, Y+22	; 0x16
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9c 8b       	std	Y+20, r25	; 0x14
    1604:	8b 8b       	std	Y+19, r24	; 0x13
    1606:	8b 89       	ldd	r24, Y+19	; 0x13
    1608:	9c 89       	ldd	r25, Y+20	; 0x14
    160a:	98 8b       	std	Y+16, r25	; 0x10
    160c:	8f 87       	std	Y+15, r24	; 0x0f
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	98 89       	ldd	r25, Y+16	; 0x10
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_displayCharacter+0x2ec>
    1616:	98 8b       	std	Y+16, r25	; 0x10
    1618:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    161a:	a2 e3       	ldi	r26, 0x32	; 50
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e2 e3       	ldi	r30, 0x32	; 50
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 7b       	andi	r24, 0xBF	; 191
    1626:	8c 93       	st	X, r24
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e8       	ldi	r26, 0x80	; 128
    162e:	bf e3       	ldi	r27, 0x3F	; 63
    1630:	8b 87       	std	Y+11, r24	; 0x0b
    1632:	9c 87       	std	Y+12, r25	; 0x0c
    1634:	ad 87       	std	Y+13, r26	; 0x0d
    1636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8f 83       	std	Y+7, r24	; 0x07
    1652:	98 87       	std	Y+8, r25	; 0x08
    1654:	a9 87       	std	Y+9, r26	; 0x09
    1656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <LCD_displayCharacter+0x354>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <LCD_displayCharacter+0x3b4>
    16bc:	88 ec       	ldi	r24, 0xC8	; 200
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCD_displayCharacter+0x3a2>
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <LCD_displayCharacter+0x396>
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_displayCharacter+0x3de>
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    170c:	e9 96       	adiw	r28, 0x39	; 57
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <LCD_displayString>:

void LCD_displayString(const char * str)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <LCD_displayString+0x6>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9b 83       	std	Y+3, r25	; 0x03
    172c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	0e c0       	rjmp	.+28     	; 0x174e <LCD_displayString+0x30>
	while( str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	fc 01       	movw	r30, r24
    173e:	e2 0f       	add	r30, r18
    1740:	f3 1f       	adc	r31, r19
    1742:	80 81       	ld	r24, Z
    1744:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_displayCharacter>
		i++;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char * str)
{
	uint8 i = 0;
	while( str[i] != '\0')
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	fc 01       	movw	r30, r24
    175a:	e2 0f       	add	r30, r18
    175c:	f3 1f       	adc	r31, r19
    175e:	80 81       	ld	r24, Z
    1760:	88 23       	and	r24, r24
    1762:	39 f7       	brne	.-50     	; 0x1732 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <LCD_goToRowColumn+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <LCD_goToRowColumn+0x8>
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3d 83       	std	Y+5, r19	; 0x05
    178a:	2c 83       	std	Y+4, r18	; 0x04
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	c1 f0       	breq	.+48     	; 0x17c6 <LCD_goToRowColumn+0x56>
    1796:	2c 81       	ldd	r18, Y+4	; 0x04
    1798:	3d 81       	ldd	r19, Y+5	; 0x05
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	2c f4       	brge	.+10     	; 0x17aa <LCD_goToRowColumn+0x3a>
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <LCD_goToRowColumn+0x50>
    17a8:	19 c0       	rjmp	.+50     	; 0x17dc <LCD_goToRowColumn+0x6c>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	69 f0       	breq	.+26     	; 0x17ce <LCD_goToRowColumn+0x5e>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <LCD_goToRowColumn+0x66>
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <LCD_goToRowColumn+0x6c>
	{
		case 0 : address = col;
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	0b c0       	rjmp	.+22     	; 0x17dc <LCD_goToRowColumn+0x6c>
		break;
		case 1 : address = col + 0x40;
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	80 5c       	subi	r24, 0xC0	; 192
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <LCD_goToRowColumn+0x6c>
		break;
		case 2 : address = col + 0x10;
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	80 5f       	subi	r24, 0xF0	; 240
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <LCD_goToRowColumn+0x6c>
		break;
		case 3 : address = col + 0x50;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	80 5b       	subi	r24, 0xB0	; 176
    17da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_sendCommand>
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <LCD_displayStringRowColumn+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <LCD_displayStringRowColumn+0x8>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
    1804:	5c 83       	std	Y+4, r21	; 0x04
    1806:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	6a 81       	ldd	r22, Y+2	; 0x02
    180c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_displayString>
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <LCD_integertostring>:

void LCD_integertostring(int data)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	62 97       	sbiw	r28, 0x12	; 18
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	9a 8b       	std	Y+18, r25	; 0x12
    183c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];
	itoa(data,buffer,10);
    183e:	89 89       	ldd	r24, Y+17	; 0x11
    1840:	9a 89       	ldd	r25, Y+18	; 0x12
    1842:	9e 01       	movw	r18, r28
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	b9 01       	movw	r22, r18
    184a:	4a e0       	ldi	r20, 0x0A	; 10
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <itoa>
	LCD_displayString(buffer);
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_displayString>
}
    185a:	62 96       	adiw	r28, 0x12	; 18
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LCD_clearScreen>:

void LCD_clearScreen()
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_sendCommand>
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <main>:

/*******************************************************************************
 *                      Main Function                                  *
 *******************************************************************************/
int main()
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	62 97       	sbiw	r28, 0x12	; 18
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType config1 = {eight,Asynchronous,Disabled,one};
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	8f 87       	std	Y+15, r24	; 0x0f
    1898:	18 8a       	std	Y+16, r1	; 0x10
    189a:	19 8a       	std	Y+17, r1	; 0x11
    189c:	1a 8a       	std	Y+18, r1	; 0x12
	DDRC |= (1<<2);
    189e:	a4 e3       	ldi	r26, 0x34	; 52
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e4 e3       	ldi	r30, 0x34	; 52
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	8c 93       	st	X, r24
	DDRC |= (1<<3);
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	8c 93       	st	X, r24
	DDRD |= (1<<PD2);
    18ba:	a1 e3       	ldi	r26, 0x31	; 49
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e1 e3       	ldi	r30, 0x31	; 49
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	84 60       	ori	r24, 0x04	; 4
    18c6:	8c 93       	st	X, r24
	DDRD |= (1<<PD3);
    18c8:	a1 e3       	ldi	r26, 0x31	; 49
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e1 e3       	ldi	r30, 0x31	; 49
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 60       	ori	r24, 0x08	; 8
    18d4:	8c 93       	st	X, r24
	SREG |= (1<<7);
    18d6:	af e5       	ldi	r26, 0x5F	; 95
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	ef e5       	ldi	r30, 0x5F	; 95
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 68       	ori	r24, 0x80	; 128
    18e2:	8c 93       	st	X, r24
	Timer1_setCallBack(Door_opening);
    18e4:	83 e1       	ldi	r24, 0x13	; 19
    18e6:	93 e1       	ldi	r25, 0x13	; 19
    18e8:	0e 94 3e 14 	call	0x287c	; 0x287c <Timer1_setCallBack>
	EEPROM_init();
    18ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>
	UART_init(&config1);
    18f0:	ce 01       	movw	r24, r28
    18f2:	0f 96       	adiw	r24, 0x0f	; 15
    18f4:	0e 94 68 14 	call	0x28d0	; 0x28d0 <UART_init>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a8 ec       	ldi	r26, 0xC8	; 200
    18fe:	b2 e4       	ldi	r27, 0x42	; 66
    1900:	8b 87       	std	Y+11, r24	; 0x0b
    1902:	9c 87       	std	Y+12, r25	; 0x0c
    1904:	ad 87       	std	Y+13, r26	; 0x0d
    1906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	98 87       	std	Y+8, r25	; 0x08
    1924:	a9 87       	std	Y+9, r26	; 0x09
    1926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <main+0xca>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <main+0x148>
	else if (__tmp > 65535)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <main+0x12a>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <main+0x118>
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <main+0x10c>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0x154>
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	while(1)
	{
		data = UART_receiveByte(); // we used it to determine which action would the second ECU take
    19dc:	0e 94 29 15 	call	0x2a52	; 0x2a52 <UART_receiveByte>
    19e0:	80 93 85 00 	sts	0x0085, r24
		if(data == '0')
    19e4:	80 91 85 00 	lds	r24, 0x0085
    19e8:	80 33       	cpi	r24, 0x30	; 48
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <main+0x172>
		{
			setting_password();
    19ec:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <setting_password>
    19f0:	f5 cf       	rjmp	.-22     	; 0x19dc <main+0x15c>
		}
		else if(data == '1')
    19f2:	80 91 85 00 	lds	r24, 0x0085
    19f6:	81 33       	cpi	r24, 0x31	; 49
    19f8:	89 f7       	brne	.-30     	; 0x19dc <main+0x15c>
		{
			checking_password();
    19fa:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <checking_password>
    19fe:	ee cf       	rjmp	.-36     	; 0x19dc <main+0x15c>

00001a00 <setting_password>:
}
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void setting_password()
{
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	60 97       	sbiw	r28, 0x10	; 16
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a8 ec       	ldi	r26, 0xC8	; 200
    1a1e:	b2 e4       	ldi	r27, 0x42	; 66
    1a20:	8b 87       	std	Y+11, r24	; 0x0b
    1a22:	9c 87       	std	Y+12, r25	; 0x0c
    1a24:	ad 87       	std	Y+13, r26	; 0x0d
    1a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a ef       	ldi	r20, 0xFA	; 250
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	98 87       	std	Y+8, r25	; 0x08
    1a44:	a9 87       	std	Y+9, r26	; 0x09
    1a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <setting_password+0x6a>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <setting_password+0xe8>
	else if (__tmp > 65535)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <setting_password+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <setting_password+0xca>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <setting_password+0xb8>
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <setting_password+0xac>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <setting_password+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <setting_password+0xf4>
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	for ( int i = 0 ; i < 5 ; i++ ) // receiving and saving the entered password
    1afc:	18 8a       	std	Y+16, r1	; 0x10
    1afe:	1f 86       	std	Y+15, r1	; 0x0f
    1b00:	1f c0       	rjmp	.+62     	; 0x1b40 <setting_password+0x140>
	{
		str3[i] = UART_receiveByte();
    1b02:	0f 85       	ldd	r16, Y+15	; 0x0f
    1b04:	18 89       	ldd	r17, Y+16	; 0x10
    1b06:	0e 94 29 15 	call	0x2a52	; 0x2a52 <UART_receiveByte>
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	e1 58       	subi	r30, 0x81	; 129
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
		EEPROM_writeByte((address+i),str3[i]);
    1b12:	20 91 68 00 	lds	r18, 0x0068
    1b16:	30 91 69 00 	lds	r19, 0x0069
    1b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1c:	98 89       	ldd	r25, Y+16	; 0x10
    1b1e:	28 0f       	add	r18, r24
    1b20:	39 1f       	adc	r19, r25
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	98 89       	ldd	r25, Y+16	; 0x10
    1b26:	fc 01       	movw	r30, r24
    1b28:	e1 58       	subi	r30, 0x81	; 129
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	40 81       	ld	r20, Z
    1b2e:	c9 01       	movw	r24, r18
    1b30:	64 2f       	mov	r22, r20
    1b32:	0e 94 b5 05 	call	0xb6a	; 0xb6a <EEPROM_writeByte>
 *                      Functions Definitions                                  *
 *******************************************************************************/
void setting_password()
{
	_delay_ms(100);
	for ( int i = 0 ; i < 5 ; i++ ) // receiving and saving the entered password
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	98 89       	ldd	r25, Y+16	; 0x10
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	98 8b       	std	Y+16, r25	; 0x10
    1b3e:	8f 87       	std	Y+15, r24	; 0x0f
    1b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b42:	98 89       	ldd	r25, Y+16	; 0x10
    1b44:	85 30       	cpi	r24, 0x05	; 5
    1b46:	91 05       	cpc	r25, r1
    1b48:	e4 f2       	brlt	.-72     	; 0x1b02 <setting_password+0x102>
	{
		str3[i] = UART_receiveByte();
		EEPROM_writeByte((address+i),str3[i]);
	}
}
    1b4a:	60 96       	adiw	r28, 0x10	; 16
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <checking_password>:

void checking_password()
{
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	c2 57       	subi	r28, 0x72	; 114
    1b6e:	d0 40       	sbci	r29, 0x00	; 0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e3 59       	subi	r30, 0x93	; 147
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a8 ec       	ldi	r26, 0xC8	; 200
    1b86:	b2 e4       	ldi	r27, 0x42	; 66
    1b88:	80 83       	st	Z, r24
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	a2 83       	std	Z+2, r26	; 0x02
    1b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	8e 01       	movw	r16, r28
    1b92:	07 59       	subi	r16, 0x97	; 151
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	fe 01       	movw	r30, r28
    1b98:	e3 59       	subi	r30, 0x93	; 147
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a ef       	ldi	r20, 0xFA	; 250
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	80 83       	st	Z, r24
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	a2 83       	std	Z+2, r26	; 0x02
    1bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e7 59       	subi	r30, 0x97	; 151
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	44 f4       	brge	.+16     	; 0x1bec <checking_password+0x8c>
		__ticks = 1;
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e9 59       	subi	r30, 0x99	; 153
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	64 c0       	rjmp	.+200    	; 0x1cb4 <checking_password+0x154>
	else if (__tmp > 65535)
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 59       	subi	r30, 0x97	; 151
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	0c f0       	brlt	.+2      	; 0x1c0c <checking_password+0xac>
    1c0a:	43 c0       	rjmp	.+134    	; 0x1c92 <checking_password+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e3 59       	subi	r30, 0x93	; 147
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	09 59       	subi	r16, 0x99	; 153
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	1f c0       	rjmp	.+62     	; 0x1c82 <checking_password+0x122>
    1c44:	fe 01       	movw	r30, r28
    1c46:	eb 59       	subi	r30, 0x9B	; 155
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
    1c52:	fe 01       	movw	r30, r28
    1c54:	eb 59       	subi	r30, 0x9B	; 155
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <checking_password+0xfc>
    1c60:	fe 01       	movw	r30, r28
    1c62:	eb 59       	subi	r30, 0x9B	; 155
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	de 01       	movw	r26, r28
    1c6c:	a9 59       	subi	r26, 0x99	; 153
    1c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	e9 59       	subi	r30, 0x99	; 153
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	9c 93       	st	X, r25
    1c80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	fe 01       	movw	r30, r28
    1c84:	e9 59       	subi	r30, 0x99	; 153
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	d1 f6       	brne	.-76     	; 0x1c44 <checking_password+0xe4>
    1c90:	28 c0       	rjmp	.+80     	; 0x1ce2 <checking_password+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	8e 01       	movw	r16, r28
    1c94:	09 59       	subi	r16, 0x99	; 153
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 59       	subi	r30, 0x97	; 151
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	f8 01       	movw	r30, r16
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	de 01       	movw	r26, r28
    1cb6:	ad 59       	subi	r26, 0x9D	; 157
    1cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e9 59       	subi	r30, 0x99	; 153
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	9c 93       	st	X, r25
    1cc8:	8e 93       	st	-X, r24
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 59       	subi	r30, 0x9D	; 157
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <checking_password+0x174>
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ed 59       	subi	r30, 0x9D	; 157
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
	_delay_ms(100);
	for(int i = 0 ; i < 5 ; i++ ) //comparing between the entered password and the password inside the EEPROM
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ef 58       	subi	r30, 0x8F	; 143
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	11 82       	std	Z+1, r1	; 0x01
    1cea:	10 82       	st	Z, r1
    1cec:	34 c2       	rjmp	.+1128   	; 0x2156 <checking_password+0x5f6>
	{
		str[i] = UART_receiveByte();
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 58       	subi	r30, 0x8F	; 143
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	00 81       	ld	r16, Z
    1cf6:	11 81       	ldd	r17, Z+1	; 0x01
    1cf8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <UART_receiveByte>
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	ea 57       	subi	r30, 0x7A	; 122
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 83       	st	Z, r24
    1d04:	fe 01       	movw	r30, r28
    1d06:	e1 5a       	subi	r30, 0xA1	; 161
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a8 ec       	ldi	r26, 0xC8	; 200
    1d10:	b2 e4       	ldi	r27, 0x42	; 66
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	05 5a       	subi	r16, 0xA5	; 165
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	fe 01       	movw	r30, r28
    1d22:	e1 5a       	subi	r30, 0xA1	; 161
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	a2 83       	std	Z+2, r26	; 0x02
    1d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e5 5a       	subi	r30, 0xA5	; 165
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	44 f4       	brge	.+16     	; 0x1d76 <checking_password+0x216>
		__ticks = 1;
    1d66:	fe 01       	movw	r30, r28
    1d68:	e7 5a       	subi	r30, 0xA7	; 167
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
    1d74:	64 c0       	rjmp	.+200    	; 0x1e3e <checking_password+0x2de>
	else if (__tmp > 65535)
    1d76:	fe 01       	movw	r30, r28
    1d78:	e5 5a       	subi	r30, 0xA5	; 165
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <checking_password+0x236>
    1d94:	43 c0       	rjmp	.+134    	; 0x1e1c <checking_password+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	fe 01       	movw	r30, r28
    1d98:	e1 5a       	subi	r30, 0xA1	; 161
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8e 01       	movw	r16, r28
    1db6:	07 5a       	subi	r16, 0xA7	; 167
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	1f c0       	rjmp	.+62     	; 0x1e0c <checking_password+0x2ac>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 5a       	subi	r30, 0xA9	; 169
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e9 5a       	subi	r30, 0xA9	; 169
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <checking_password+0x286>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e9 5a       	subi	r30, 0xA9	; 169
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	de 01       	movw	r26, r28
    1df6:	a7 5a       	subi	r26, 0xA7	; 167
    1df8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e7 5a       	subi	r30, 0xA7	; 167
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	9c 93       	st	X, r25
    1e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e7 5a       	subi	r30, 0xA7	; 167
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	d1 f6       	brne	.-76     	; 0x1dce <checking_password+0x26e>
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <checking_password+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	07 5a       	subi	r16, 0xA7	; 167
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	e5 5a       	subi	r30, 0xA5	; 165
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	de 01       	movw	r26, r28
    1e40:	ab 5a       	subi	r26, 0xAB	; 171
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e7 5a       	subi	r30, 0xA7	; 167
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	8d 93       	st	X+, r24
    1e50:	9c 93       	st	X, r25
    1e52:	fe 01       	movw	r30, r28
    1e54:	eb 5a       	subi	r30, 0xAB	; 171
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <checking_password+0x2fc>
    1e60:	fe 01       	movw	r30, r28
    1e62:	eb 5a       	subi	r30, 0xAB	; 171
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
		_delay_ms(100);
		EEPROM_readByte((address+i),str4 + i );
    1e6a:	20 91 68 00 	lds	r18, 0x0068
    1e6e:	30 91 69 00 	lds	r19, 0x0069
    1e72:	fe 01       	movw	r30, r28
    1e74:	ef 58       	subi	r30, 0x8F	; 143
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	a9 01       	movw	r20, r18
    1e7e:	48 0f       	add	r20, r24
    1e80:	59 1f       	adc	r21, r25
    1e82:	fe 01       	movw	r30, r28
    1e84:	ef 58       	subi	r30, 0x8F	; 143
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	27 58       	subi	r18, 0x87	; 135
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	ca 01       	movw	r24, r20
    1e94:	b9 01       	movw	r22, r18
    1e96:	0e 94 f6 05 	call	0xbec	; 0xbec <EEPROM_readByte>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ef 5a       	subi	r30, 0xAF	; 175
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a8 ec       	ldi	r26, 0xC8	; 200
    1ea6:	b2 e4       	ldi	r27, 0x42	; 66
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	a2 83       	std	Z+2, r26	; 0x02
    1eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	8e 01       	movw	r16, r28
    1eb2:	03 5b       	subi	r16, 0xB3	; 179
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ef 5a       	subi	r30, 0xAF	; 175
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	80 83       	st	Z, r24
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	a2 83       	std	Z+2, r26	; 0x02
    1edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e3 5b       	subi	r30, 0xB3	; 179
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	44 f4       	brge	.+16     	; 0x1f0c <checking_password+0x3ac>
		__ticks = 1;
    1efc:	fe 01       	movw	r30, r28
    1efe:	e5 5b       	subi	r30, 0xB5	; 181
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	64 c0       	rjmp	.+200    	; 0x1fd4 <checking_password+0x474>
	else if (__tmp > 65535)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e3 5b       	subi	r30, 0xB3	; 179
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <checking_password+0x3cc>
    1f2a:	43 c0       	rjmp	.+134    	; 0x1fb2 <checking_password+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ef 5a       	subi	r30, 0xAF	; 175
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	05 5b       	subi	r16, 0xB5	; 181
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	1f c0       	rjmp	.+62     	; 0x1fa2 <checking_password+0x442>
    1f64:	fe 01       	movw	r30, r28
    1f66:	e7 5b       	subi	r30, 0xB7	; 183
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	88 ec       	ldi	r24, 0xC8	; 200
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	fe 01       	movw	r30, r28
    1f74:	e7 5b       	subi	r30, 0xB7	; 183
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <checking_password+0x41c>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5b       	subi	r30, 0xB7	; 183
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	de 01       	movw	r26, r28
    1f8c:	a5 5b       	subi	r26, 0xB5	; 181
    1f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f90:	fe 01       	movw	r30, r28
    1f92:	e5 5b       	subi	r30, 0xB5	; 181
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	11 96       	adiw	r26, 0x01	; 1
    1f9e:	9c 93       	st	X, r25
    1fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e5 5b       	subi	r30, 0xB5	; 181
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	d1 f6       	brne	.-76     	; 0x1f64 <checking_password+0x404>
    1fb0:	28 c0       	rjmp	.+80     	; 0x2002 <checking_password+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	05 5b       	subi	r16, 0xB5	; 181
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e3 5b       	subi	r30, 0xB3	; 179
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	de 01       	movw	r26, r28
    1fd6:	a9 5b       	subi	r26, 0xB9	; 185
    1fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e5 5b       	subi	r30, 0xB5	; 181
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
    1fea:	fe 01       	movw	r30, r28
    1fec:	e9 5b       	subi	r30, 0xB9	; 185
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <checking_password+0x494>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e9 5b       	subi	r30, 0xB9	; 185
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
		_delay_ms(100);
		if(str[i] == str4[i])
    2002:	fe 01       	movw	r30, r28
    2004:	ef 58       	subi	r30, 0x8F	; 143
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	fc 01       	movw	r30, r24
    200e:	ea 57       	subi	r30, 0x7A	; 122
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	20 81       	ld	r18, Z
    2014:	fe 01       	movw	r30, r28
    2016:	ef 58       	subi	r30, 0x8F	; 143
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	fc 01       	movw	r30, r24
    2020:	e7 58       	subi	r30, 0x87	; 135
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	28 17       	cp	r18, r24
    2028:	29 f4       	brne	.+10     	; 0x2034 <checking_password+0x4d4>
		{
			s++;
    202a:	80 91 73 00 	lds	r24, 0x0073
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	80 93 73 00 	sts	0x0073, r24
    2034:	fe 01       	movw	r30, r28
    2036:	ed 5b       	subi	r30, 0xBD	; 189
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a8 ec       	ldi	r26, 0xC8	; 200
    2040:	b2 e4       	ldi	r27, 0x42	; 66
    2042:	80 83       	st	Z, r24
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	a2 83       	std	Z+2, r26	; 0x02
    2048:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	8e 01       	movw	r16, r28
    204c:	01 5c       	subi	r16, 0xC1	; 193
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	fe 01       	movw	r30, r28
    2052:	ed 5b       	subi	r30, 0xBD	; 189
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	f8 01       	movw	r30, r16
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	a2 83       	std	Z+2, r26	; 0x02
    2076:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2078:	fe 01       	movw	r30, r28
    207a:	ff 96       	adiw	r30, 0x3f	; 63
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e8       	ldi	r20, 0x80	; 128
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2090:	88 23       	and	r24, r24
    2092:	2c f4       	brge	.+10     	; 0x209e <checking_password+0x53e>
		__ticks = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9e af       	std	Y+62, r25	; 0x3e
    209a:	8d af       	std	Y+61, r24	; 0x3d
    209c:	46 c0       	rjmp	.+140    	; 0x212a <checking_password+0x5ca>
	else if (__tmp > 65535)
    209e:	fe 01       	movw	r30, r28
    20a0:	ff 96       	adiw	r30, 0x3f	; 63
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	64 f5       	brge	.+88     	; 0x2112 <checking_password+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 5b       	subi	r30, 0xBD	; 189
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e af       	std	Y+62, r25	; 0x3e
    20e6:	8d af       	std	Y+61, r24	; 0x3d
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <checking_password+0x5a8>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c af       	std	Y+60, r25	; 0x3c
    20f0:	8b af       	std	Y+59, r24	; 0x3b
    20f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    20f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <checking_password+0x596>
    20fa:	9c af       	std	Y+60, r25	; 0x3c
    20fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2100:	9e ad       	ldd	r25, Y+62	; 0x3e
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9e af       	std	Y+62, r25	; 0x3e
    2106:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8d ad       	ldd	r24, Y+61	; 0x3d
    210a:	9e ad       	ldd	r25, Y+62	; 0x3e
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <checking_password+0x58a>
    2110:	16 c0       	rjmp	.+44     	; 0x213e <checking_password+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	fe 01       	movw	r30, r28
    2114:	ff 96       	adiw	r30, 0x3f	; 63
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9e af       	std	Y+62, r25	; 0x3e
    2128:	8d af       	std	Y+61, r24	; 0x3d
    212a:	8d ad       	ldd	r24, Y+61	; 0x3d
    212c:	9e ad       	ldd	r25, Y+62	; 0x3e
    212e:	9a af       	std	Y+58, r25	; 0x3a
    2130:	89 af       	std	Y+57, r24	; 0x39
    2132:	89 ad       	ldd	r24, Y+57	; 0x39
    2134:	9a ad       	ldd	r25, Y+58	; 0x3a
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <checking_password+0x5d6>
    213a:	9a af       	std	Y+58, r25	; 0x3a
    213c:	89 af       	std	Y+57, r24	; 0x39
}

void checking_password()
{
	_delay_ms(100);
	for(int i = 0 ; i < 5 ; i++ ) //comparing between the entered password and the password inside the EEPROM
    213e:	de 01       	movw	r26, r28
    2140:	af 58       	subi	r26, 0x8F	; 143
    2142:	bf 4f       	sbci	r27, 0xFF	; 255
    2144:	fe 01       	movw	r30, r28
    2146:	ef 58       	subi	r30, 0x8F	; 143
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	11 96       	adiw	r26, 0x01	; 1
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	fe 01       	movw	r30, r28
    2158:	ef 58       	subi	r30, 0x8F	; 143
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	91 05       	cpc	r25, r1
    2164:	0c f4       	brge	.+2      	; 0x2168 <checking_password+0x608>
    2166:	c3 cd       	rjmp	.-1146   	; 0x1cee <checking_password+0x18e>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a8 ec       	ldi	r26, 0xC8	; 200
    216e:	b2 e4       	ldi	r27, 0x42	; 66
    2170:	8d ab       	std	Y+53, r24	; 0x35
    2172:	9e ab       	std	Y+54, r25	; 0x36
    2174:	af ab       	std	Y+55, r26	; 0x37
    2176:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6d a9       	ldd	r22, Y+53	; 0x35
    217a:	7e a9       	ldd	r23, Y+54	; 0x36
    217c:	8f a9       	ldd	r24, Y+55	; 0x37
    217e:	98 ad       	ldd	r25, Y+56	; 0x38
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	89 ab       	std	Y+49, r24	; 0x31
    2192:	9a ab       	std	Y+50, r25	; 0x32
    2194:	ab ab       	std	Y+51, r26	; 0x33
    2196:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2198:	69 a9       	ldd	r22, Y+49	; 0x31
    219a:	7a a9       	ldd	r23, Y+50	; 0x32
    219c:	8b a9       	ldd	r24, Y+51	; 0x33
    219e:	9c a9       	ldd	r25, Y+52	; 0x34
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <checking_password+0x65a>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <checking_password+0x6d8>
	else if (__tmp > 65535)
    21ba:	69 a9       	ldd	r22, Y+49	; 0x31
    21bc:	7a a9       	ldd	r23, Y+50	; 0x32
    21be:	8b a9       	ldd	r24, Y+51	; 0x33
    21c0:	9c a9       	ldd	r25, Y+52	; 0x34
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <checking_password+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6d a9       	ldd	r22, Y+53	; 0x35
    21d4:	7e a9       	ldd	r23, Y+54	; 0x36
    21d6:	8f a9       	ldd	r24, Y+55	; 0x37
    21d8:	98 ad       	ldd	r25, Y+56	; 0x38
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	98 ab       	std	Y+48, r25	; 0x30
    21f8:	8f a7       	std	Y+47, r24	; 0x2f
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <checking_password+0x6ba>
    21fc:	88 ec       	ldi	r24, 0xC8	; 200
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e a7       	std	Y+46, r25	; 0x2e
    2202:	8d a7       	std	Y+45, r24	; 0x2d
    2204:	8d a5       	ldd	r24, Y+45	; 0x2d
    2206:	9e a5       	ldd	r25, Y+46	; 0x2e
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <checking_password+0x6a8>
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8f a5       	ldd	r24, Y+47	; 0x2f
    2212:	98 a9       	ldd	r25, Y+48	; 0x30
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	98 ab       	std	Y+48, r25	; 0x30
    2218:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8f a5       	ldd	r24, Y+47	; 0x2f
    221c:	98 a9       	ldd	r25, Y+48	; 0x30
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <checking_password+0x69c>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <checking_password+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	69 a9       	ldd	r22, Y+49	; 0x31
    2226:	7a a9       	ldd	r23, Y+50	; 0x32
    2228:	8b a9       	ldd	r24, Y+51	; 0x33
    222a:	9c a9       	ldd	r25, Y+52	; 0x34
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	98 ab       	std	Y+48, r25	; 0x30
    2236:	8f a7       	std	Y+47, r24	; 0x2f
    2238:	8f a5       	ldd	r24, Y+47	; 0x2f
    223a:	98 a9       	ldd	r25, Y+48	; 0x30
    223c:	9c a7       	std	Y+44, r25	; 0x2c
    223e:	8b a7       	std	Y+43, r24	; 0x2b
    2240:	8b a5       	ldd	r24, Y+43	; 0x2b
    2242:	9c a5       	ldd	r25, Y+44	; 0x2c
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <checking_password+0x6e4>
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
			s++;
		}
		_delay_ms(100);
	}
	_delay_ms(100);
	if ( s == 5 ) //checking if the password matches
    224c:	80 91 73 00 	lds	r24, 0x0073
    2250:	85 30       	cpi	r24, 0x05	; 5
    2252:	09 f0       	breq	.+2      	; 0x2256 <checking_password+0x6f6>
    2254:	bd c0       	rjmp	.+378    	; 0x23d0 <checking_password+0x870>
	{
		UART_sendByte('1'); //sending this byte to confirm the password matching to the first ECU
    2256:	81 e3       	ldi	r24, 0x31	; 49
    2258:	0e 94 12 15 	call	0x2a24	; 0x2a24 <UART_sendByte>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a6 e1       	ldi	r26, 0x16	; 22
    2262:	b4 e4       	ldi	r27, 0x44	; 68
    2264:	8f a3       	std	Y+39, r24	; 0x27
    2266:	98 a7       	std	Y+40, r25	; 0x28
    2268:	a9 a7       	std	Y+41, r26	; 0x29
    226a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6f a1       	ldd	r22, Y+39	; 0x27
    226e:	78 a5       	ldd	r23, Y+40	; 0x28
    2270:	89 a5       	ldd	r24, Y+41	; 0x29
    2272:	9a a5       	ldd	r25, Y+42	; 0x2a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8b a3       	std	Y+35, r24	; 0x23
    2286:	9c a3       	std	Y+36, r25	; 0x24
    2288:	ad a3       	std	Y+37, r26	; 0x25
    228a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <checking_password+0x74e>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9a a3       	std	Y+34, r25	; 0x22
    22aa:	89 a3       	std	Y+33, r24	; 0x21
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <checking_password+0x7cc>
	else if (__tmp > 65535)
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <checking_password+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9a a3       	std	Y+34, r25	; 0x22
    22ec:	89 a3       	std	Y+33, r24	; 0x21
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <checking_password+0x7ae>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	98 a3       	std	Y+32, r25	; 0x20
    22f6:	8f 8f       	std	Y+31, r24	; 0x1f
    22f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fa:	98 a1       	ldd	r25, Y+32	; 0x20
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <checking_password+0x79c>
    2300:	98 a3       	std	Y+32, r25	; 0x20
    2302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	9a a1       	ldd	r25, Y+34	; 0x22
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <checking_password+0x790>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <checking_password+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	9e 8f       	std	Y+30, r25	; 0x1e
    2332:	8d 8f       	std	Y+29, r24	; 0x1d
    2334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <checking_password+0x7d8>
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(600);
		Timer1_init(&config2);
    2340:	8a e6       	ldi	r24, 0x6A	; 106
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Timer1_init>
    2348:	02 c0       	rjmp	.+4      	; 0x234e <checking_password+0x7ee>
		while(seconds >= 0 && seconds <= 15)
		{
			motor_clockwise();
    234a:	0e 94 2e 13 	call	0x265c	; 0x265c <motor_clockwise>
	if ( s == 5 ) //checking if the password matches
	{
		UART_sendByte('1'); //sending this byte to confirm the password matching to the first ECU
		_delay_ms(600);
		Timer1_init(&config2);
		while(seconds >= 0 && seconds <= 15)
    234e:	80 91 75 00 	lds	r24, 0x0075
    2352:	90 91 76 00 	lds	r25, 0x0076
    2356:	99 23       	and	r25, r25
    2358:	54 f0       	brlt	.+20     	; 0x236e <checking_password+0x80e>
    235a:	80 91 75 00 	lds	r24, 0x0075
    235e:	90 91 76 00 	lds	r25, 0x0076
    2362:	80 31       	cpi	r24, 0x10	; 16
    2364:	91 05       	cpc	r25, r1
    2366:	8c f3       	brlt	.-30     	; 0x234a <checking_password+0x7ea>
    2368:	02 c0       	rjmp	.+4      	; 0x236e <checking_password+0x80e>
		{
			motor_clockwise();
		}
		while(seconds >= 16 && seconds <= 18)
		{
			motor_stop();
    236a:	0e 94 43 13 	call	0x2686	; 0x2686 <motor_stop>
		Timer1_init(&config2);
		while(seconds >= 0 && seconds <= 15)
		{
			motor_clockwise();
		}
		while(seconds >= 16 && seconds <= 18)
    236e:	80 91 75 00 	lds	r24, 0x0075
    2372:	90 91 76 00 	lds	r25, 0x0076
    2376:	80 31       	cpi	r24, 0x10	; 16
    2378:	91 05       	cpc	r25, r1
    237a:	54 f0       	brlt	.+20     	; 0x2390 <checking_password+0x830>
    237c:	80 91 75 00 	lds	r24, 0x0075
    2380:	90 91 76 00 	lds	r25, 0x0076
    2384:	83 31       	cpi	r24, 0x13	; 19
    2386:	91 05       	cpc	r25, r1
    2388:	84 f3       	brlt	.-32     	; 0x236a <checking_password+0x80a>
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <checking_password+0x830>
		{
			motor_stop();
		}
		while(seconds >= 19 && seconds <= 33)
		{
			motor_anti_clockwise();
    238c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <motor_anti_clockwise>
		}
		while(seconds >= 16 && seconds <= 18)
		{
			motor_stop();
		}
		while(seconds >= 19 && seconds <= 33)
    2390:	80 91 75 00 	lds	r24, 0x0075
    2394:	90 91 76 00 	lds	r25, 0x0076
    2398:	83 31       	cpi	r24, 0x13	; 19
    239a:	91 05       	cpc	r25, r1
    239c:	3c f0       	brlt	.+14     	; 0x23ac <checking_password+0x84c>
    239e:	80 91 75 00 	lds	r24, 0x0075
    23a2:	90 91 76 00 	lds	r25, 0x0076
    23a6:	82 32       	cpi	r24, 0x22	; 34
    23a8:	91 05       	cpc	r25, r1
    23aa:	84 f3       	brlt	.-32     	; 0x238c <checking_password+0x82c>
		{
			motor_anti_clockwise();
		}
		if (seconds == 34 )
    23ac:	80 91 75 00 	lds	r24, 0x0075
    23b0:	90 91 76 00 	lds	r25, 0x0076
    23b4:	82 32       	cpi	r24, 0x22	; 34
    23b6:	91 05       	cpc	r25, r1
    23b8:	41 f4       	brne	.+16     	; 0x23ca <checking_password+0x86a>
		{
			seconds = 0;
    23ba:	10 92 76 00 	sts	0x0076, r1
    23be:	10 92 75 00 	sts	0x0075, r1
			motor_stop();
    23c2:	0e 94 43 13 	call	0x2686	; 0x2686 <motor_stop>
			Timer1_deinit();
    23c6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Timer1_deinit>
		}
		s = 0;
    23ca:	10 92 73 00 	sts	0x0073, r1
    23ce:	1f c1       	rjmp	.+574    	; 0x260e <checking_password+0xaae>
	}
	else
	{
		y++;
    23d0:	80 91 74 00 	lds	r24, 0x0074
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	80 93 74 00 	sts	0x0074, r24
		if (y < 3 )
    23da:	80 91 74 00 	lds	r24, 0x0074
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <checking_password+0x884>
    23e2:	7a c0       	rjmp	.+244    	; 0x24d8 <checking_password+0x978>
		{
			UART_sendByte('0'); //sending this byte to tell the first ECU that the entered password is wrong
    23e4:	80 e3       	ldi	r24, 0x30	; 48
    23e6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <UART_sendByte>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a8 ec       	ldi	r26, 0xC8	; 200
    23f0:	b2 e4       	ldi	r27, 0x42	; 66
    23f2:	89 8f       	std	Y+25, r24	; 0x19
    23f4:	9a 8f       	std	Y+26, r25	; 0x1a
    23f6:	ab 8f       	std	Y+27, r26	; 0x1b
    23f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	69 8d       	ldd	r22, Y+25	; 0x19
    23fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8d 8b       	std	Y+21, r24	; 0x15
    2414:	9e 8b       	std	Y+22, r25	; 0x16
    2416:	af 8b       	std	Y+23, r26	; 0x17
    2418:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    241a:	6d 89       	ldd	r22, Y+21	; 0x15
    241c:	7e 89       	ldd	r23, Y+22	; 0x16
    241e:	8f 89       	ldd	r24, Y+23	; 0x17
    2420:	98 8d       	ldd	r25, Y+24	; 0x18
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <checking_password+0x8dc>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <checking_password+0x95a>
	else if (__tmp > 65535)
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <checking_password+0x946>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	69 8d       	ldd	r22, Y+25	; 0x19
    2456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	0f c0       	rjmp	.+30     	; 0x249c <checking_password+0x93c>
    247e:	88 ec       	ldi	r24, 0xC8	; 200
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9a 8b       	std	Y+18, r25	; 0x12
    2484:	89 8b       	std	Y+17, r24	; 0x11
    2486:	89 89       	ldd	r24, Y+17	; 0x11
    2488:	9a 89       	ldd	r25, Y+18	; 0x12
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <checking_password+0x92a>
    248e:	9a 8b       	std	Y+18, r25	; 0x12
    2490:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9c 8b       	std	Y+20, r25	; 0x14
    249a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8b 89       	ldd	r24, Y+19	; 0x13
    249e:	9c 89       	ldd	r25, Y+20	; 0x14
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <checking_password+0x91e>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <checking_password+0x96e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6d 89       	ldd	r22, Y+21	; 0x15
    24a8:	7e 89       	ldd	r23, Y+22	; 0x16
    24aa:	8f 89       	ldd	r24, Y+23	; 0x17
    24ac:	98 8d       	ldd	r25, Y+24	; 0x18
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	98 8b       	std	Y+16, r25	; 0x10
    24c0:	8f 87       	std	Y+15, r24	; 0x0f
    24c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c4:	98 89       	ldd	r25, Y+16	; 0x10
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <checking_password+0x966>
    24ca:	98 8b       	std	Y+16, r25	; 0x10
    24cc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			s = 0;
    24ce:	10 92 73 00 	sts	0x0073, r1
			checking_password();
    24d2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <checking_password>
    24d6:	9b c0       	rjmp	.+310    	; 0x260e <checking_password+0xaae>
		}
		else if ( y == 3 )
    24d8:	80 91 74 00 	lds	r24, 0x0074
    24dc:	83 30       	cpi	r24, 0x03	; 3
    24de:	09 f0       	breq	.+2      	; 0x24e2 <checking_password+0x982>
    24e0:	96 c0       	rjmp	.+300    	; 0x260e <checking_password+0xaae>
		{
			UART_sendByte('3');//sending this byte to tell the first ECU that the user entered the password wrongly for three times
    24e2:	83 e3       	ldi	r24, 0x33	; 51
    24e4:	0e 94 12 15 	call	0x2a24	; 0x2a24 <UART_sendByte>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a8 ec       	ldi	r26, 0xC8	; 200
    24ee:	b2 e4       	ldi	r27, 0x42	; 66
    24f0:	8b 87       	std	Y+11, r24	; 0x0b
    24f2:	9c 87       	std	Y+12, r25	; 0x0c
    24f4:	ad 87       	std	Y+13, r26	; 0x0d
    24f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8f 83       	std	Y+7, r24	; 0x07
    2512:	98 87       	std	Y+8, r25	; 0x08
    2514:	a9 87       	std	Y+9, r26	; 0x09
    2516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <checking_password+0x9da>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <checking_password+0xa58>
	else if (__tmp > 65535)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <checking_password+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	0f c0       	rjmp	.+30     	; 0x259a <checking_password+0xa3a>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <checking_password+0xa28>
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <checking_password+0xa1c>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <checking_password+0xa6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <checking_password+0xa64>
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			PORTD |= (1<<PD2); // the buzzer activation
    25cc:	a2 e3       	ldi	r26, 0x32	; 50
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e2 e3       	ldi	r30, 0x32	; 50
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	84 60       	ori	r24, 0x04	; 4
    25d8:	8c 93       	st	X, r24
			Timer1_init(&config2);
    25da:	8a e6       	ldi	r24, 0x6A	; 106
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Timer1_init>
			while (seconds != 60);
    25e2:	80 91 75 00 	lds	r24, 0x0075
    25e6:	90 91 76 00 	lds	r25, 0x0076
    25ea:	8c 33       	cpi	r24, 0x3C	; 60
    25ec:	91 05       	cpc	r25, r1
    25ee:	c9 f7       	brne	.-14     	; 0x25e2 <checking_password+0xa82>
			seconds = 0;
    25f0:	10 92 76 00 	sts	0x0076, r1
    25f4:	10 92 75 00 	sts	0x0075, r1
			PORTD &=~ (1<<PD2);
    25f8:	a2 e3       	ldi	r26, 0x32	; 50
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e3       	ldi	r30, 0x32	; 50
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8b 7f       	andi	r24, 0xFB	; 251
    2604:	8c 93       	st	X, r24
			y = 0;
    2606:	10 92 74 00 	sts	0x0074, r1
			s = 0;
    260a:	10 92 73 00 	sts	0x0073, r1
		}
	}

}
    260e:	ce 58       	subi	r28, 0x8E	; 142
    2610:	df 4f       	sbci	r29, 0xFF	; 255
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	08 95       	ret

00002626 <Door_opening>:

void Door_opening(void)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
	count++;
    262e:	80 91 72 00 	lds	r24, 0x0072
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 93 72 00 	sts	0x0072, r24
	if (count == 123 )
    2638:	80 91 72 00 	lds	r24, 0x0072
    263c:	8b 37       	cpi	r24, 0x7B	; 123
    263e:	59 f4       	brne	.+22     	; 0x2656 <Door_opening+0x30>
	{
		seconds++;
    2640:	80 91 75 00 	lds	r24, 0x0075
    2644:	90 91 76 00 	lds	r25, 0x0076
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	90 93 76 00 	sts	0x0076, r25
    264e:	80 93 75 00 	sts	0x0075, r24
		count = 0;
    2652:	10 92 72 00 	sts	0x0072, r1
	}
}
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <motor_clockwise>:

void motor_clockwise()
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
	PORTC &= (~(1<<PC2));
    2664:	a5 e3       	ldi	r26, 0x35	; 53
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e5 e3       	ldi	r30, 0x35	; 53
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	8b 7f       	andi	r24, 0xFB	; 251
    2670:	8c 93       	st	X, r24
	PORTC |= (1<<PC3);
    2672:	a5 e3       	ldi	r26, 0x35	; 53
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e5 e3       	ldi	r30, 0x35	; 53
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	88 60       	ori	r24, 0x08	; 8
    267e:	8c 93       	st	X, r24
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <motor_stop>:

void motor_stop()
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	PORTC &=~ (1<<3);
    268e:	a5 e3       	ldi	r26, 0x35	; 53
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e5 e3       	ldi	r30, 0x35	; 53
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	87 7f       	andi	r24, 0xF7	; 247
    269a:	8c 93       	st	X, r24
	PORTC &=~ (1<<2);
    269c:	a5 e3       	ldi	r26, 0x35	; 53
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e5 e3       	ldi	r30, 0x35	; 53
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	8b 7f       	andi	r24, 0xFB	; 251
    26a8:	8c 93       	st	X, r24
}
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <motor_anti_clockwise>:

void motor_anti_clockwise()
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1<<PC2);
    26b8:	a5 e3       	ldi	r26, 0x35	; 53
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e3       	ldi	r30, 0x35	; 53
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	84 60       	ori	r24, 0x04	; 4
    26c4:	8c 93       	st	X, r24
	PORTC &= (~(1<<PC3));
    26c6:	a5 e3       	ldi	r26, 0x35	; 53
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e5 e3       	ldi	r30, 0x35	; 53
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	87 7f       	andi	r24, 0xF7	; 247
    26d2:	8c 93       	st	X, r24
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <__vector_8>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    26da:	1f 92       	push	r1
    26dc:	0f 92       	push	r0
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	2f 93       	push	r18
    26e6:	3f 93       	push	r19
    26e8:	4f 93       	push	r20
    26ea:	5f 93       	push	r21
    26ec:	6f 93       	push	r22
    26ee:	7f 93       	push	r23
    26f0:	8f 93       	push	r24
    26f2:	9f 93       	push	r25
    26f4:	af 93       	push	r26
    26f6:	bf 93       	push	r27
    26f8:	ef 93       	push	r30
    26fa:	ff 93       	push	r31
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2704:	80 91 77 00 	lds	r24, 0x0077
    2708:	90 91 78 00 	lds	r25, 0x0078
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	29 f0       	breq	.+10     	; 0x271a <__vector_8+0x40>
	{
		(*g_callBackPtr)();
    2710:	e0 91 77 00 	lds	r30, 0x0077
    2714:	f0 91 78 00 	lds	r31, 0x0078
    2718:	09 95       	icall
	}
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	ff 91       	pop	r31
    2720:	ef 91       	pop	r30
    2722:	bf 91       	pop	r27
    2724:	af 91       	pop	r26
    2726:	9f 91       	pop	r25
    2728:	8f 91       	pop	r24
    272a:	7f 91       	pop	r23
    272c:	6f 91       	pop	r22
    272e:	5f 91       	pop	r21
    2730:	4f 91       	pop	r20
    2732:	3f 91       	pop	r19
    2734:	2f 91       	pop	r18
    2736:	0f 90       	pop	r0
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	0f 90       	pop	r0
    273c:	1f 90       	pop	r1
    273e:	18 95       	reti

00002740 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2740:	1f 92       	push	r1
    2742:	0f 92       	push	r0
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	0f 92       	push	r0
    2748:	11 24       	eor	r1, r1
    274a:	2f 93       	push	r18
    274c:	3f 93       	push	r19
    274e:	4f 93       	push	r20
    2750:	5f 93       	push	r21
    2752:	6f 93       	push	r22
    2754:	7f 93       	push	r23
    2756:	8f 93       	push	r24
    2758:	9f 93       	push	r25
    275a:	af 93       	push	r26
    275c:	bf 93       	push	r27
    275e:	ef 93       	push	r30
    2760:	ff 93       	push	r31
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    276a:	80 91 77 00 	lds	r24, 0x0077
    276e:	90 91 78 00 	lds	r25, 0x0078
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	29 f0       	breq	.+10     	; 0x2780 <__vector_6+0x40>
	{
		(*g_callBackPtr)();
    2776:	e0 91 77 00 	lds	r30, 0x0077
    277a:	f0 91 78 00 	lds	r31, 0x0078
    277e:	09 95       	icall
	}
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	bf 91       	pop	r27
    278a:	af 91       	pop	r26
    278c:	9f 91       	pop	r25
    278e:	8f 91       	pop	r24
    2790:	7f 91       	pop	r23
    2792:	6f 91       	pop	r22
    2794:	5f 91       	pop	r21
    2796:	4f 91       	pop	r20
    2798:	3f 91       	pop	r19
    279a:	2f 91       	pop	r18
    279c:	0f 90       	pop	r0
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	0f 90       	pop	r0
    27a2:	1f 90       	pop	r1
    27a4:	18 95       	reti

000027a6 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer_ConfigType * Config_Ptr)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <Timer1_init+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
    27b4:	af e5       	ldi	r26, 0x5F	; 95
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	ef e5       	ldi	r30, 0x5F	; 95
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	80 68       	ori	r24, 0x80	; 128
    27c0:	8c 93       	st	X, r24
	TCCR1A = (1<<FOC1A);
    27c2:	ef e4       	ldi	r30, 0x4F	; 79
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	88 e0       	ldi	r24, 0x08	; 8
    27c8:	80 83       	st	Z, r24
	TCCR1B |= (TCCR1B & 0xF8) | ((Config_Ptr -> clock)); //zabat el clock bta3 el timer
    27ca:	ae e4       	ldi	r26, 0x4E	; 78
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ee e4       	ldi	r30, 0x4E	; 78
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	28 2f       	mov	r18, r24
    27d6:	ee e4       	ldi	r30, 0x4E	; 78
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	98 2f       	mov	r25, r24
    27de:	98 7f       	andi	r25, 0xF8	; 248
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	80 81       	ld	r24, Z
    27e6:	89 2b       	or	r24, r25
    27e8:	82 2b       	or	r24, r18
    27ea:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xF7) | ((Config_Ptr -> mode) << 3); // mode
    27ec:	ae e4       	ldi	r26, 0x4E	; 78
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ee e4       	ldi	r30, 0x4E	; 78
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	38 2f       	mov	r19, r24
    27f8:	ee e4       	ldi	r30, 0x4E	; 78
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	27 7f       	andi	r18, 0xF7	; 247
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	82 2b       	or	r24, r18
    281a:	83 2b       	or	r24, r19
    281c:	8c 93       	st	X, r24
	// condition for checking the mode of the timer for enabling the Timer interrupt mask register (TIMSK)
	if((Config_Ptr -> mode) == CTC)
    281e:	e9 81       	ldd	r30, Y+1	; 0x01
    2820:	fa 81       	ldd	r31, Y+2	; 0x02
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	29 f4       	brne	.+10     	; 0x2832 <Timer1_init+0x8c>
	{
		TIMSK = (1<<OCIE1A);
    2828:	e9 e5       	ldi	r30, 0x59	; 89
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 e1       	ldi	r24, 0x10	; 16
    282e:	80 83       	st	Z, r24
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <Timer1_init+0x9e>
	}
	else if((Config_Ptr -> mode) == Normal)
    2832:	e9 81       	ldd	r30, Y+1	; 0x01
    2834:	fa 81       	ldd	r31, Y+2	; 0x02
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	88 23       	and	r24, r24
    283a:	21 f4       	brne	.+8      	; 0x2844 <Timer1_init+0x9e>
	{
		TIMSK = (1<<TOIE1);
    283c:	e9 e5       	ldi	r30, 0x59	; 89
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	80 83       	st	Z, r24
	}
	TCNT1 = (Config_Ptr -> initial); // initial value
    2844:	ac e4       	ldi	r26, 0x4C	; 76
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	83 81       	ldd	r24, Z+3	; 0x03
    284e:	94 81       	ldd	r25, Z+4	; 0x04
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	9c 93       	st	X, r25
    2854:	8e 93       	st	-X, r24
	//condition for checking if the mode is compare mode it will insert Final value in Output compare register 1A
	if((Config_Ptr -> mode) == CTC )
    2856:	e9 81       	ldd	r30, Y+1	; 0x01
    2858:	fa 81       	ldd	r31, Y+2	; 0x02
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	49 f4       	brne	.+18     	; 0x2872 <Timer1_init+0xcc>
	{
		OCR1A = (Config_Ptr -> final);
    2860:	aa e4       	ldi	r26, 0x4A	; 74
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e9 81       	ldd	r30, Y+1	; 0x01
    2866:	fa 81       	ldd	r31, Y+2	; 0x02
    2868:	85 81       	ldd	r24, Z+5	; 0x05
    286a:	96 81       	ldd	r25, Z+6	; 0x06
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	9c 93       	st	X, r25
    2870:	8e 93       	st	-X, r24
	}
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <Timer1_setCallBack+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	90 93 78 00 	sts	0x0078, r25
    2892:	80 93 77 00 	sts	0x0077, r24
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <Timer1_deinit>:

void Timer1_deinit()
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    28a8:	ef e4       	ldi	r30, 0x4F	; 79
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	10 82       	st	Z, r1
	TCCR1B = 0;
    28ae:	ee e4       	ldi	r30, 0x4E	; 78
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	10 82       	st	Z, r1
	TCNT1 = 0;
    28b4:	ec e4       	ldi	r30, 0x4C	; 76
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	11 82       	std	Z+1, r1	; 0x01
    28ba:	10 82       	st	Z, r1
	OCR1A = 0;
    28bc:	ea e4       	ldi	r30, 0x4A	; 74
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	11 82       	std	Z+1, r1	; 0x01
    28c2:	10 82       	st	Z, r1
	TIMSK = 0;
    28c4:	e9 e5       	ldi	r30, 0x59	; 89
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	10 82       	st	Z, r1
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <UART_init+0x6>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
	UCSRA |= (1<<U2X);
    28de:	ab e2       	ldi	r26, 0x2B	; 43
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	eb e2       	ldi	r30, 0x2B	; 43
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	82 60       	ori	r24, 0x02	; 2
    28ea:	8c 93       	st	X, r24
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    28ec:	aa e2       	ldi	r26, 0x2A	; 42
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ea e2       	ldi	r30, 0x2A	; 42
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	88 61       	ori	r24, 0x18	; 24
    28f8:	8c 93       	st	X, r24
	UCSRC |= (1<<URSEL);
    28fa:	a0 e4       	ldi	r26, 0x40	; 64
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e0 e4       	ldi	r30, 0x40	; 64
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	80 68       	ori	r24, 0x80	; 128
    2906:	8c 93       	st	X, r24
	UCSRB |= (UCSRB & 0xFB) | (((Config_Ptr -> size)>>2) << 2); // size if the selected bit size is 9 bits
    2908:	aa e2       	ldi	r26, 0x2A	; 42
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ea e2       	ldi	r30, 0x2A	; 42
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	38 2f       	mov	r19, r24
    2914:	ea e2       	ldi	r30, 0x2A	; 42
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	28 2f       	mov	r18, r24
    291c:	2b 7f       	andi	r18, 0xFB	; 251
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	80 81       	ld	r24, Z
    2924:	86 95       	lsr	r24
    2926:	86 95       	lsr	r24
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	82 2b       	or	r24, r18
    2936:	83 2b       	or	r24, r19
    2938:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | ((Config_Ptr -> size) << 1); // size from 5 to 7 bits
    293a:	a0 e4       	ldi	r26, 0x40	; 64
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e0 e4       	ldi	r30, 0x40	; 64
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	38 2f       	mov	r19, r24
    2946:	e0 e4       	ldi	r30, 0x40	; 64
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	28 2f       	mov	r18, r24
    294e:	29 7f       	andi	r18, 0xF9	; 249
    2950:	e9 81       	ldd	r30, Y+1	; 0x01
    2952:	fa 81       	ldd	r31, Y+2	; 0x02
    2954:	80 81       	ld	r24, Z
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	82 2b       	or	r24, r18
    2960:	83 2b       	or	r24, r19
    2962:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xBF) | ((Config_Ptr -> mode) << 6); // Mode Select
    2964:	a0 e4       	ldi	r26, 0x40	; 64
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e0 e4       	ldi	r30, 0x40	; 64
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	38 2f       	mov	r19, r24
    2970:	e0 e4       	ldi	r30, 0x40	; 64
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	2f 7b       	andi	r18, 0xBF	; 191
    297a:	e9 81       	ldd	r30, Y+1	; 0x01
    297c:	fa 81       	ldd	r31, Y+2	; 0x02
    297e:	81 81       	ldd	r24, Z+1	; 0x01
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	00 24       	eor	r0, r0
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	07 94       	ror	r0
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	07 94       	ror	r0
    2992:	98 2f       	mov	r25, r24
    2994:	80 2d       	mov	r24, r0
    2996:	82 2b       	or	r24, r18
    2998:	83 2b       	or	r24, r19
    299a:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | ((Config_Ptr -> parity) << 4); // parity Select
    299c:	a0 e4       	ldi	r26, 0x40	; 64
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e0 e4       	ldi	r30, 0x40	; 64
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	38 2f       	mov	r19, r24
    29a8:	e0 e4       	ldi	r30, 0x40	; 64
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	28 2f       	mov	r18, r24
    29b0:	2f 7c       	andi	r18, 0xCF	; 207
    29b2:	e9 81       	ldd	r30, Y+1	; 0x01
    29b4:	fa 81       	ldd	r31, Y+2	; 0x02
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	82 95       	swap	r24
    29be:	92 95       	swap	r25
    29c0:	90 7f       	andi	r25, 0xF0	; 240
    29c2:	98 27       	eor	r25, r24
    29c4:	80 7f       	andi	r24, 0xF0	; 240
    29c6:	98 27       	eor	r25, r24
    29c8:	82 2b       	or	r24, r18
    29ca:	83 2b       	or	r24, r19
    29cc:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | ((Config_Ptr -> stopbit) << 3); //stop bit select
    29ce:	a0 e4       	ldi	r26, 0x40	; 64
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e0 e4       	ldi	r30, 0x40	; 64
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	38 2f       	mov	r19, r24
    29da:	e0 e4       	ldi	r30, 0x40	; 64
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	28 2f       	mov	r18, r24
    29e2:	27 7f       	andi	r18, 0xF7	; 247
    29e4:	e9 81       	ldd	r30, Y+1	; 0x01
    29e6:	fa 81       	ldd	r31, Y+2	; 0x02
    29e8:	83 81       	ldd	r24, Z+3	; 0x03
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	82 2b       	or	r24, r18
    29fc:	83 2b       	or	r24, r19
    29fe:	8c 93       	st	X, r24
	UBRRH |= BAUD_PRESCALE>>8;
    2a00:	a0 e4       	ldi	r26, 0x40	; 64
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e0 e4       	ldi	r30, 0x40	; 64
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	8c 93       	st	X, r24
	UBRRL |= BAUD_PRESCALE;
    2a0c:	a9 e2       	ldi	r26, 0x29	; 41
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e9 e2       	ldi	r30, 0x29	; 41
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	87 66       	ori	r24, 0x67	; 103
    2a18:	8c 93       	st	X, r24
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2a30:	eb e2       	ldi	r30, 0x2B	; 43
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	80 72       	andi	r24, 0x20	; 32
    2a3c:	90 70       	andi	r25, 0x00	; 0
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	b9 f3       	breq	.-18     	; 0x2a30 <UART_sendByte+0xc>
	UDR = data;
    2a42:	ec e2       	ldi	r30, 0x2C	; 44
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	80 83       	st	Z, r24
}
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <UART_receiveByte>:
uint8 UART_receiveByte(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2a5a:	eb e2       	ldi	r30, 0x2B	; 43
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	88 23       	and	r24, r24
    2a62:	dc f7       	brge	.-10     	; 0x2a5a <UART_receiveByte+0x8>
	return UDR;
    2a64:	ec e2       	ldi	r30, 0x2C	; 44
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <UART_sendString+0x6>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <UART_sendString+0x8>
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    2a80:	1a 82       	std	Y+2, r1	; 0x02
    2a82:	19 82       	std	Y+1, r1	; 0x01
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a86:	29 81       	ldd	r18, Y+1	; 0x01
    2a88:	3a 81       	ldd	r19, Y+2	; 0x02
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	80 81       	ld	r24, Z
    2a96:	0e 94 12 15 	call	0x2a24	; 0x2a24 <UART_sendByte>
		i++;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void UART_sendString(const uint8 *Str)
{
	int i = 0;
	while(Str[i] != '\0')
    2aa4:	29 81       	ldd	r18, Y+1	; 0x01
    2aa6:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	fc 01       	movw	r30, r24
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	39 f7       	brne	.-50     	; 0x2a86 <UART_sendString+0x16>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <UART_receiveString>:
void UART_receiveString(uint8 *Str)
{
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <UART_receiveString+0xa>
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <UART_receiveString+0xc>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <UART_receiveString+0xe>
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
	int i = 0;
    2adc:	1c 82       	std	Y+4, r1	; 0x04
    2ade:	1b 82       	std	Y+3, r1	; 0x03
    2ae0:	1c c0       	rjmp	.+56     	; 0x2b1a <UART_receiveString+0x54>
	while(i == 0)
	{
		for(int i = 0; i < 5 ; i++)
    2ae2:	1a 82       	std	Y+2, r1	; 0x02
    2ae4:	19 82       	std	Y+1, r1	; 0x01
    2ae6:	10 c0       	rjmp	.+32     	; 0x2b08 <UART_receiveString+0x42>
		{
			Str[i] = UART_receiveByte();
    2ae8:	29 81       	ldd	r18, Y+1	; 0x01
    2aea:	3a 81       	ldd	r19, Y+2	; 0x02
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	8c 01       	movw	r16, r24
    2af2:	02 0f       	add	r16, r18
    2af4:	13 1f       	adc	r17, r19
    2af6:	0e 94 29 15 	call	0x2a52	; 0x2a52 <UART_receiveByte>
    2afa:	f8 01       	movw	r30, r16
    2afc:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str)
{
	int i = 0;
	while(i == 0)
	{
		for(int i = 0; i < 5 ; i++)
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	85 30       	cpi	r24, 0x05	; 5
    2b0e:	91 05       	cpc	r25, r1
    2b10:	5c f3       	brlt	.-42     	; 0x2ae8 <UART_receiveString+0x22>
		{
			Str[i] = UART_receiveByte();
		}
		i = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
	}
}
void UART_receiveString(uint8 *Str)
{
	int i = 0;
	while(i == 0)
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	01 f3       	breq	.-64     	; 0x2ae2 <UART_receiveString+0x1c>
		{
			Str[i] = UART_receiveByte();
		}
		i = 1;
	}
}
    2b22:	26 96       	adiw	r28, 0x06	; 6
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	08 95       	ret

00002b38 <__prologue_saves__>:
    2b38:	2f 92       	push	r2
    2b3a:	3f 92       	push	r3
    2b3c:	4f 92       	push	r4
    2b3e:	5f 92       	push	r5
    2b40:	6f 92       	push	r6
    2b42:	7f 92       	push	r7
    2b44:	8f 92       	push	r8
    2b46:	9f 92       	push	r9
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	ca 1b       	sub	r28, r26
    2b62:	db 0b       	sbc	r29, r27
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	09 94       	ijmp

00002b70 <__epilogue_restores__>:
    2b70:	2a 88       	ldd	r2, Y+18	; 0x12
    2b72:	39 88       	ldd	r3, Y+17	; 0x11
    2b74:	48 88       	ldd	r4, Y+16	; 0x10
    2b76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b82:	b9 84       	ldd	r11, Y+9	; 0x09
    2b84:	c8 84       	ldd	r12, Y+8	; 0x08
    2b86:	df 80       	ldd	r13, Y+7	; 0x07
    2b88:	ee 80       	ldd	r14, Y+6	; 0x06
    2b8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b90:	aa 81       	ldd	r26, Y+2	; 0x02
    2b92:	b9 81       	ldd	r27, Y+1	; 0x01
    2b94:	ce 0f       	add	r28, r30
    2b96:	d1 1d       	adc	r29, r1
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	ed 01       	movw	r28, r26
    2ba4:	08 95       	ret

00002ba6 <itoa>:
    2ba6:	fb 01       	movw	r30, r22
    2ba8:	9f 01       	movw	r18, r30
    2baa:	e8 94       	clt
    2bac:	42 30       	cpi	r20, 0x02	; 2
    2bae:	c4 f0       	brlt	.+48     	; 0x2be0 <itoa+0x3a>
    2bb0:	45 32       	cpi	r20, 0x25	; 37
    2bb2:	b4 f4       	brge	.+44     	; 0x2be0 <itoa+0x3a>
    2bb4:	4a 30       	cpi	r20, 0x0A	; 10
    2bb6:	29 f4       	brne	.+10     	; 0x2bc2 <itoa+0x1c>
    2bb8:	97 fb       	bst	r25, 7
    2bba:	1e f4       	brtc	.+6      	; 0x2bc2 <itoa+0x1c>
    2bbc:	90 95       	com	r25
    2bbe:	81 95       	neg	r24
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	64 2f       	mov	r22, r20
    2bc4:	77 27       	eor	r23, r23
    2bc6:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__udivmodhi4>
    2bca:	80 5d       	subi	r24, 0xD0	; 208
    2bcc:	8a 33       	cpi	r24, 0x3A	; 58
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <itoa+0x2c>
    2bd0:	89 5d       	subi	r24, 0xD9	; 217
    2bd2:	81 93       	st	Z+, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	a1 f7       	brne	.-24     	; 0x2bc2 <itoa+0x1c>
    2bda:	16 f4       	brtc	.+4      	; 0x2be0 <itoa+0x3a>
    2bdc:	5d e2       	ldi	r21, 0x2D	; 45
    2bde:	51 93       	st	Z+, r21
    2be0:	10 82       	st	Z, r1
    2be2:	c9 01       	movw	r24, r18
    2be4:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <strrev>

00002be8 <strrev>:
    2be8:	dc 01       	movw	r26, r24
    2bea:	fc 01       	movw	r30, r24
    2bec:	67 2f       	mov	r22, r23
    2bee:	71 91       	ld	r23, Z+
    2bf0:	77 23       	and	r23, r23
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <strrev+0x4>
    2bf4:	32 97       	sbiw	r30, 0x02	; 2
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <strrev+0x18>
    2bf8:	7c 91       	ld	r23, X
    2bfa:	6d 93       	st	X+, r22
    2bfc:	70 83       	st	Z, r23
    2bfe:	62 91       	ld	r22, -Z
    2c00:	ae 17       	cp	r26, r30
    2c02:	bf 07       	cpc	r27, r31
    2c04:	c8 f3       	brcs	.-14     	; 0x2bf8 <strrev+0x10>
    2c06:	08 95       	ret

00002c08 <__udivmodhi4>:
    2c08:	aa 1b       	sub	r26, r26
    2c0a:	bb 1b       	sub	r27, r27
    2c0c:	51 e1       	ldi	r21, 0x11	; 17
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <__udivmodhi4_ep>

00002c10 <__udivmodhi4_loop>:
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	a6 17       	cp	r26, r22
    2c16:	b7 07       	cpc	r27, r23
    2c18:	10 f0       	brcs	.+4      	; 0x2c1e <__udivmodhi4_ep>
    2c1a:	a6 1b       	sub	r26, r22
    2c1c:	b7 0b       	sbc	r27, r23

00002c1e <__udivmodhi4_ep>:
    2c1e:	88 1f       	adc	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	5a 95       	dec	r21
    2c24:	a9 f7       	brne	.-22     	; 0x2c10 <__udivmodhi4_loop>
    2c26:	80 95       	com	r24
    2c28:	90 95       	com	r25
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
