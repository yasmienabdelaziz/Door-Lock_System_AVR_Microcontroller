
ProjectFinalCode_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00003c70  00003d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080011a  0080011a  00003dbe  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  00003dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001255  00000000  00000000  00006fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000084d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a11e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bdb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <main>
      8a:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e0       	ldi	r26, 0x0B	; 11
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Keypad_getPressedKey>:
#elif(N_col==4)
static uint8 Keypad_4x4_adjustSwitchNumber(uint8 Button_number);
#endif

uint8 Keypad_getPressedKey()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Keypad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;

	while(1)
	{
		for(col = 0 ; col < N_col ; col++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	4c c0       	rjmp	.+152    	; 0xbec <Keypad_getPressedKey+0xa6>
			{
				KEYPAD_PORT_DIR = (0b00010000<<col);
     b54:	e4 e3       	ldi	r30, 0x34	; 52
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <Keypad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <Keypad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
				KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <Keypad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <Keypad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
				for(row = 0 ; row < N_row ; row++)
     b8c:	1a 82       	std	Y+2, r1	; 0x02
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <Keypad_getPressedKey+0x9a>
				{
					if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
     b90:	e3 e3       	ldi	r30, 0x33	; 51
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <Keypad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <Keypad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <Keypad_getPressedKey+0x94>
					{
						#if(N_col==3)
						return Keypad_4x3_adjustSwitchNumber((row*N_col)+col+1);
						#elif(N_col==4)
						return Keypad_4x4_adjustSwitchNumber((row*N_col)+col+1);
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Keypad_4x4_adjustSwitchNumber>
						#endif
					}
				}
			}
	}
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
	{
		for(col = 0 ; col < N_col ; col++)
			{
				KEYPAD_PORT_DIR = (0b00010000<<col);
				KEYPAD_PORT_OUT = (~(0b00010000<<col));
				for(row = 0 ; row < N_row ; row++)
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	8a 83       	std	Y+2, r24	; 0x02
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <Keypad_getPressedKey+0x4a>
{
	uint8 row, col;

	while(1)
	{
		for(col = 0 ; col < N_col ; col++)
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <Keypad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <Keypad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <Keypad_getPressedKey+0xa>

00000bf6 <Keypad_4x4_adjustSwitchNumber>:
		}
}

#elif(N_col==4)
uint8 Keypad_4x4_adjustSwitchNumber(uint8 Button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <Keypad_4x4_adjustSwitchNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <Keypad_4x4_adjustSwitchNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(Button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <Keypad_4x4_adjustSwitchNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <Keypad_4x4_adjustSwitchNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <Keypad_4x4_adjustSwitchNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <Keypad_4x4_adjustSwitchNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <Keypad_4x4_adjustSwitchNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <Keypad_4x4_adjustSwitchNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <Keypad_4x4_adjustSwitchNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <Keypad_4x4_adjustSwitchNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <Keypad_4x4_adjustSwitchNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <Keypad_4x4_adjustSwitchNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <Keypad_4x4_adjustSwitchNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <Keypad_4x4_adjustSwitchNumber+0xda>
     c5e:	68 c0       	rjmp	.+208    	; 0xd30 <Keypad_4x4_adjustSwitchNumber+0x13a>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <Keypad_4x4_adjustSwitchNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <Keypad_4x4_adjustSwitchNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <Keypad_4x4_adjustSwitchNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <Keypad_4x4_adjustSwitchNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <Keypad_4x4_adjustSwitchNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <Keypad_4x4_adjustSwitchNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <Keypad_4x4_adjustSwitchNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <Keypad_4x4_adjustSwitchNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <Keypad_4x4_adjustSwitchNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <Keypad_4x4_adjustSwitchNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <Keypad_4x4_adjustSwitchNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <Keypad_4x4_adjustSwitchNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <Keypad_4x4_adjustSwitchNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	81 f1       	breq	.+96     	; 0xd24 <Keypad_4x4_adjustSwitchNumber+0x12e>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	71 f1       	breq	.+92     	; 0xd2a <Keypad_4x4_adjustSwitchNumber+0x134>
     cce:	30 c0       	rjmp	.+96     	; 0xd30 <Keypad_4x4_adjustSwitchNumber+0x13a>
		{
			case 1: return '7';
     cd0:	97 e3       	ldi	r25, 0x37	; 55
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2f c0       	rjmp	.+94     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					break;
			case 2: return '8';
     cd6:	28 e3       	ldi	r18, 0x38	; 56
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2c c0       	rjmp	.+88     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					break;
			case 3: return '9';
     cdc:	39 e3       	ldi	r19, 0x39	; 57
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					break;
			case 4: return '/';
     ce2:	8f e2       	ldi	r24, 0x2F	; 47
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	26 c0       	rjmp	.+76     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					break;
			case 5: return '4';
     ce8:	94 e3       	ldi	r25, 0x34	; 52
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	23 c0       	rjmp	.+70     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				    break;
			case 6:	return '5';
     cee:	25 e3       	ldi	r18, 0x35	; 53
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	20 c0       	rjmp	.+64     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				    break;
			case 7: return '6';
     cf4:	36 e3       	ldi	r19, 0x36	; 54
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1d c0       	rjmp	.+58     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					break;
			case 8: return '*';
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	1a c0       	rjmp	.+52     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				    break;
			case 9: return '1';
     d00:	91 e3       	ldi	r25, 0x31	; 49
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	17 c0       	rjmp	.+46     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				    break;
			case 10: return '2';
     d06:	22 e3       	ldi	r18, 0x32	; 50
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				     break;
			case 11: return '3';
     d0c:	33 e3       	ldi	r19, 0x33	; 51
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					 break;
			case 12: return '-';
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
				   	 break;
			case 13: return '13';  /* ASCII of Enter */
     d18:	93 e3       	ldi	r25, 0x33	; 51
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					 break;
			case 14: return '0';
     d1e:	20 e3       	ldi	r18, 0x30	; 48
     d20:	2a 83       	std	Y+2, r18	; 0x02
     d22:	08 c0       	rjmp	.+16     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
		  			 break;
			case 15: return '=';
     d24:	3d e3       	ldi	r19, 0x3D	; 61
     d26:	3a 83       	std	Y+2, r19	; 0x02
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					 break;
			case 16: return '+';
     d2a:	8b e2       	ldi	r24, 0x2B	; 43
     d2c:	8a 83       	std	Y+2, r24	; 0x02
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x13e>
					 break;
			default: return Button_number;
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
		}
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <LCD_init>:
 *******************************************************************************/

#include "LCD.h"

void LCD_init()
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_DIR |= (1<<Rs)|(1<<RW)|(1<<E);
     d4c:	a7 e3       	ldi	r26, 0x37	; 55
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e7 e3       	ldi	r30, 0x37	; 55
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	87 60       	ori	r24, 0x07	; 7
     d58:	8c 93       	st	X, r24
	#if(DATA_BITS_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_DIR |= 0xF0;
     d5a:	ab e3       	ldi	r26, 0x3B	; 59
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e3       	ldi	r30, 0x3B	; 59
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 6f       	ori	r24, 0xF0	; 240
     d66:	8c 93       	st	X, r24
	#else
	LCD_DATA_DIR |= 0x0F;
	#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
     d6e:	88 e2       	ldi	r24, 0x28	; 40
     d70:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
	#elif(DATA_BITS_MODE==8)
	LCD_DATA_DIR = 0xFF;
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* 2 lines + 8bit mode */
	#endif
	LCD_sendCommand(CURSOR_OFF); /* Cursor_OFF */
     d74:	8c e0       	ldi	r24, 0x0C	; 12
     d76:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear screen */
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	c3 56       	subi	r28, 0x63	; 99
     d94:	d0 40       	sbci	r29, 0x00	; 0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	fe 01       	movw	r30, r28
     da2:	ed 59       	subi	r30, 0x9D	; 157
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,Rs);
     da8:	a8 e3       	ldi	r26, 0x38	; 56
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e8 e3       	ldi	r30, 0x38	; 56
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     db6:	a8 e3       	ldi	r26, 0x38	; 56
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e8 e3       	ldi	r30, 0x38	; 56
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8d 7f       	andi	r24, 0xFD	; 253
     dc2:	8c 93       	st	X, r24
     dc4:	fe 01       	movw	r30, r28
     dc6:	e1 5a       	subi	r30, 0xA1	; 161
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e8       	ldi	r26, 0x80	; 128
     dd0:	bf e3       	ldi	r27, 0x3F	; 63
     dd2:	80 83       	st	Z, r24
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	a2 83       	std	Z+2, r26	; 0x02
     dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	8e 01       	movw	r16, r28
     ddc:	05 5a       	subi	r16, 0xA5	; 165
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	e1 5a       	subi	r30, 0xA1	; 161
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	f8 01       	movw	r30, r16
     e00:	80 83       	st	Z, r24
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	a2 83       	std	Z+2, r26	; 0x02
     e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e08:	fe 01       	movw	r30, r28
     e0a:	e5 5a       	subi	r30, 0xA5	; 165
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e8       	ldi	r20, 0x80	; 128
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e22:	88 23       	and	r24, r24
     e24:	44 f4       	brge	.+16     	; 0xe36 <LCD_sendCommand+0xb0>
		__ticks = 1;
     e26:	fe 01       	movw	r30, r28
     e28:	e7 5a       	subi	r30, 0xA7	; 167
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	64 c0       	rjmp	.+200    	; 0xefe <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     e36:	fe 01       	movw	r30, r28
     e38:	e5 5a       	subi	r30, 0xA5	; 165
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	0c f0       	brlt	.+2      	; 0xe56 <LCD_sendCommand+0xd0>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	fe 01       	movw	r30, r28
     e58:	e1 5a       	subi	r30, 0xA1	; 161
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8e 01       	movw	r16, r28
     e76:	07 5a       	subi	r16, 0xA7	; 167
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	f8 01       	movw	r30, r16
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
     e8c:	1f c0       	rjmp	.+62     	; 0xecc <LCD_sendCommand+0x146>
     e8e:	fe 01       	movw	r30, r28
     e90:	e9 5a       	subi	r30, 0xA9	; 169
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e9c:	fe 01       	movw	r30, r28
     e9e:	e9 5a       	subi	r30, 0xA9	; 169
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <LCD_sendCommand+0x120>
     eaa:	fe 01       	movw	r30, r28
     eac:	e9 5a       	subi	r30, 0xA9	; 169
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	de 01       	movw	r26, r28
     eb6:	a7 5a       	subi	r26, 0xA7	; 167
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	fe 01       	movw	r30, r28
     ebc:	e7 5a       	subi	r30, 0xA7	; 167
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	9c 93       	st	X, r25
     eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	fe 01       	movw	r30, r28
     ece:	e7 5a       	subi	r30, 0xA7	; 167
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	d1 f6       	brne	.-76     	; 0xe8e <LCD_sendCommand+0x108>
     eda:	27 c0       	rjmp	.+78     	; 0xf2a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	8e 01       	movw	r16, r28
     ede:	07 5a       	subi	r16, 0xA7	; 167
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	fe 01       	movw	r30, r28
     ee4:	e5 5a       	subi	r30, 0xA5	; 165
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	de 01       	movw	r26, r28
     f00:	ab 5a       	subi	r26, 0xAB	; 171
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	e7 5a       	subi	r30, 0xA7	; 167
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	8d 93       	st	X+, r24
     f10:	9c 93       	st	X, r25
     f12:	fe 01       	movw	r30, r28
     f14:	eb 5a       	subi	r30, 0xAB	; 171
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <LCD_sendCommand+0x196>
     f20:	fe 01       	movw	r30, r28
     f22:	eb 5a       	subi	r30, 0xAB	; 171
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
     f2a:	a8 e3       	ldi	r26, 0x38	; 56
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e8 e3       	ldi	r30, 0x38	; 56
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	8c 93       	st	X, r24
     f38:	fe 01       	movw	r30, r28
     f3a:	ef 5a       	subi	r30, 0xAF	; 175
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e8       	ldi	r26, 0x80	; 128
     f44:	bf e3       	ldi	r27, 0x3F	; 63
     f46:	80 83       	st	Z, r24
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	a2 83       	std	Z+2, r26	; 0x02
     f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	8e 01       	movw	r16, r28
     f50:	03 5b       	subi	r16, 0xB3	; 179
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	fe 01       	movw	r30, r28
     f56:	ef 5a       	subi	r30, 0xAF	; 175
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a ef       	ldi	r20, 0xFA	; 250
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	f8 01       	movw	r30, r16
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	a2 83       	std	Z+2, r26	; 0x02
     f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f7c:	fe 01       	movw	r30, r28
     f7e:	e3 5b       	subi	r30, 0xB3	; 179
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	44 f4       	brge	.+16     	; 0xfaa <LCD_sendCommand+0x224>
		__ticks = 1;
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 5b       	subi	r30, 0xB5	; 181
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	64 c0       	rjmp	.+200    	; 0x1072 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     faa:	fe 01       	movw	r30, r28
     fac:	e3 5b       	subi	r30, 0xB3	; 179
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	0c f0       	brlt	.+2      	; 0xfca <LCD_sendCommand+0x244>
     fc8:	43 c0       	rjmp	.+134    	; 0x1050 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	fe 01       	movw	r30, r28
     fcc:	ef 5a       	subi	r30, 0xAF	; 175
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8e 01       	movw	r16, r28
     fea:	05 5b       	subi	r16, 0xB5	; 181
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	f8 01       	movw	r30, r16
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	1f c0       	rjmp	.+62     	; 0x1040 <LCD_sendCommand+0x2ba>
    1002:	fe 01       	movw	r30, r28
    1004:	e7 5b       	subi	r30, 0xB7	; 183
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	88 ec       	ldi	r24, 0xC8	; 200
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
    1010:	fe 01       	movw	r30, r28
    1012:	e7 5b       	subi	r30, 0xB7	; 183
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCD_sendCommand+0x294>
    101e:	fe 01       	movw	r30, r28
    1020:	e7 5b       	subi	r30, 0xB7	; 183
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	de 01       	movw	r26, r28
    102a:	a5 5b       	subi	r26, 0xB5	; 181
    102c:	bf 4f       	sbci	r27, 0xFF	; 255
    102e:	fe 01       	movw	r30, r28
    1030:	e5 5b       	subi	r30, 0xB5	; 181
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	9c 93       	st	X, r25
    103e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	fe 01       	movw	r30, r28
    1042:	e5 5b       	subi	r30, 0xB5	; 181
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	d1 f6       	brne	.-76     	; 0x1002 <LCD_sendCommand+0x27c>
    104e:	27 c0       	rjmp	.+78     	; 0x109e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	8e 01       	movw	r16, r28
    1052:	05 5b       	subi	r16, 0xB5	; 181
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	fe 01       	movw	r30, r28
    1058:	e3 5b       	subi	r30, 0xB3	; 179
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	f8 01       	movw	r30, r16
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	de 01       	movw	r26, r28
    1074:	a9 5b       	subi	r26, 0xB9	; 185
    1076:	bf 4f       	sbci	r27, 0xFF	; 255
    1078:	fe 01       	movw	r30, r28
    107a:	e5 5b       	subi	r30, 0xB5	; 181
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	8d 93       	st	X+, r24
    1084:	9c 93       	st	X, r25
    1086:	fe 01       	movw	r30, r28
    1088:	e9 5b       	subi	r30, 0xB9	; 185
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <LCD_sendCommand+0x30a>
    1094:	fe 01       	movw	r30, r28
    1096:	e9 5b       	subi	r30, 0xB9	; 185
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(DATA_BITS_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	98 2f       	mov	r25, r24
    10aa:	9f 70       	andi	r25, 0x0F	; 15
    10ac:	fe 01       	movw	r30, r28
    10ae:	ed 59       	subi	r30, 0x9D	; 157
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	80 7f       	andi	r24, 0xF0	; 240
    10b6:	89 2b       	or	r24, r25
    10b8:	8c 93       	st	X, r24
    10ba:	fe 01       	movw	r30, r28
    10bc:	ed 5b       	subi	r30, 0xBD	; 189
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e8       	ldi	r26, 0x80	; 128
    10c6:	bf e3       	ldi	r27, 0x3F	; 63
    10c8:	80 83       	st	Z, r24
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	a2 83       	std	Z+2, r26	; 0x02
    10ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d0:	8e 01       	movw	r16, r28
    10d2:	01 5c       	subi	r16, 0xC1	; 193
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	fe 01       	movw	r30, r28
    10d8:	ed 5b       	subi	r30, 0xBD	; 189
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	4a ef       	ldi	r20, 0xFA	; 250
    10ea:	54 e4       	ldi	r21, 0x44	; 68
    10ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 83       	st	Z, r24
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	a2 83       	std	Z+2, r26	; 0x02
    10fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10fe:	fe 01       	movw	r30, r28
    1100:	ff 96       	adiw	r30, 0x3f	; 63
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <LCD_sendCommand+0x39e>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e af       	std	Y+62, r25	; 0x3e
    1120:	8d af       	std	Y+61, r24	; 0x3d
    1122:	46 c0       	rjmp	.+140    	; 0x11b0 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1124:	fe 01       	movw	r30, r28
    1126:	ff 96       	adiw	r30, 0x3f	; 63
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	64 f5       	brge	.+88     	; 0x1198 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	fe 01       	movw	r30, r28
    1142:	ed 5b       	subi	r30, 0xBD	; 189
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e af       	std	Y+62, r25	; 0x3e
    116c:	8d af       	std	Y+61, r24	; 0x3d
    116e:	0f c0       	rjmp	.+30     	; 0x118e <LCD_sendCommand+0x408>
    1170:	88 ec       	ldi	r24, 0xC8	; 200
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c af       	std	Y+60, r25	; 0x3c
    1176:	8b af       	std	Y+59, r24	; 0x3b
    1178:	8b ad       	ldd	r24, Y+59	; 0x3b
    117a:	9c ad       	ldd	r25, Y+60	; 0x3c
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCD_sendCommand+0x3f6>
    1180:	9c af       	std	Y+60, r25	; 0x3c
    1182:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8d ad       	ldd	r24, Y+61	; 0x3d
    1186:	9e ad       	ldd	r25, Y+62	; 0x3e
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9e af       	std	Y+62, r25	; 0x3e
    118c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1190:	9e ad       	ldd	r25, Y+62	; 0x3e
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <LCD_sendCommand+0x3ea>
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	fe 01       	movw	r30, r28
    119a:	ff 96       	adiw	r30, 0x3f	; 63
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e af       	std	Y+62, r25	; 0x3e
    11ae:	8d af       	std	Y+61, r24	; 0x3d
    11b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b4:	9a af       	std	Y+58, r25	; 0x3a
    11b6:	89 af       	std	Y+57, r24	; 0x39
    11b8:	89 ad       	ldd	r24, Y+57	; 0x39
    11ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <LCD_sendCommand+0x436>
    11c0:	9a af       	std	Y+58, r25	; 0x3a
    11c2:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
	#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    11c4:	a8 e3       	ldi	r26, 0x38	; 56
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 e3       	ldi	r30, 0x38	; 56
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8b 7f       	andi	r24, 0xFB	; 251
    11d0:	8c 93       	st	X, r24
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e8       	ldi	r26, 0x80	; 128
    11d8:	bf e3       	ldi	r27, 0x3F	; 63
    11da:	8d ab       	std	Y+53, r24	; 0x35
    11dc:	9e ab       	std	Y+54, r25	; 0x36
    11de:	af ab       	std	Y+55, r26	; 0x37
    11e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e2:	6d a9       	ldd	r22, Y+53	; 0x35
    11e4:	7e a9       	ldd	r23, Y+54	; 0x36
    11e6:	8f a9       	ldd	r24, Y+55	; 0x37
    11e8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	4a ef       	ldi	r20, 0xFA	; 250
    11f0:	54 e4       	ldi	r21, 0x44	; 68
    11f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	89 ab       	std	Y+49, r24	; 0x31
    11fc:	9a ab       	std	Y+50, r25	; 0x32
    11fe:	ab ab       	std	Y+51, r26	; 0x33
    1200:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1202:	69 a9       	ldd	r22, Y+49	; 0x31
    1204:	7a a9       	ldd	r23, Y+50	; 0x32
    1206:	8b a9       	ldd	r24, Y+51	; 0x33
    1208:	9c a9       	ldd	r25, Y+52	; 0x34
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e8       	ldi	r20, 0x80	; 128
    1210:	5f e3       	ldi	r21, 0x3F	; 63
    1212:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1216:	88 23       	and	r24, r24
    1218:	2c f4       	brge	.+10     	; 0x1224 <LCD_sendCommand+0x49e>
		__ticks = 1;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	98 ab       	std	Y+48, r25	; 0x30
    1220:	8f a7       	std	Y+47, r24	; 0x2f
    1222:	3f c0       	rjmp	.+126    	; 0x12a2 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1224:	69 a9       	ldd	r22, Y+49	; 0x31
    1226:	7a a9       	ldd	r23, Y+50	; 0x32
    1228:	8b a9       	ldd	r24, Y+51	; 0x33
    122a:	9c a9       	ldd	r25, Y+52	; 0x34
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	3f ef       	ldi	r19, 0xFF	; 255
    1230:	4f e7       	ldi	r20, 0x7F	; 127
    1232:	57 e4       	ldi	r21, 0x47	; 71
    1234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1238:	18 16       	cp	r1, r24
    123a:	4c f5       	brge	.+82     	; 0x128e <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123c:	6d a9       	ldd	r22, Y+53	; 0x35
    123e:	7e a9       	ldd	r23, Y+54	; 0x36
    1240:	8f a9       	ldd	r24, Y+55	; 0x37
    1242:	98 ad       	ldd	r25, Y+56	; 0x38
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e2       	ldi	r20, 0x20	; 32
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	98 ab       	std	Y+48, r25	; 0x30
    1262:	8f a7       	std	Y+47, r24	; 0x2f
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <LCD_sendCommand+0x4fe>
    1266:	88 ec       	ldi	r24, 0xC8	; 200
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e a7       	std	Y+46, r25	; 0x2e
    126c:	8d a7       	std	Y+45, r24	; 0x2d
    126e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1270:	9e a5       	ldd	r25, Y+46	; 0x2e
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <LCD_sendCommand+0x4ec>
    1276:	9e a7       	std	Y+46, r25	; 0x2e
    1278:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127a:	8f a5       	ldd	r24, Y+47	; 0x2f
    127c:	98 a9       	ldd	r25, Y+48	; 0x30
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	98 ab       	std	Y+48, r25	; 0x30
    1282:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1284:	8f a5       	ldd	r24, Y+47	; 0x2f
    1286:	98 a9       	ldd	r25, Y+48	; 0x30
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	69 f7       	brne	.-38     	; 0x1266 <LCD_sendCommand+0x4e0>
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128e:	69 a9       	ldd	r22, Y+49	; 0x31
    1290:	7a a9       	ldd	r23, Y+50	; 0x32
    1292:	8b a9       	ldd	r24, Y+51	; 0x33
    1294:	9c a9       	ldd	r25, Y+52	; 0x34
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	98 ab       	std	Y+48, r25	; 0x30
    12a0:	8f a7       	std	Y+47, r24	; 0x2f
    12a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a4:	98 a9       	ldd	r25, Y+48	; 0x30
    12a6:	9c a7       	std	Y+44, r25	; 0x2c
    12a8:	8b a7       	std	Y+43, r24	; 0x2b
    12aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <LCD_sendCommand+0x528>
    12b2:	9c a7       	std	Y+44, r25	; 0x2c
    12b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    12b6:	a8 e3       	ldi	r26, 0x38	; 56
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e8 e3       	ldi	r30, 0x38	; 56
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	84 60       	ori	r24, 0x04	; 4
    12c2:	8c 93       	st	X, r24
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 e8       	ldi	r26, 0x80	; 128
    12ca:	bf e3       	ldi	r27, 0x3F	; 63
    12cc:	8f a3       	std	Y+39, r24	; 0x27
    12ce:	98 a7       	std	Y+40, r25	; 0x28
    12d0:	a9 a7       	std	Y+41, r26	; 0x29
    12d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	6f a1       	ldd	r22, Y+39	; 0x27
    12d6:	78 a5       	ldd	r23, Y+40	; 0x28
    12d8:	89 a5       	ldd	r24, Y+41	; 0x29
    12da:	9a a5       	ldd	r25, Y+42	; 0x2a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a ef       	ldi	r20, 0xFA	; 250
    12e2:	54 e4       	ldi	r21, 0x44	; 68
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	8b a3       	std	Y+35, r24	; 0x23
    12ee:	9c a3       	std	Y+36, r25	; 0x24
    12f0:	ad a3       	std	Y+37, r26	; 0x25
    12f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f4:	6b a1       	ldd	r22, Y+35	; 0x23
    12f6:	7c a1       	ldd	r23, Y+36	; 0x24
    12f8:	8d a1       	ldd	r24, Y+37	; 0x25
    12fa:	9e a1       	ldd	r25, Y+38	; 0x26
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <LCD_sendCommand+0x590>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9a a3       	std	Y+34, r25	; 0x22
    1312:	89 a3       	std	Y+33, r24	; 0x21
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1316:	6b a1       	ldd	r22, Y+35	; 0x23
    1318:	7c a1       	ldd	r23, Y+36	; 0x24
    131a:	8d a1       	ldd	r24, Y+37	; 0x25
    131c:	9e a1       	ldd	r25, Y+38	; 0x26
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	57 e4       	ldi	r21, 0x47	; 71
    1326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	4c f5       	brge	.+82     	; 0x1380 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132e:	6f a1       	ldd	r22, Y+39	; 0x27
    1330:	78 a5       	ldd	r23, Y+40	; 0x28
    1332:	89 a5       	ldd	r24, Y+41	; 0x29
    1334:	9a a5       	ldd	r25, Y+42	; 0x2a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e2       	ldi	r20, 0x20	; 32
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9a a3       	std	Y+34, r25	; 0x22
    1354:	89 a3       	std	Y+33, r24	; 0x21
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <LCD_sendCommand+0x5f0>
    1358:	88 ec       	ldi	r24, 0xC8	; 200
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	98 a3       	std	Y+32, r25	; 0x20
    135e:	8f 8f       	std	Y+31, r24	; 0x1f
    1360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1362:	98 a1       	ldd	r25, Y+32	; 0x20
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <LCD_sendCommand+0x5de>
    1368:	98 a3       	std	Y+32, r25	; 0x20
    136a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	89 a1       	ldd	r24, Y+33	; 0x21
    136e:	9a a1       	ldd	r25, Y+34	; 0x22
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9a a3       	std	Y+34, r25	; 0x22
    1374:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	89 a1       	ldd	r24, Y+33	; 0x21
    1378:	9a a1       	ldd	r25, Y+34	; 0x22
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f7       	brne	.-38     	; 0x1358 <LCD_sendCommand+0x5d2>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	6b a1       	ldd	r22, Y+35	; 0x23
    1382:	7c a1       	ldd	r23, Y+36	; 0x24
    1384:	8d a1       	ldd	r24, Y+37	; 0x25
    1386:	9e a1       	ldd	r25, Y+38	; 0x26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9a a3       	std	Y+34, r25	; 0x22
    1392:	89 a3       	std	Y+33, r24	; 0x21
    1394:	89 a1       	ldd	r24, Y+33	; 0x21
    1396:	9a a1       	ldd	r25, Y+34	; 0x22
    1398:	9e 8f       	std	Y+30, r25	; 0x1e
    139a:	8d 8f       	std	Y+29, r24	; 0x1d
    139c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    139e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD_sendCommand+0x61a>
    13a4:	9e 8f       	std	Y+30, r25	; 0x1e
    13a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	2f 70       	andi	r18, 0x0F	; 15
    13b6:	fe 01       	movw	r30, r28
    13b8:	ed 59       	subi	r30, 0x9D	; 157
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	82 95       	swap	r24
    13c4:	92 95       	swap	r25
    13c6:	90 7f       	andi	r25, 0xF0	; 240
    13c8:	98 27       	eor	r25, r24
    13ca:	80 7f       	andi	r24, 0xF0	; 240
    13cc:	98 27       	eor	r25, r24
    13ce:	82 2b       	or	r24, r18
    13d0:	8c 93       	st	X, r24
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e8       	ldi	r26, 0x80	; 128
    13d8:	bf e3       	ldi	r27, 0x3F	; 63
    13da:	89 8f       	std	Y+25, r24	; 0x19
    13dc:	9a 8f       	std	Y+26, r25	; 0x1a
    13de:	ab 8f       	std	Y+27, r26	; 0x1b
    13e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	69 8d       	ldd	r22, Y+25	; 0x19
    13e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	54 e4       	ldi	r21, 0x44	; 68
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8d 8b       	std	Y+21, r24	; 0x15
    13fc:	9e 8b       	std	Y+22, r25	; 0x16
    13fe:	af 8b       	std	Y+23, r26	; 0x17
    1400:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1402:	6d 89       	ldd	r22, Y+21	; 0x15
    1404:	7e 89       	ldd	r23, Y+22	; 0x16
    1406:	8f 89       	ldd	r24, Y+23	; 0x17
    1408:	98 8d       	ldd	r25, Y+24	; 0x18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <LCD_sendCommand+0x69e>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	69 8d       	ldd	r22, Y+25	; 0x19
    143e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <LCD_sendCommand+0x6fe>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	89 8b       	std	Y+17, r24	; 0x11
    146e:	89 89       	ldd	r24, Y+17	; 0x11
    1470:	9a 89       	ldd	r25, Y+18	; 0x12
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_sendCommand+0x6ec>
    1476:	9a 8b       	std	Y+18, r25	; 0x12
    1478:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8b 89       	ldd	r24, Y+19	; 0x13
    147c:	9c 89       	ldd	r25, Y+20	; 0x14
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9c 8b       	std	Y+20, r25	; 0x14
    1482:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8b 89       	ldd	r24, Y+19	; 0x13
    1486:	9c 89       	ldd	r25, Y+20	; 0x14
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <LCD_sendCommand+0x6e0>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	6d 89       	ldd	r22, Y+21	; 0x15
    1490:	7e 89       	ldd	r23, Y+22	; 0x16
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	98 89       	ldd	r25, Y+16	; 0x10
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <LCD_sendCommand+0x728>
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
	#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    14b6:	a8 e3       	ldi	r26, 0x38	; 56
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8b 7f       	andi	r24, 0xFB	; 251
    14c2:	8c 93       	st	X, r24
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a0 e8       	ldi	r26, 0x80	; 128
    14ca:	bf e3       	ldi	r27, 0x3F	; 63
    14cc:	8b 87       	std	Y+11, r24	; 0x0b
    14ce:	9c 87       	std	Y+12, r25	; 0x0c
    14d0:	ad 87       	std	Y+13, r26	; 0x0d
    14d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14da:	9e 85       	ldd	r25, Y+14	; 0x0e
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a ef       	ldi	r20, 0xFA	; 250
    14e2:	54 e4       	ldi	r21, 0x44	; 68
    14e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8f 83       	std	Y+7, r24	; 0x07
    14ee:	98 87       	std	Y+8, r25	; 0x08
    14f0:	a9 87       	std	Y+9, r26	; 0x09
    14f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <LCD_sendCommand+0x790>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1530:	7c 85       	ldd	r23, Y+12	; 0x0c
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <LCD_sendCommand+0x7f0>
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x7de>
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <LCD_sendCommand+0x7d2>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_sendCommand+0x81a>
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command;
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
	#endif
}
    15a8:	cd 59       	subi	r28, 0x9D	; 157
    15aa:	df 4f       	sbci	r29, 0xFF	; 255
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	c3 56       	subi	r28, 0x63	; 99
    15ce:	d0 40       	sbci	r29, 0x00	; 0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	fe 01       	movw	r30, r28
    15dc:	ed 59       	subi	r30, 0x9D	; 157
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,Rs);
    15e2:	a8 e3       	ldi	r26, 0x38	; 56
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e3       	ldi	r30, 0x38	; 56
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    15f0:	a8 e3       	ldi	r26, 0x38	; 56
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8d 7f       	andi	r24, 0xFD	; 253
    15fc:	8c 93       	st	X, r24
    15fe:	fe 01       	movw	r30, r28
    1600:	e1 5a       	subi	r30, 0xA1	; 161
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	bf e3       	ldi	r27, 0x3F	; 63
    160c:	80 83       	st	Z, r24
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	a2 83       	std	Z+2, r26	; 0x02
    1612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	8e 01       	movw	r16, r28
    1616:	05 5a       	subi	r16, 0xA5	; 165
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	fe 01       	movw	r30, r28
    161c:	e1 5a       	subi	r30, 0xA1	; 161
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a ef       	ldi	r20, 0xFA	; 250
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	f8 01       	movw	r30, r16
    163a:	80 83       	st	Z, r24
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	a2 83       	std	Z+2, r26	; 0x02
    1640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1642:	fe 01       	movw	r30, r28
    1644:	e5 5a       	subi	r30, 0xA5	; 165
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	44 f4       	brge	.+16     	; 0x1670 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1660:	fe 01       	movw	r30, r28
    1662:	e7 5a       	subi	r30, 0xA7	; 167
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
    166e:	64 c0       	rjmp	.+200    	; 0x1738 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1670:	fe 01       	movw	r30, r28
    1672:	e5 5a       	subi	r30, 0xA5	; 165
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	0c f0       	brlt	.+2      	; 0x1690 <LCD_displayCharacter+0xd0>
    168e:	43 c0       	rjmp	.+134    	; 0x1716 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	fe 01       	movw	r30, r28
    1692:	e1 5a       	subi	r30, 0xA1	; 161
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8e 01       	movw	r16, r28
    16b0:	07 5a       	subi	r16, 0xA7	; 167
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	f8 01       	movw	r30, r16
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	1f c0       	rjmp	.+62     	; 0x1706 <LCD_displayCharacter+0x146>
    16c8:	fe 01       	movw	r30, r28
    16ca:	e9 5a       	subi	r30, 0xA9	; 169
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	88 ec       	ldi	r24, 0xC8	; 200
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 5a       	subi	r30, 0xA9	; 169
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_displayCharacter+0x120>
    16e4:	fe 01       	movw	r30, r28
    16e6:	e9 5a       	subi	r30, 0xA9	; 169
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	de 01       	movw	r26, r28
    16f0:	a7 5a       	subi	r26, 0xA7	; 167
    16f2:	bf 4f       	sbci	r27, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e7 5a       	subi	r30, 0xA7	; 167
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	9c 93       	st	X, r25
    1704:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1706:	fe 01       	movw	r30, r28
    1708:	e7 5a       	subi	r30, 0xA7	; 167
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	d1 f6       	brne	.-76     	; 0x16c8 <LCD_displayCharacter+0x108>
    1714:	27 c0       	rjmp	.+78     	; 0x1764 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	8e 01       	movw	r16, r28
    1718:	07 5a       	subi	r16, 0xA7	; 167
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	e5 5a       	subi	r30, 0xA5	; 165
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	f8 01       	movw	r30, r16
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	de 01       	movw	r26, r28
    173a:	ab 5a       	subi	r26, 0xAB	; 171
    173c:	bf 4f       	sbci	r27, 0xFF	; 255
    173e:	fe 01       	movw	r30, r28
    1740:	e7 5a       	subi	r30, 0xA7	; 167
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	8d 93       	st	X+, r24
    174a:	9c 93       	st	X, r25
    174c:	fe 01       	movw	r30, r28
    174e:	eb 5a       	subi	r30, 0xAB	; 171
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_displayCharacter+0x196>
    175a:	fe 01       	movw	r30, r28
    175c:	eb 5a       	subi	r30, 0xAB	; 171
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1764:	a8 e3       	ldi	r26, 0x38	; 56
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e8 e3       	ldi	r30, 0x38	; 56
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	8c 93       	st	X, r24
    1772:	fe 01       	movw	r30, r28
    1774:	ef 5a       	subi	r30, 0xAF	; 175
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e8       	ldi	r26, 0x80	; 128
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	80 83       	st	Z, r24
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	a2 83       	std	Z+2, r26	; 0x02
    1786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	8e 01       	movw	r16, r28
    178a:	03 5b       	subi	r16, 0xB3	; 179
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	fe 01       	movw	r30, r28
    1790:	ef 5a       	subi	r30, 0xAF	; 175
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	f8 01       	movw	r30, r16
    17ae:	80 83       	st	Z, r24
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	a2 83       	std	Z+2, r26	; 0x02
    17b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b6:	fe 01       	movw	r30, r28
    17b8:	e3 5b       	subi	r30, 0xB3	; 179
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	44 f4       	brge	.+16     	; 0x17e4 <LCD_displayCharacter+0x224>
		__ticks = 1;
    17d4:	fe 01       	movw	r30, r28
    17d6:	e5 5b       	subi	r30, 0xB5	; 181
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	64 c0       	rjmp	.+200    	; 0x18ac <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 5b       	subi	r30, 0xB3	; 179
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	0c f0       	brlt	.+2      	; 0x1804 <LCD_displayCharacter+0x244>
    1802:	43 c0       	rjmp	.+134    	; 0x188a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	fe 01       	movw	r30, r28
    1806:	ef 5a       	subi	r30, 0xAF	; 175
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8e 01       	movw	r16, r28
    1824:	05 5b       	subi	r16, 0xB5	; 181
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	1f c0       	rjmp	.+62     	; 0x187a <LCD_displayCharacter+0x2ba>
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_displayCharacter+0x294>
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	de 01       	movw	r26, r28
    1864:	a5 5b       	subi	r26, 0xB5	; 181
    1866:	bf 4f       	sbci	r27, 0xFF	; 255
    1868:	fe 01       	movw	r30, r28
    186a:	e5 5b       	subi	r30, 0xB5	; 181
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	9c 93       	st	X, r25
    1878:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	fe 01       	movw	r30, r28
    187c:	e5 5b       	subi	r30, 0xB5	; 181
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	d1 f6       	brne	.-76     	; 0x183c <LCD_displayCharacter+0x27c>
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	8e 01       	movw	r16, r28
    188c:	05 5b       	subi	r16, 0xB5	; 181
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	fe 01       	movw	r30, r28
    1892:	e3 5b       	subi	r30, 0xB3	; 179
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	de 01       	movw	r26, r28
    18ae:	a9 5b       	subi	r26, 0xB9	; 185
    18b0:	bf 4f       	sbci	r27, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e5 5b       	subi	r30, 0xB5	; 181
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	8d 93       	st	X+, r24
    18be:	9c 93       	st	X, r25
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5b       	subi	r30, 0xB9	; 185
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_displayCharacter+0x30a>
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5b       	subi	r30, 0xB9	; 185
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
	_delay_ms(1);
	#if(DATA_BITS_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    18d8:	ab e3       	ldi	r26, 0x3B	; 59
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	98 2f       	mov	r25, r24
    18e4:	9f 70       	andi	r25, 0x0F	; 15
    18e6:	fe 01       	movw	r30, r28
    18e8:	ed 59       	subi	r30, 0x9D	; 157
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	80 7f       	andi	r24, 0xF0	; 240
    18f0:	89 2b       	or	r24, r25
    18f2:	8c 93       	st	X, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	ed 5b       	subi	r30, 0xBD	; 189
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e8       	ldi	r26, 0x80	; 128
    1900:	bf e3       	ldi	r27, 0x3F	; 63
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	8e 01       	movw	r16, r28
    190c:	01 5c       	subi	r16, 0xC1	; 193
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	ed 5b       	subi	r30, 0xBD	; 189
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	f8 01       	movw	r30, r16
    1930:	80 83       	st	Z, r24
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	a2 83       	std	Z+2, r26	; 0x02
    1936:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1938:	fe 01       	movw	r30, r28
    193a:	ff 96       	adiw	r30, 0x3f	; 63
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9e af       	std	Y+62, r25	; 0x3e
    195a:	8d af       	std	Y+61, r24	; 0x3d
    195c:	46 c0       	rjmp	.+140    	; 0x19ea <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    195e:	fe 01       	movw	r30, r28
    1960:	ff 96       	adiw	r30, 0x3f	; 63
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	64 f5       	brge	.+88     	; 0x19d2 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	fe 01       	movw	r30, r28
    197c:	ed 5b       	subi	r30, 0xBD	; 189
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e af       	std	Y+62, r25	; 0x3e
    19a6:	8d af       	std	Y+61, r24	; 0x3d
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <LCD_displayCharacter+0x408>
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c af       	std	Y+60, r25	; 0x3c
    19b0:	8b af       	std	Y+59, r24	; 0x3b
    19b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    19b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_displayCharacter+0x3f6>
    19ba:	9c af       	std	Y+60, r25	; 0x3c
    19bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9e af       	std	Y+62, r25	; 0x3e
    19c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <LCD_displayCharacter+0x3ea>
    19d0:	16 c0       	rjmp	.+44     	; 0x19fe <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	fe 01       	movw	r30, r28
    19d4:	ff 96       	adiw	r30, 0x3f	; 63
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e af       	std	Y+62, r25	; 0x3e
    19e8:	8d af       	std	Y+61, r24	; 0x3d
    19ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ee:	9a af       	std	Y+58, r25	; 0x3a
    19f0:	89 af       	std	Y+57, r24	; 0x39
    19f2:	89 ad       	ldd	r24, Y+57	; 0x39
    19f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_displayCharacter+0x436>
    19fa:	9a af       	std	Y+58, r25	; 0x3a
    19fc:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
	#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    19fe:	a8 e3       	ldi	r26, 0x38	; 56
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e8 e3       	ldi	r30, 0x38	; 56
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8b 7f       	andi	r24, 0xFB	; 251
    1a0a:	8c 93       	st	X, r24
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e8       	ldi	r26, 0x80	; 128
    1a12:	bf e3       	ldi	r27, 0x3F	; 63
    1a14:	8d ab       	std	Y+53, r24	; 0x35
    1a16:	9e ab       	std	Y+54, r25	; 0x36
    1a18:	af ab       	std	Y+55, r26	; 0x37
    1a1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a20:	8f a9       	ldd	r24, Y+55	; 0x37
    1a22:	98 ad       	ldd	r25, Y+56	; 0x38
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	89 ab       	std	Y+49, r24	; 0x31
    1a36:	9a ab       	std	Y+50, r25	; 0x32
    1a38:	ab ab       	std	Y+51, r26	; 0x33
    1a3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a40:	8b a9       	ldd	r24, Y+51	; 0x33
    1a42:	9c a9       	ldd	r25, Y+52	; 0x34
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	98 ab       	std	Y+48, r25	; 0x30
    1a5a:	8f a7       	std	Y+47, r24	; 0x2f
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6d a9       	ldd	r22, Y+53	; 0x35
    1a78:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <LCD_displayCharacter+0x4fe>
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9e a7       	std	Y+46, r25	; 0x2e
    1aa6:	8d a7       	std	Y+45, r24	; 0x2d
    1aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_displayCharacter+0x4ec>
    1ab0:	9e a7       	std	Y+46, r25	; 0x2e
    1ab2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	98 ab       	std	Y+48, r25	; 0x30
    1abc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <LCD_displayCharacter+0x4e0>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	98 ab       	std	Y+48, r25	; 0x30
    1ada:	8f a7       	std	Y+47, r24	; 0x2f
    1adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ade:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae0:	9c a7       	std	Y+44, r25	; 0x2c
    1ae2:	8b a7       	std	Y+43, r24	; 0x2b
    1ae4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_displayCharacter+0x528>
    1aec:	9c a7       	std	Y+44, r25	; 0x2c
    1aee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1af0:	a8 e3       	ldi	r26, 0x38	; 56
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	84 60       	ori	r24, 0x04	; 4
    1afc:	8c 93       	st	X, r24
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e8       	ldi	r26, 0x80	; 128
    1b04:	bf e3       	ldi	r27, 0x3F	; 63
    1b06:	8f a3       	std	Y+39, r24	; 0x27
    1b08:	98 a7       	std	Y+40, r25	; 0x28
    1b0a:	a9 a7       	std	Y+41, r26	; 0x29
    1b0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b10:	78 a5       	ldd	r23, Y+40	; 0x28
    1b12:	89 a5       	ldd	r24, Y+41	; 0x29
    1b14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8b a3       	std	Y+35, r24	; 0x23
    1b28:	9c a3       	std	Y+36, r25	; 0x24
    1b2a:	ad a3       	std	Y+37, r26	; 0x25
    1b2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b30:	7c a1       	ldd	r23, Y+36	; 0x24
    1b32:	8d a1       	ldd	r24, Y+37	; 0x25
    1b34:	9e a1       	ldd	r25, Y+38	; 0x26
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9a a3       	std	Y+34, r25	; 0x22
    1b4c:	89 a3       	std	Y+33, r24	; 0x21
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1b50:	6b a1       	ldd	r22, Y+35	; 0x23
    1b52:	7c a1       	ldd	r23, Y+36	; 0x24
    1b54:	8d a1       	ldd	r24, Y+37	; 0x25
    1b56:	9e a1       	ldd	r25, Y+38	; 0x26
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <LCD_displayCharacter+0x5f0>
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	98 a3       	std	Y+32, r25	; 0x20
    1b98:	8f 8f       	std	Y+31, r24	; 0x1f
    1b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_displayCharacter+0x5de>
    1ba2:	98 a3       	std	Y+32, r25	; 0x20
    1ba4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9a a3       	std	Y+34, r25	; 0x22
    1bae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <LCD_displayCharacter+0x5d2>
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_displayCharacter+0x61a>
    1bde:	9e 8f       	std	Y+30, r25	; 0x1e
    1be0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1be2:	ab e3       	ldi	r26, 0x3B	; 59
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	eb e3       	ldi	r30, 0x3B	; 59
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	28 2f       	mov	r18, r24
    1bee:	2f 70       	andi	r18, 0x0F	; 15
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ed 59       	subi	r30, 0x9D	; 157
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	82 95       	swap	r24
    1bfe:	92 95       	swap	r25
    1c00:	90 7f       	andi	r25, 0xF0	; 240
    1c02:	98 27       	eor	r25, r24
    1c04:	80 7f       	andi	r24, 0xF0	; 240
    1c06:	98 27       	eor	r25, r24
    1c08:	82 2b       	or	r24, r18
    1c0a:	8c 93       	st	X, r24
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	89 8f       	std	Y+25, r24	; 0x19
    1c16:	9a 8f       	std	Y+26, r25	; 0x1a
    1c18:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8d 8b       	std	Y+21, r24	; 0x15
    1c36:	9e 8b       	std	Y+22, r25	; 0x16
    1c38:	af 8b       	std	Y+23, r26	; 0x17
    1c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c40:	8f 89       	ldd	r24, Y+23	; 0x17
    1c42:	98 8d       	ldd	r25, Y+24	; 0x18
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	69 8d       	ldd	r22, Y+25	; 0x19
    1c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_displayCharacter+0x6fe>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_displayCharacter+0x6ec>
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_displayCharacter+0x6e0>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	98 8b       	std	Y+16, r25	; 0x10
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	98 89       	ldd	r25, Y+16	; 0x10
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_displayCharacter+0x728>
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
	#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1cf0:	a8 e3       	ldi	r26, 0x38	; 56
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e8 e3       	ldi	r30, 0x38	; 56
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8b 7f       	andi	r24, 0xFB	; 251
    1cfc:	8c 93       	st	X, r24
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <LCD_displayCharacter+0x7f0>
    1d92:	88 ec       	ldi	r24, 0xC8	; 200
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_displayCharacter+0x7de>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <LCD_displayCharacter+0x7d2>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_displayCharacter+0x81a>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data;
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
	#endif
}
    1de2:	cd 59       	subi	r28, 0x9D	; 157
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <LCD_displayString>:

void LCD_displayString(const char * str)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LCD_displayString+0x6>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	0e c0       	rjmp	.+28     	; 0x1e2a <LCD_displayString+0x30>
	while( str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	80 81       	ld	r24, Z
    1e20:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayCharacter>
		i++;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char * str)
{
	uint8 i = 0;
	while( str[i] != '\0')
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	fc 01       	movw	r30, r24
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 23       	and	r24, r24
    1e3e:	39 f7       	brne	.-50     	; 0x1e0e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <LCD_goToRowColumn+0x6>
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <LCD_goToRowColumn+0x8>
    1e54:	0f 92       	push	r0
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    1e5c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3d 83       	std	Y+5, r19	; 0x05
    1e66:	2c 83       	std	Y+4, r18	; 0x04
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 05       	cpc	r25, r1
    1e70:	c1 f0       	breq	.+48     	; 0x1ea2 <LCD_goToRowColumn+0x56>
    1e72:	2c 81       	ldd	r18, Y+4	; 0x04
    1e74:	3d 81       	ldd	r19, Y+5	; 0x05
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	31 05       	cpc	r19, r1
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_goToRowColumn+0x3a>
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <LCD_goToRowColumn+0x50>
    1e84:	19 c0       	rjmp	.+50     	; 0x1eb8 <LCD_goToRowColumn+0x6c>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	69 f0       	breq	.+26     	; 0x1eaa <LCD_goToRowColumn+0x5e>
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	91 05       	cpc	r25, r1
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <LCD_goToRowColumn+0x66>
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <LCD_goToRowColumn+0x6c>
	{
		case 0 : address = col;
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	0b c0       	rjmp	.+22     	; 0x1eb8 <LCD_goToRowColumn+0x6c>
		break;
		case 1 : address = col + 0x40;
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	80 5c       	subi	r24, 0xC0	; 192
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	07 c0       	rjmp	.+14     	; 0x1eb8 <LCD_goToRowColumn+0x6c>
		break;
		case 2 : address = col + 0x10;
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	80 5f       	subi	r24, 0xF0	; 240
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <LCD_goToRowColumn+0x6c>
		break;
		case 3 : address = col + 0x50;
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	80 5b       	subi	r24, 0xB0	; 176
    1eb6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	80 68       	ori	r24, 0x80	; 128
    1ebc:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <LCD_displayStringRowColumn+0x6>
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <LCD_displayStringRowColumn+0x8>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6a 83       	std	Y+2, r22	; 0x02
    1ee0:	5c 83       	std	Y+4, r21	; 0x04
    1ee2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ee8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <LCD_integertostring>:

void LCD_integertostring(int data)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	62 97       	sbiw	r28, 0x12	; 18
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];
	itoa(data,buffer,10);
    1f1a:	89 89       	ldd	r24, Y+17	; 0x11
    1f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1e:	9e 01       	movw	r18, r28
    1f20:	2f 5f       	subi	r18, 0xFF	; 255
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	b9 01       	movw	r22, r18
    1f26:	4a e0       	ldi	r20, 0x0A	; 10
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <itoa>
	LCD_displayString(buffer);
    1f2e:	ce 01       	movw	r24, r28
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
}
    1f36:	62 96       	adiw	r28, 0x12	; 18
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <LCD_clearScreen>:

void LCD_clearScreen()
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_sendCommand>
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <main>:

/*******************************************************************************
 *                      Main Function                                  *
 *******************************************************************************/
int main()
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	64 97       	sbiw	r28, 0x14	; 20
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType config = {eight,Asynchronous,Disabled,one};
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	1a 8a       	std	Y+18, r1	; 0x12
    1f76:	1b 8a       	std	Y+19, r1	; 0x13
    1f78:	1c 8a       	std	Y+20, r1	; 0x14
	UART_init(&config);
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	41 96       	adiw	r24, 0x11	; 17
    1f7e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <UART_init>
	LCD_init();
    1f82:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_init>
	Set_Password();
    1f86:	0e 94 6f 10 	call	0x20de	; 0x20de <Set_Password>
	Timer1_setCallBack(Door_opening);
    1f8a:	8c ee       	ldi	r24, 0xEC	; 236
    1f8c:	9a e1       	ldi	r25, 0x1A	; 26
    1f8e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <Timer1_setCallBack>
	for(int i = 0 ; i < 5 ; i++) // sending the password to ECU 2 in order to be saved in the EEPROM
    1f92:	18 8a       	std	Y+16, r1	; 0x10
    1f94:	1f 86       	std	Y+15, r1	; 0x0f
    1f96:	7f c0       	rjmp	.+254    	; 0x2096 <main+0x13a>
	{
		UART_sendByte(str1[i]);
    1f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9a:	98 89       	ldd	r25, Y+16	; 0x10
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	ec 5d       	subi	r30, 0xDC	; 220
    1fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa2:	80 81       	ld	r24, Z
    1fa4:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a8 ec       	ldi	r26, 0xC8	; 200
    1fae:	b2 e4       	ldi	r27, 0x42	; 66
    1fb0:	8b 87       	std	Y+11, r24	; 0x0b
    1fb2:	9c 87       	std	Y+12, r25	; 0x0c
    1fb4:	ad 87       	std	Y+13, r26	; 0x0d
    1fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8f 83       	std	Y+7, r24	; 0x07
    1fd2:	98 87       	std	Y+8, r25	; 0x08
    1fd4:	a9 87       	std	Y+9, r26	; 0x09
    1fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <main+0x9e>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <main+0x11c>
	else if (__tmp > 65535)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	0f c0       	rjmp	.+30     	; 0x205a <main+0xfe>
    203c:	88 ec       	ldi	r24, 0xC8	; 200
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <main+0xec>
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <main+0xe0>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <main+0x128>
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	UART_ConfigType config = {eight,Asynchronous,Disabled,one};
	UART_init(&config);
	LCD_init();
	Set_Password();
	Timer1_setCallBack(Door_opening);
	for(int i = 0 ; i < 5 ; i++) // sending the password to ECU 2 in order to be saved in the EEPROM
    208c:	8f 85       	ldd	r24, Y+15	; 0x0f
    208e:	98 89       	ldd	r25, Y+16	; 0x10
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f
    2096:	8f 85       	ldd	r24, Y+15	; 0x0f
    2098:	98 89       	ldd	r25, Y+16	; 0x10
    209a:	85 30       	cpi	r24, 0x05	; 5
    209c:	91 05       	cpc	r25, r1
    209e:	0c f4       	brge	.+2      	; 0x20a2 <main+0x146>
    20a0:	7b cf       	rjmp	.-266    	; 0x1f98 <main+0x3c>
		UART_sendByte(str1[i]);
		_delay_ms(100);
	}
	while(1)
	{
		LCD_displayString(" - : Open Door");
    20a2:	80 e6       	ldi	r24, 0x60	; 96
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
		LCD_goToRowColumn(2,0);
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
		LCD_displayString(" + : Change Pass");
    20b2:	8f e6       	ldi	r24, 0x6F	; 111
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
		data = Keypad_getPressedKey(); // we used it to determine which action would the first ECU take
    20ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    20be:	80 93 2a 01 	sts	0x012A, r24
		if (data == '-')
    20c2:	80 91 2a 01 	lds	r24, 0x012A
    20c6:	8d 32       	cpi	r24, 0x2D	; 45
    20c8:	19 f4       	brne	.+6      	; 0x20d0 <main+0x174>
		{
			Door();
    20ca:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Door>
    20ce:	e9 cf       	rjmp	.-46     	; 0x20a2 <main+0x146>
		}
		else if(data == '+')
    20d0:	80 91 2a 01 	lds	r24, 0x012A
    20d4:	8b 32       	cpi	r24, 0x2B	; 43
    20d6:	29 f7       	brne	.-54     	; 0x20a2 <main+0x146>
		{
			Change_Password();
    20d8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <Change_Password>
    20dc:	e2 cf       	rjmp	.-60     	; 0x20a2 <main+0x146>

000020de <Set_Password>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Set_Password()		//setting the new password function
{
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	ca 56       	subi	r28, 0x6A	; 106
    20ec:	d0 40       	sbci	r29, 0x00	; 0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte('0'); // this byte is sent in order to call the setting password function in ECU2
    20f8:	80 e3       	ldi	r24, 0x30	; 48
    20fa:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
    20fe:	fe 01       	movw	r30, r28
    2100:	e1 5a       	subi	r30, 0xA1	; 161
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a8 ec       	ldi	r26, 0xC8	; 200
    210a:	b2 e4       	ldi	r27, 0x42	; 66
    210c:	80 83       	st	Z, r24
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	a2 83       	std	Z+2, r26	; 0x02
    2112:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	8e 01       	movw	r16, r28
    2116:	05 5a       	subi	r16, 0xA5	; 165
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	fe 01       	movw	r30, r28
    211c:	e1 5a       	subi	r30, 0xA1	; 161
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	f8 01       	movw	r30, r16
    213a:	80 83       	st	Z, r24
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	a2 83       	std	Z+2, r26	; 0x02
    2140:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2142:	fe 01       	movw	r30, r28
    2144:	e5 5a       	subi	r30, 0xA5	; 165
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	44 f4       	brge	.+16     	; 0x2170 <Set_Password+0x92>
		__ticks = 1;
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5a       	subi	r30, 0xA7	; 167
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	64 c0       	rjmp	.+200    	; 0x2238 <Set_Password+0x15a>
	else if (__tmp > 65535)
    2170:	fe 01       	movw	r30, r28
    2172:	e5 5a       	subi	r30, 0xA5	; 165
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218a:	18 16       	cp	r1, r24
    218c:	0c f0       	brlt	.+2      	; 0x2190 <Set_Password+0xb2>
    218e:	43 c0       	rjmp	.+134    	; 0x2216 <Set_Password+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	fe 01       	movw	r30, r28
    2192:	e1 5a       	subi	r30, 0xA1	; 161
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8e 01       	movw	r16, r28
    21b0:	07 5a       	subi	r16, 0xA7	; 167
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	f8 01       	movw	r30, r16
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	1f c0       	rjmp	.+62     	; 0x2206 <Set_Password+0x128>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e9 5a       	subi	r30, 0xA9	; 169
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	88 ec       	ldi	r24, 0xC8	; 200
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 5a       	subi	r30, 0xA9	; 169
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <Set_Password+0x102>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e9 5a       	subi	r30, 0xA9	; 169
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	de 01       	movw	r26, r28
    21f0:	a7 5a       	subi	r26, 0xA7	; 167
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5a       	subi	r30, 0xA7	; 167
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	9c 93       	st	X, r25
    2204:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5a       	subi	r30, 0xA7	; 167
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	d1 f6       	brne	.-76     	; 0x21c8 <Set_Password+0xea>
    2214:	27 c0       	rjmp	.+78     	; 0x2264 <Set_Password+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	8e 01       	movw	r16, r28
    2218:	07 5a       	subi	r16, 0xA7	; 167
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	e5 5a       	subi	r30, 0xA5	; 165
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
    2238:	de 01       	movw	r26, r28
    223a:	ab 5a       	subi	r26, 0xAB	; 171
    223c:	bf 4f       	sbci	r27, 0xFF	; 255
    223e:	fe 01       	movw	r30, r28
    2240:	e7 5a       	subi	r30, 0xA7	; 167
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	8d 93       	st	X+, r24
    224a:	9c 93       	st	X, r25
    224c:	fe 01       	movw	r30, r28
    224e:	eb 5a       	subi	r30, 0xAB	; 171
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <Set_Password+0x178>
    225a:	fe 01       	movw	r30, r28
    225c:	eb 5a       	subi	r30, 0xAB	; 171
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_displayString(" Enter New Pass:");
    2264:	80 e8       	ldi	r24, 0x80	; 128
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
	LCD_goToRowColumn(2,4);
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	64 e0       	ldi	r22, 0x04	; 4
    2270:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    2274:	fe 01       	movw	r30, r28
    2276:	e7 59       	subi	r30, 0x97	; 151
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	11 82       	std	Z+1, r1	; 0x01
    227c:	10 82       	st	Z, r1
    227e:	cd c0       	rjmp	.+410    	; 0x241a <Set_Password+0x33c>
	{
		str1[i] =  Keypad_getPressedKey();
    2280:	fe 01       	movw	r30, r28
    2282:	e7 59       	subi	r30, 0x97	; 151
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	00 81       	ld	r16, Z
    2288:	11 81       	ldd	r17, Z+1	; 0x01
    228a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    228e:	f8 01       	movw	r30, r16
    2290:	ec 5d       	subi	r30, 0xDC	; 220
    2292:	fe 4f       	sbci	r31, 0xFE	; 254
    2294:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2296:	8a e2       	ldi	r24, 0x2A	; 42
    2298:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayCharacter>
    229c:	fe 01       	movw	r30, r28
    229e:	ef 5a       	subi	r30, 0xAF	; 175
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a6 e9       	ldi	r26, 0x96	; 150
    22a8:	b3 e4       	ldi	r27, 0x43	; 67
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	8e 01       	movw	r16, r28
    22b4:	03 5b       	subi	r16, 0xB3	; 179
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	ef 5a       	subi	r30, 0xAF	; 175
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	80 83       	st	Z, r24
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e0:	fe 01       	movw	r30, r28
    22e2:	e3 5b       	subi	r30, 0xB3	; 179
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	44 f4       	brge	.+16     	; 0x230e <Set_Password+0x230>
		__ticks = 1;
    22fe:	fe 01       	movw	r30, r28
    2300:	e5 5b       	subi	r30, 0xB5	; 181
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
    230c:	64 c0       	rjmp	.+200    	; 0x23d6 <Set_Password+0x2f8>
	else if (__tmp > 65535)
    230e:	fe 01       	movw	r30, r28
    2310:	e3 5b       	subi	r30, 0xB3	; 179
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	0c f0       	brlt	.+2      	; 0x232e <Set_Password+0x250>
    232c:	43 c0       	rjmp	.+134    	; 0x23b4 <Set_Password+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	fe 01       	movw	r30, r28
    2330:	ef 5a       	subi	r30, 0xAF	; 175
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8e 01       	movw	r16, r28
    234e:	05 5b       	subi	r16, 0xB5	; 181
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	f8 01       	movw	r30, r16
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	1f c0       	rjmp	.+62     	; 0x23a4 <Set_Password+0x2c6>
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5b       	subi	r30, 0xB7	; 183
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	80 83       	st	Z, r24
    2374:	fe 01       	movw	r30, r28
    2376:	e7 5b       	subi	r30, 0xB7	; 183
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <Set_Password+0x2a0>
    2382:	fe 01       	movw	r30, r28
    2384:	e7 5b       	subi	r30, 0xB7	; 183
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	de 01       	movw	r26, r28
    238e:	a5 5b       	subi	r26, 0xB5	; 181
    2390:	bf 4f       	sbci	r27, 0xFF	; 255
    2392:	fe 01       	movw	r30, r28
    2394:	e5 5b       	subi	r30, 0xB5	; 181
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	fe 01       	movw	r30, r28
    23a6:	e5 5b       	subi	r30, 0xB5	; 181
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	d1 f6       	brne	.-76     	; 0x2366 <Set_Password+0x288>
    23b2:	27 c0       	rjmp	.+78     	; 0x2402 <Set_Password+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	8e 01       	movw	r16, r28
    23b6:	05 5b       	subi	r16, 0xB5	; 181
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	fe 01       	movw	r30, r28
    23bc:	e3 5b       	subi	r30, 0xB3	; 179
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	de 01       	movw	r26, r28
    23d8:	a9 5b       	subi	r26, 0xB9	; 185
    23da:	bf 4f       	sbci	r27, 0xFF	; 255
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 5b       	subi	r30, 0xB5	; 181
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	8d 93       	st	X+, r24
    23e8:	9c 93       	st	X, r25
    23ea:	fe 01       	movw	r30, r28
    23ec:	e9 5b       	subi	r30, 0xB9	; 185
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <Set_Password+0x316>
    23f8:	fe 01       	movw	r30, r28
    23fa:	e9 5b       	subi	r30, 0xB9	; 185
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
{
	UART_sendByte('0'); // this byte is sent in order to call the setting password function in ECU2
	_delay_ms(100);
	LCD_displayString(" Enter New Pass:");
	LCD_goToRowColumn(2,4);
	for(int i = 0 ; i < 5 ; i++)
    2402:	de 01       	movw	r26, r28
    2404:	a7 59       	subi	r26, 0x97	; 151
    2406:	bf 4f       	sbci	r27, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	e7 59       	subi	r30, 0x97	; 151
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	9c 93       	st	X, r25
    2418:	8e 93       	st	-X, r24
    241a:	fe 01       	movw	r30, r28
    241c:	e7 59       	subi	r30, 0x97	; 151
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	85 30       	cpi	r24, 0x05	; 5
    2426:	91 05       	cpc	r25, r1
    2428:	0c f4       	brge	.+2      	; 0x242c <Set_Password+0x34e>
    242a:	2a cf       	rjmp	.-428    	; 0x2280 <Set_Password+0x1a2>
    242c:	fe 01       	movw	r30, r28
    242e:	ed 5b       	subi	r30, 0xBD	; 189
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a8 ec       	ldi	r26, 0xC8	; 200
    2438:	b2 e4       	ldi	r27, 0x42	; 66
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	8e 01       	movw	r16, r28
    2444:	01 5c       	subi	r16, 0xC1	; 193
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	ed 5b       	subi	r30, 0xBD	; 189
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2470:	fe 01       	movw	r30, r28
    2472:	ff 96       	adiw	r30, 0x3f	; 63
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <Set_Password+0x3b8>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9e af       	std	Y+62, r25	; 0x3e
    2492:	8d af       	std	Y+61, r24	; 0x3d
    2494:	46 c0       	rjmp	.+140    	; 0x2522 <Set_Password+0x444>
	else if (__tmp > 65535)
    2496:	fe 01       	movw	r30, r28
    2498:	ff 96       	adiw	r30, 0x3f	; 63
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	64 f5       	brge	.+88     	; 0x250a <Set_Password+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	fe 01       	movw	r30, r28
    24b4:	ed 5b       	subi	r30, 0xBD	; 189
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e af       	std	Y+62, r25	; 0x3e
    24de:	8d af       	std	Y+61, r24	; 0x3d
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <Set_Password+0x422>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c af       	std	Y+60, r25	; 0x3c
    24e8:	8b af       	std	Y+59, r24	; 0x3b
    24ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    24ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <Set_Password+0x410>
    24f2:	9c af       	std	Y+60, r25	; 0x3c
    24f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9e af       	std	Y+62, r25	; 0x3e
    24fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8d ad       	ldd	r24, Y+61	; 0x3d
    2502:	9e ad       	ldd	r25, Y+62	; 0x3e
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <Set_Password+0x404>
    2508:	16 c0       	rjmp	.+44     	; 0x2536 <Set_Password+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	fe 01       	movw	r30, r28
    250c:	ff 96       	adiw	r30, 0x3f	; 63
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e af       	std	Y+62, r25	; 0x3e
    2520:	8d af       	std	Y+61, r24	; 0x3d
    2522:	8d ad       	ldd	r24, Y+61	; 0x3d
    2524:	9e ad       	ldd	r25, Y+62	; 0x3e
    2526:	9a af       	std	Y+58, r25	; 0x3a
    2528:	89 af       	std	Y+57, r24	; 0x39
    252a:	89 ad       	ldd	r24, Y+57	; 0x39
    252c:	9a ad       	ldd	r25, Y+58	; 0x3a
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <Set_Password+0x450>
    2532:	9a af       	std	Y+58, r25	; 0x3a
    2534:	89 af       	std	Y+57, r24	; 0x39
		str1[i] =  Keypad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	_delay_ms(100);
	LCD_clearScreen();
    2536:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
	LCD_displayString(" Re-enter Pass:");
    253a:	81 e9       	ldi	r24, 0x91	; 145
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
	LCD_goToRowColumn(2,4);
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
	for(int i = 0 ; i < 5 ; i++)
    254a:	fe 01       	movw	r30, r28
    254c:	e9 59       	subi	r30, 0x99	; 153
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	11 82       	std	Z+1, r1	; 0x01
    2552:	10 82       	st	Z, r1
    2554:	8c c0       	rjmp	.+280    	; 0x266e <Set_Password+0x590>
	{

		str2[i] =  Keypad_getPressedKey();
    2556:	fe 01       	movw	r30, r28
    2558:	e9 59       	subi	r30, 0x99	; 153
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	00 81       	ld	r16, Z
    255e:	11 81       	ldd	r17, Z+1	; 0x01
    2560:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    2564:	f8 01       	movw	r30, r16
    2566:	e4 5d       	subi	r30, 0xD4	; 212
    2568:	fe 4f       	sbci	r31, 0xFE	; 254
    256a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    256c:	8a e2       	ldi	r24, 0x2A	; 42
    256e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayCharacter>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	a6 e9       	ldi	r26, 0x96	; 150
    2578:	b3 e4       	ldi	r27, 0x43	; 67
    257a:	8d ab       	std	Y+53, r24	; 0x35
    257c:	9e ab       	std	Y+54, r25	; 0x36
    257e:	af ab       	std	Y+55, r26	; 0x37
    2580:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2582:	6d a9       	ldd	r22, Y+53	; 0x35
    2584:	7e a9       	ldd	r23, Y+54	; 0x36
    2586:	8f a9       	ldd	r24, Y+55	; 0x37
    2588:	98 ad       	ldd	r25, Y+56	; 0x38
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a ef       	ldi	r20, 0xFA	; 250
    2590:	54 e4       	ldi	r21, 0x44	; 68
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	89 ab       	std	Y+49, r24	; 0x31
    259c:	9a ab       	std	Y+50, r25	; 0x32
    259e:	ab ab       	std	Y+51, r26	; 0x33
    25a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25a2:	69 a9       	ldd	r22, Y+49	; 0x31
    25a4:	7a a9       	ldd	r23, Y+50	; 0x32
    25a6:	8b a9       	ldd	r24, Y+51	; 0x33
    25a8:	9c a9       	ldd	r25, Y+52	; 0x34
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	5f e3       	ldi	r21, 0x3F	; 63
    25b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b6:	88 23       	and	r24, r24
    25b8:	2c f4       	brge	.+10     	; 0x25c4 <Set_Password+0x4e6>
		__ticks = 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	98 ab       	std	Y+48, r25	; 0x30
    25c0:	8f a7       	std	Y+47, r24	; 0x2f
    25c2:	3f c0       	rjmp	.+126    	; 0x2642 <Set_Password+0x564>
	else if (__tmp > 65535)
    25c4:	69 a9       	ldd	r22, Y+49	; 0x31
    25c6:	7a a9       	ldd	r23, Y+50	; 0x32
    25c8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ca:	9c a9       	ldd	r25, Y+52	; 0x34
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	3f ef       	ldi	r19, 0xFF	; 255
    25d0:	4f e7       	ldi	r20, 0x7F	; 127
    25d2:	57 e4       	ldi	r21, 0x47	; 71
    25d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d8:	18 16       	cp	r1, r24
    25da:	4c f5       	brge	.+82     	; 0x262e <Set_Password+0x550>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25dc:	6d a9       	ldd	r22, Y+53	; 0x35
    25de:	7e a9       	ldd	r23, Y+54	; 0x36
    25e0:	8f a9       	ldd	r24, Y+55	; 0x37
    25e2:	98 ad       	ldd	r25, Y+56	; 0x38
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	98 ab       	std	Y+48, r25	; 0x30
    2602:	8f a7       	std	Y+47, r24	; 0x2f
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <Set_Password+0x546>
    2606:	88 ec       	ldi	r24, 0xC8	; 200
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9e a7       	std	Y+46, r25	; 0x2e
    260c:	8d a7       	std	Y+45, r24	; 0x2d
    260e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2610:	9e a5       	ldd	r25, Y+46	; 0x2e
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <Set_Password+0x534>
    2616:	9e a7       	std	Y+46, r25	; 0x2e
    2618:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261a:	8f a5       	ldd	r24, Y+47	; 0x2f
    261c:	98 a9       	ldd	r25, Y+48	; 0x30
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	98 ab       	std	Y+48, r25	; 0x30
    2622:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2624:	8f a5       	ldd	r24, Y+47	; 0x2f
    2626:	98 a9       	ldd	r25, Y+48	; 0x30
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	69 f7       	brne	.-38     	; 0x2606 <Set_Password+0x528>
    262c:	14 c0       	rjmp	.+40     	; 0x2656 <Set_Password+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262e:	69 a9       	ldd	r22, Y+49	; 0x31
    2630:	7a a9       	ldd	r23, Y+50	; 0x32
    2632:	8b a9       	ldd	r24, Y+51	; 0x33
    2634:	9c a9       	ldd	r25, Y+52	; 0x34
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	8f a5       	ldd	r24, Y+47	; 0x2f
    2644:	98 a9       	ldd	r25, Y+48	; 0x30
    2646:	9c a7       	std	Y+44, r25	; 0x2c
    2648:	8b a7       	std	Y+43, r24	; 0x2b
    264a:	8b a5       	ldd	r24, Y+43	; 0x2b
    264c:	9c a5       	ldd	r25, Y+44	; 0x2c
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <Set_Password+0x570>
    2652:	9c a7       	std	Y+44, r25	; 0x2c
    2654:	8b a7       	std	Y+43, r24	; 0x2b
	}
	_delay_ms(100);
	LCD_clearScreen();
	LCD_displayString(" Re-enter Pass:");
	LCD_goToRowColumn(2,4);
	for(int i = 0 ; i < 5 ; i++)
    2656:	de 01       	movw	r26, r28
    2658:	a9 59       	subi	r26, 0x99	; 153
    265a:	bf 4f       	sbci	r27, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	e9 59       	subi	r30, 0x99	; 153
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	9c 93       	st	X, r25
    266c:	8e 93       	st	-X, r24
    266e:	fe 01       	movw	r30, r28
    2670:	e9 59       	subi	r30, 0x99	; 153
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	85 30       	cpi	r24, 0x05	; 5
    267a:	91 05       	cpc	r25, r1
    267c:	0c f4       	brge	.+2      	; 0x2680 <Set_Password+0x5a2>
    267e:	6b cf       	rjmp	.-298    	; 0x2556 <Set_Password+0x478>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a8 ec       	ldi	r26, 0xC8	; 200
    2686:	b2 e4       	ldi	r27, 0x42	; 66
    2688:	8f a3       	std	Y+39, r24	; 0x27
    268a:	98 a7       	std	Y+40, r25	; 0x28
    268c:	a9 a7       	std	Y+41, r26	; 0x29
    268e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6f a1       	ldd	r22, Y+39	; 0x27
    2692:	78 a5       	ldd	r23, Y+40	; 0x28
    2694:	89 a5       	ldd	r24, Y+41	; 0x29
    2696:	9a a5       	ldd	r25, Y+42	; 0x2a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a ef       	ldi	r20, 0xFA	; 250
    269e:	54 e4       	ldi	r21, 0x44	; 68
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8b a3       	std	Y+35, r24	; 0x23
    26aa:	9c a3       	std	Y+36, r25	; 0x24
    26ac:	ad a3       	std	Y+37, r26	; 0x25
    26ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b0:	6b a1       	ldd	r22, Y+35	; 0x23
    26b2:	7c a1       	ldd	r23, Y+36	; 0x24
    26b4:	8d a1       	ldd	r24, Y+37	; 0x25
    26b6:	9e a1       	ldd	r25, Y+38	; 0x26
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <Set_Password+0x5f4>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <Set_Password+0x672>
	else if (__tmp > 65535)
    26d2:	6b a1       	ldd	r22, Y+35	; 0x23
    26d4:	7c a1       	ldd	r23, Y+36	; 0x24
    26d6:	8d a1       	ldd	r24, Y+37	; 0x25
    26d8:	9e a1       	ldd	r25, Y+38	; 0x26
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <Set_Password+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6f a1       	ldd	r22, Y+39	; 0x27
    26ec:	78 a5       	ldd	r23, Y+40	; 0x28
    26ee:	89 a5       	ldd	r24, Y+41	; 0x29
    26f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9a a3       	std	Y+34, r25	; 0x22
    2710:	89 a3       	std	Y+33, r24	; 0x21
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <Set_Password+0x654>
    2714:	88 ec       	ldi	r24, 0xC8	; 200
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	98 a3       	std	Y+32, r25	; 0x20
    271a:	8f 8f       	std	Y+31, r24	; 0x1f
    271c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271e:	98 a1       	ldd	r25, Y+32	; 0x20
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <Set_Password+0x642>
    2724:	98 a3       	std	Y+32, r25	; 0x20
    2726:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	89 a1       	ldd	r24, Y+33	; 0x21
    2734:	9a a1       	ldd	r25, Y+34	; 0x22
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <Set_Password+0x636>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <Set_Password+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6b a1       	ldd	r22, Y+35	; 0x23
    273e:	7c a1       	ldd	r23, Y+36	; 0x24
    2740:	8d a1       	ldd	r24, Y+37	; 0x25
    2742:	9e a1       	ldd	r25, Y+38	; 0x26
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9a a3       	std	Y+34, r25	; 0x22
    274e:	89 a3       	std	Y+33, r24	; 0x21
    2750:	89 a1       	ldd	r24, Y+33	; 0x21
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	9e 8f       	std	Y+30, r25	; 0x1e
    2756:	8d 8f       	std	Y+29, r24	; 0x1d
    2758:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <Set_Password+0x67e>
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	8d 8f       	std	Y+29, r24	; 0x1d
		str2[i] =  Keypad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	_delay_ms(100);
	for(int i = 0; i < 5 ; i++ )
    2764:	fe 01       	movw	r30, r28
    2766:	eb 59       	subi	r30, 0x9B	; 155
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	11 82       	std	Z+1, r1	; 0x01
    276c:	10 82       	st	Z, r1
    276e:	25 c0       	rjmp	.+74     	; 0x27ba <Set_Password+0x6dc>
	{
		if(str1[i] == str2[i])
    2770:	fe 01       	movw	r30, r28
    2772:	eb 59       	subi	r30, 0x9B	; 155
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	fc 01       	movw	r30, r24
    277c:	ec 5d       	subi	r30, 0xDC	; 220
    277e:	fe 4f       	sbci	r31, 0xFE	; 254
    2780:	20 81       	ld	r18, Z
    2782:	fe 01       	movw	r30, r28
    2784:	eb 59       	subi	r30, 0x9B	; 155
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	fc 01       	movw	r30, r24
    278e:	e4 5d       	subi	r30, 0xD4	; 212
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	80 81       	ld	r24, Z
    2794:	28 17       	cp	r18, r24
    2796:	29 f4       	brne	.+10     	; 0x27a2 <Set_Password+0x6c4>
		{
			n++;
    2798:	80 91 1a 01 	lds	r24, 0x011A
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	80 93 1a 01 	sts	0x011A, r24
		str2[i] =  Keypad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	_delay_ms(100);
	for(int i = 0; i < 5 ; i++ )
    27a2:	de 01       	movw	r26, r28
    27a4:	ab 59       	subi	r26, 0x9B	; 155
    27a6:	bf 4f       	sbci	r27, 0xFF	; 255
    27a8:	fe 01       	movw	r30, r28
    27aa:	eb 59       	subi	r30, 0x9B	; 155
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	9c 93       	st	X, r25
    27b8:	8e 93       	st	-X, r24
    27ba:	fe 01       	movw	r30, r28
    27bc:	eb 59       	subi	r30, 0x9B	; 155
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	85 30       	cpi	r24, 0x05	; 5
    27c6:	91 05       	cpc	r25, r1
    27c8:	9c f2       	brlt	.-90     	; 0x2770 <Set_Password+0x692>
		if(str1[i] == str2[i])
		{
			n++;
		}
	}
	if(n==5) // checking if the two strings are equal before sending  the password to the second microcontroller
    27ca:	80 91 1a 01 	lds	r24, 0x011A
    27ce:	85 30       	cpi	r24, 0x05	; 5
    27d0:	39 f4       	brne	.+14     	; 0x27e0 <Set_Password+0x702>
	{
		LCD_clearScreen();
    27d2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
		LCD_displayString(" Matches");
    27d6:	81 ea       	ldi	r24, 0xA1	; 161
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
    27de:	aa c0       	rjmp	.+340    	; 0x2934 <Set_Password+0x856>
	}
	else
	{
		LCD_clearScreen();
    27e0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
		LCD_displayString(" Not Match");
    27e4:	8a ea       	ldi	r24, 0xAA	; 170
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a6 e9       	ldi	r26, 0x96	; 150
    27f2:	b3 e4       	ldi	r27, 0x43	; 67
    27f4:	89 8f       	std	Y+25, r24	; 0x19
    27f6:	9a 8f       	std	Y+26, r25	; 0x1a
    27f8:	ab 8f       	std	Y+27, r26	; 0x1b
    27fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	69 8d       	ldd	r22, Y+25	; 0x19
    27fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8d 8b       	std	Y+21, r24	; 0x15
    2816:	9e 8b       	std	Y+22, r25	; 0x16
    2818:	af 8b       	std	Y+23, r26	; 0x17
    281a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <Set_Password+0x760>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <Set_Password+0x7de>
	else if (__tmp > 65535)
    283e:	6d 89       	ldd	r22, Y+21	; 0x15
    2840:	7e 89       	ldd	r23, Y+22	; 0x16
    2842:	8f 89       	ldd	r24, Y+23	; 0x17
    2844:	98 8d       	ldd	r25, Y+24	; 0x18
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <Set_Password+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9c 8b       	std	Y+20, r25	; 0x14
    287c:	8b 8b       	std	Y+19, r24	; 0x13
    287e:	0f c0       	rjmp	.+30     	; 0x289e <Set_Password+0x7c0>
    2880:	88 ec       	ldi	r24, 0xC8	; 200
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
    2888:	89 89       	ldd	r24, Y+17	; 0x11
    288a:	9a 89       	ldd	r25, Y+18	; 0x12
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <Set_Password+0x7ae>
    2890:	9a 8b       	std	Y+18, r25	; 0x12
    2892:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9c 8b       	std	Y+20, r25	; 0x14
    289c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8b 89       	ldd	r24, Y+19	; 0x13
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <Set_Password+0x7a2>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <Set_Password+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6d 89       	ldd	r22, Y+21	; 0x15
    28aa:	7e 89       	ldd	r23, Y+22	; 0x16
    28ac:	8f 89       	ldd	r24, Y+23	; 0x17
    28ae:	98 8d       	ldd	r25, Y+24	; 0x18
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	98 8b       	std	Y+16, r25	; 0x10
    28c2:	8f 87       	std	Y+15, r24	; 0x0f
    28c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c6:	98 89       	ldd	r25, Y+16	; 0x10
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <Set_Password+0x7ea>
    28cc:	98 8b       	std	Y+16, r25	; 0x10
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_clearScreen();
    28d0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
		for(int i = 0; i < 5 ; i++ )
    28d4:	fe 01       	movw	r30, r28
    28d6:	ed 59       	subi	r30, 0x9D	; 157
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	11 82       	std	Z+1, r1	; 0x01
    28dc:	10 82       	st	Z, r1
    28de:	1e c0       	rjmp	.+60     	; 0x291c <Set_Password+0x83e>
		{
			str1[i] = 0;
    28e0:	fe 01       	movw	r30, r28
    28e2:	ed 59       	subi	r30, 0x9D	; 157
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	fc 01       	movw	r30, r24
    28ec:	ec 5d       	subi	r30, 0xDC	; 220
    28ee:	fe 4f       	sbci	r31, 0xFE	; 254
    28f0:	10 82       	st	Z, r1
			str2[i] = 0;
    28f2:	fe 01       	movw	r30, r28
    28f4:	ed 59       	subi	r30, 0x9D	; 157
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	fc 01       	movw	r30, r24
    28fe:	e4 5d       	subi	r30, 0xD4	; 212
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	10 82       	st	Z, r1
	{
		LCD_clearScreen();
		LCD_displayString(" Not Match");
		_delay_ms(300);
		LCD_clearScreen();
		for(int i = 0; i < 5 ; i++ )
    2904:	de 01       	movw	r26, r28
    2906:	ad 59       	subi	r26, 0x9D	; 157
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	ed 59       	subi	r30, 0x9D	; 157
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	8e 93       	st	-X, r24
    291c:	fe 01       	movw	r30, r28
    291e:	ed 59       	subi	r30, 0x9D	; 157
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	85 30       	cpi	r24, 0x05	; 5
    2928:	91 05       	cpc	r25, r1
    292a:	d4 f2       	brlt	.-76     	; 0x28e0 <Set_Password+0x802>
		{
			str1[i] = 0;
			str2[i] = 0;
		}
		n = 0;
    292c:	10 92 1a 01 	sts	0x011A, r1
		Set_Password(); //repeating the steps again
    2930:	0e 94 6f 10 	call	0x20de	; 0x20de <Set_Password>
	}
	n = 0;
    2934:	10 92 1a 01 	sts	0x011A, r1
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a6 e9       	ldi	r26, 0x96	; 150
    293e:	b3 e4       	ldi	r27, 0x43	; 67
    2940:	8b 87       	std	Y+11, r24	; 0x0b
    2942:	9c 87       	std	Y+12, r25	; 0x0c
    2944:	ad 87       	std	Y+13, r26	; 0x0d
    2946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6b 85       	ldd	r22, Y+11	; 0x0b
    294a:	7c 85       	ldd	r23, Y+12	; 0x0c
    294c:	8d 85       	ldd	r24, Y+13	; 0x0d
    294e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a ef       	ldi	r20, 0xFA	; 250
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8f 83       	std	Y+7, r24	; 0x07
    2962:	98 87       	std	Y+8, r25	; 0x08
    2964:	a9 87       	std	Y+9, r26	; 0x09
    2966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2968:	6f 81       	ldd	r22, Y+7	; 0x07
    296a:	78 85       	ldd	r23, Y+8	; 0x08
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <Set_Password+0x8ac>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <Set_Password+0x92a>
	else if (__tmp > 65535)
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <Set_Password+0x916>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <Set_Password+0x90c>
    29cc:	88 ec       	ldi	r24, 0xC8	; 200
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9c 83       	std	Y+4, r25	; 0x04
    29d2:	8b 83       	std	Y+3, r24	; 0x03
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	9c 81       	ldd	r25, Y+4	; 0x04
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <Set_Password+0x8fa>
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	9e 81       	ldd	r25, Y+6	; 0x06
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <Set_Password+0x8ee>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <Set_Password+0x93e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <Set_Password+0x936>
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    2a1c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
}
    2a20:	c6 59       	subi	r28, 0x96	; 150
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <Door>:

void Door()
{
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	c6 56       	subi	r28, 0x66	; 102
    2a46:	d0 40       	sbci	r29, 0x00	; 0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte('1'); // this byte is sent in order to call the checking password function in ECU2 in order to open the door
    2a52:	81 e3       	ldi	r24, 0x31	; 49
    2a54:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
	LCD_clearScreen();
    2a58:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e1 5a       	subi	r30, 0xA1	; 161
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a6 e9       	ldi	r26, 0x96	; 150
    2a68:	b3 e4       	ldi	r27, 0x43	; 67
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	8e 01       	movw	r16, r28
    2a74:	05 5a       	subi	r16, 0xA5	; 165
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e1 5a       	subi	r30, 0xA1	; 161
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e5 5a       	subi	r30, 0xA5	; 165
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	44 f4       	brge	.+16     	; 0x2ace <Door+0x96>
		__ticks = 1;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e7 5a       	subi	r30, 0xA7	; 167
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	64 c0       	rjmp	.+200    	; 0x2b96 <Door+0x15e>
	else if (__tmp > 65535)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e5 5a       	subi	r30, 0xA5	; 165
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <Door+0xb6>
    2aec:	43 c0       	rjmp	.+134    	; 0x2b74 <Door+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e1 5a       	subi	r30, 0xA1	; 161
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8e 01       	movw	r16, r28
    2b0e:	07 5a       	subi	r16, 0xA7	; 167
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <Door+0x12c>
    2b26:	fe 01       	movw	r30, r28
    2b28:	e9 5a       	subi	r30, 0xA9	; 169
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	e9 5a       	subi	r30, 0xA9	; 169
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <Door+0x106>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e9 5a       	subi	r30, 0xA9	; 169
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	de 01       	movw	r26, r28
    2b4e:	a7 5a       	subi	r26, 0xA7	; 167
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 5a       	subi	r30, 0xA7	; 167
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	9c 93       	st	X, r25
    2b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	fe 01       	movw	r30, r28
    2b66:	e7 5a       	subi	r30, 0xA7	; 167
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	d1 f6       	brne	.-76     	; 0x2b26 <Door+0xee>
    2b72:	27 c0       	rjmp	.+78     	; 0x2bc2 <Door+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b74:	8e 01       	movw	r16, r28
    2b76:	07 5a       	subi	r16, 0xA7	; 167
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 5a       	subi	r30, 0xA5	; 165
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	de 01       	movw	r26, r28
    2b98:	ab 5a       	subi	r26, 0xAB	; 171
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	8d 93       	st	X+, r24
    2ba8:	9c 93       	st	X, r25
    2baa:	fe 01       	movw	r30, r28
    2bac:	eb 5a       	subi	r30, 0xAB	; 171
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <Door+0x17c>
    2bb8:	fe 01       	movw	r30, r28
    2bba:	eb 5a       	subi	r30, 0xAB	; 171
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
	_delay_ms(300);
	LCD_displayString(" Enter Pass :");
    2bc2:	85 eb       	ldi	r24, 0xB5	; 181
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
	LCD_goToRowColumn(2,4);
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	64 e0       	ldi	r22, 0x04	; 4
    2bce:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>

	for (int i = 0 ; i < 5 ; i++)
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 59       	subi	r30, 0x9B	; 155
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	11 82       	std	Z+1, r1	; 0x01
    2bda:	10 82       	st	Z, r1
    2bdc:	cd c0       	rjmp	.+410    	; 0x2d78 <Door+0x340>
	{
		str2[i] = Keypad_getPressedKey();
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 59       	subi	r30, 0x9B	; 155
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	00 81       	ld	r16, Z
    2be6:	11 81       	ldd	r17, Z+1	; 0x01
    2be8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    2bec:	f8 01       	movw	r30, r16
    2bee:	e4 5d       	subi	r30, 0xD4	; 212
    2bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf2:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2bf4:	8a e2       	ldi	r24, 0x2A	; 42
    2bf6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayCharacter>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ef 5a       	subi	r30, 0xAF	; 175
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a6 e9       	ldi	r26, 0x96	; 150
    2c06:	b3 e4       	ldi	r27, 0x43	; 67
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	8e 01       	movw	r16, r28
    2c12:	03 5b       	subi	r16, 0xB3	; 179
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	ef 5a       	subi	r30, 0xAF	; 175
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a ef       	ldi	r20, 0xFA	; 250
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	f8 01       	movw	r30, r16
    2c36:	80 83       	st	Z, r24
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	a2 83       	std	Z+2, r26	; 0x02
    2c3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e3 5b       	subi	r30, 0xB3	; 179
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	44 f4       	brge	.+16     	; 0x2c6c <Door+0x234>
		__ticks = 1;
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e5 5b       	subi	r30, 0xB5	; 181
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	64 c0       	rjmp	.+200    	; 0x2d34 <Door+0x2fc>
	else if (__tmp > 65535)
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e3 5b       	subi	r30, 0xB3	; 179
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	0c f0       	brlt	.+2      	; 0x2c8c <Door+0x254>
    2c8a:	43 c0       	rjmp	.+134    	; 0x2d12 <Door+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ef 5a       	subi	r30, 0xAF	; 175
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8e 01       	movw	r16, r28
    2cac:	05 5b       	subi	r16, 0xB5	; 181
    2cae:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	1f c0       	rjmp	.+62     	; 0x2d02 <Door+0x2ca>
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e7 5b       	subi	r30, 0xB7	; 183
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e7 5b       	subi	r30, 0xB7	; 183
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <Door+0x2a4>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e7 5b       	subi	r30, 0xB7	; 183
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	de 01       	movw	r26, r28
    2cec:	a5 5b       	subi	r26, 0xB5	; 181
    2cee:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e5 5b       	subi	r30, 0xB5	; 181
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	11 96       	adiw	r26, 0x01	; 1
    2cfe:	9c 93       	st	X, r25
    2d00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	fe 01       	movw	r30, r28
    2d04:	e5 5b       	subi	r30, 0xB5	; 181
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	d1 f6       	brne	.-76     	; 0x2cc4 <Door+0x28c>
    2d10:	27 c0       	rjmp	.+78     	; 0x2d60 <Door+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	8e 01       	movw	r16, r28
    2d14:	05 5b       	subi	r16, 0xB5	; 181
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e3 5b       	subi	r30, 0xB3	; 179
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	f8 01       	movw	r30, r16
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	de 01       	movw	r26, r28
    2d36:	a9 5b       	subi	r26, 0xB9	; 185
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e5 5b       	subi	r30, 0xB5	; 181
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	8d 93       	st	X+, r24
    2d46:	9c 93       	st	X, r25
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e9 5b       	subi	r30, 0xB9	; 185
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <Door+0x31a>
    2d56:	fe 01       	movw	r30, r28
    2d58:	e9 5b       	subi	r30, 0xB9	; 185
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
	LCD_clearScreen();
	_delay_ms(300);
	LCD_displayString(" Enter Pass :");
	LCD_goToRowColumn(2,4);

	for (int i = 0 ; i < 5 ; i++)
    2d60:	de 01       	movw	r26, r28
    2d62:	ab 59       	subi	r26, 0x9B	; 155
    2d64:	bf 4f       	sbci	r27, 0xFF	; 255
    2d66:	fe 01       	movw	r30, r28
    2d68:	eb 59       	subi	r30, 0x9B	; 155
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	8e 93       	st	-X, r24
    2d78:	fe 01       	movw	r30, r28
    2d7a:	eb 59       	subi	r30, 0x9B	; 155
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	85 30       	cpi	r24, 0x05	; 5
    2d84:	91 05       	cpc	r25, r1
    2d86:	0c f4       	brge	.+2      	; 0x2d8a <Door+0x352>
    2d88:	2a cf       	rjmp	.-428    	; 0x2bde <Door+0x1a6>
		str2[i] = Keypad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}

	for(int i = 0 ; i < 5 ; i++) // sending the entered password to the second ECU to be checked
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	ed 59       	subi	r30, 0x9D	; 157
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	11 82       	std	Z+1, r1	; 0x01
    2d92:	10 82       	st	Z, r1
    2d94:	9c c0       	rjmp	.+312    	; 0x2ece <Door+0x496>
	{
		UART_sendByte(str2[i]);
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 59       	subi	r30, 0x9D	; 157
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	fc 01       	movw	r30, r24
    2da2:	e4 5d       	subi	r30, 0xD4	; 212
    2da4:	fe 4f       	sbci	r31, 0xFE	; 254
    2da6:	80 81       	ld	r24, Z
    2da8:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
    2dac:	fe 01       	movw	r30, r28
    2dae:	ed 5b       	subi	r30, 0xBD	; 189
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a8 ec       	ldi	r26, 0xC8	; 200
    2db8:	b2 e4       	ldi	r27, 0x42	; 66
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	8e 01       	movw	r16, r28
    2dc4:	01 5c       	subi	r16, 0xC1	; 193
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 5b       	subi	r30, 0xBD	; 189
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a ef       	ldi	r20, 0xFA	; 250
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2df0:	fe 01       	movw	r30, r28
    2df2:	ff 96       	adiw	r30, 0x3f	; 63
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <Door+0x3de>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9e af       	std	Y+62, r25	; 0x3e
    2e12:	8d af       	std	Y+61, r24	; 0x3d
    2e14:	46 c0       	rjmp	.+140    	; 0x2ea2 <Door+0x46a>
	else if (__tmp > 65535)
    2e16:	fe 01       	movw	r30, r28
    2e18:	ff 96       	adiw	r30, 0x3f	; 63
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	82 81       	ldd	r24, Z+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	64 f5       	brge	.+88     	; 0x2e8a <Door+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	fe 01       	movw	r30, r28
    2e34:	ed 5b       	subi	r30, 0xBD	; 189
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9e af       	std	Y+62, r25	; 0x3e
    2e5e:	8d af       	std	Y+61, r24	; 0x3d
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <Door+0x448>
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9c af       	std	Y+60, r25	; 0x3c
    2e68:	8b af       	std	Y+59, r24	; 0x3b
    2e6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <Door+0x436>
    2e72:	9c af       	std	Y+60, r25	; 0x3c
    2e74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	9e af       	std	Y+62, r25	; 0x3e
    2e7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <Door+0x42a>
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <Door+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ff 96       	adiw	r30, 0x3f	; 63
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9e af       	std	Y+62, r25	; 0x3e
    2ea0:	8d af       	std	Y+61, r24	; 0x3d
    2ea2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ea6:	9a af       	std	Y+58, r25	; 0x3a
    2ea8:	89 af       	std	Y+57, r24	; 0x39
    2eaa:	89 ad       	ldd	r24, Y+57	; 0x39
    2eac:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <Door+0x476>
    2eb2:	9a af       	std	Y+58, r25	; 0x3a
    2eb4:	89 af       	std	Y+57, r24	; 0x39
		str2[i] = Keypad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}

	for(int i = 0 ; i < 5 ; i++) // sending the entered password to the second ECU to be checked
    2eb6:	de 01       	movw	r26, r28
    2eb8:	ad 59       	subi	r26, 0x9D	; 157
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ed 59       	subi	r30, 0x9D	; 157
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	11 96       	adiw	r26, 0x01	; 1
    2eca:	9c 93       	st	X, r25
    2ecc:	8e 93       	st	-X, r24
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ed 59       	subi	r30, 0x9D	; 157
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	85 30       	cpi	r24, 0x05	; 5
    2eda:	91 05       	cpc	r25, r1
    2edc:	0c f4       	brge	.+2      	; 0x2ee0 <Door+0x4a8>
    2ede:	5b cf       	rjmp	.-330    	; 0x2d96 <Door+0x35e>
	{
		UART_sendByte(str2[i]);
		_delay_ms(100);
	}
	LCD_clearScreen();
    2ee0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>

	check = UART_receiveByte(); // a received byte from microcontroller 2 to display if the password is correct or not
    2ee4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_receiveByte>
    2ee8:	80 93 23 01 	sts	0x0123, r24
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a8 ec       	ldi	r26, 0xC8	; 200
    2ef2:	b2 e4       	ldi	r27, 0x42	; 66
    2ef4:	8d ab       	std	Y+53, r24	; 0x35
    2ef6:	9e ab       	std	Y+54, r25	; 0x36
    2ef8:	af ab       	std	Y+55, r26	; 0x37
    2efa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	6d a9       	ldd	r22, Y+53	; 0x35
    2efe:	7e a9       	ldd	r23, Y+54	; 0x36
    2f00:	8f a9       	ldd	r24, Y+55	; 0x37
    2f02:	98 ad       	ldd	r25, Y+56	; 0x38
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	89 ab       	std	Y+49, r24	; 0x31
    2f16:	9a ab       	std	Y+50, r25	; 0x32
    2f18:	ab ab       	std	Y+51, r26	; 0x33
    2f1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f20:	8b a9       	ldd	r24, Y+51	; 0x33
    2f22:	9c a9       	ldd	r25, Y+52	; 0x34
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <Door+0x506>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	98 ab       	std	Y+48, r25	; 0x30
    2f3a:	8f a7       	std	Y+47, r24	; 0x2f
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <Door+0x584>
	else if (__tmp > 65535)
    2f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f40:	7a a9       	ldd	r23, Y+50	; 0x32
    2f42:	8b a9       	ldd	r24, Y+51	; 0x33
    2f44:	9c a9       	ldd	r25, Y+52	; 0x34
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <Door+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	6d a9       	ldd	r22, Y+53	; 0x35
    2f58:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	98 ab       	std	Y+48, r25	; 0x30
    2f7c:	8f a7       	std	Y+47, r24	; 0x2f
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <Door+0x566>
    2f80:	88 ec       	ldi	r24, 0xC8	; 200
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9e a7       	std	Y+46, r25	; 0x2e
    2f86:	8d a7       	std	Y+45, r24	; 0x2d
    2f88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <Door+0x554>
    2f90:	9e a7       	std	Y+46, r25	; 0x2e
    2f92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f96:	98 a9       	ldd	r25, Y+48	; 0x30
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	98 ab       	std	Y+48, r25	; 0x30
    2f9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <Door+0x548>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <Door+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    2faa:	7a a9       	ldd	r23, Y+50	; 0x32
    2fac:	8b a9       	ldd	r24, Y+51	; 0x33
    2fae:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	98 ab       	std	Y+48, r25	; 0x30
    2fba:	8f a7       	std	Y+47, r24	; 0x2f
    2fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc0:	9c a7       	std	Y+44, r25	; 0x2c
    2fc2:	8b a7       	std	Y+43, r24	; 0x2b
    2fc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <Door+0x590>
    2fcc:	9c a7       	std	Y+44, r25	; 0x2c
    2fce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	LCD_goToRowColumn(2,4);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	64 e0       	ldi	r22, 0x04	; 4
    2fd4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
	if(check == '1') //password is correct
    2fd8:	80 91 23 01 	lds	r24, 0x0123
    2fdc:	81 33       	cpi	r24, 0x31	; 49
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <Door+0x5aa>
    2fe0:	d3 c0       	rjmp	.+422    	; 0x3188 <Door+0x750>
	{
		LCD_displayString("CORRECT!");
    2fe2:	83 ec       	ldi	r24, 0xC3	; 195
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	aa ef       	ldi	r26, 0xFA	; 250
    2ff0:	b3 e4       	ldi	r27, 0x43	; 67
    2ff2:	8f a3       	std	Y+39, r24	; 0x27
    2ff4:	98 a7       	std	Y+40, r25	; 0x28
    2ff6:	a9 a7       	std	Y+41, r26	; 0x29
    2ff8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6f a1       	ldd	r22, Y+39	; 0x27
    2ffc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ffe:	89 a5       	ldd	r24, Y+41	; 0x29
    3000:	9a a5       	ldd	r25, Y+42	; 0x2a
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8b a3       	std	Y+35, r24	; 0x23
    3014:	9c a3       	std	Y+36, r25	; 0x24
    3016:	ad a3       	std	Y+37, r26	; 0x25
    3018:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    301a:	6b a1       	ldd	r22, Y+35	; 0x23
    301c:	7c a1       	ldd	r23, Y+36	; 0x24
    301e:	8d a1       	ldd	r24, Y+37	; 0x25
    3020:	9e a1       	ldd	r25, Y+38	; 0x26
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <Door+0x604>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9a a3       	std	Y+34, r25	; 0x22
    3038:	89 a3       	std	Y+33, r24	; 0x21
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <Door+0x682>
	else if (__tmp > 65535)
    303c:	6b a1       	ldd	r22, Y+35	; 0x23
    303e:	7c a1       	ldd	r23, Y+36	; 0x24
    3040:	8d a1       	ldd	r24, Y+37	; 0x25
    3042:	9e a1       	ldd	r25, Y+38	; 0x26
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <Door+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6f a1       	ldd	r22, Y+39	; 0x27
    3056:	78 a5       	ldd	r23, Y+40	; 0x28
    3058:	89 a5       	ldd	r24, Y+41	; 0x29
    305a:	9a a5       	ldd	r25, Y+42	; 0x2a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9a a3       	std	Y+34, r25	; 0x22
    307a:	89 a3       	std	Y+33, r24	; 0x21
    307c:	0f c0       	rjmp	.+30     	; 0x309c <Door+0x664>
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	98 a3       	std	Y+32, r25	; 0x20
    3084:	8f 8f       	std	Y+31, r24	; 0x1f
    3086:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3088:	98 a1       	ldd	r25, Y+32	; 0x20
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <Door+0x652>
    308e:	98 a3       	std	Y+32, r25	; 0x20
    3090:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	89 a1       	ldd	r24, Y+33	; 0x21
    3094:	9a a1       	ldd	r25, Y+34	; 0x22
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	9a a3       	std	Y+34, r25	; 0x22
    309a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	89 a1       	ldd	r24, Y+33	; 0x21
    309e:	9a a1       	ldd	r25, Y+34	; 0x22
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <Door+0x646>
    30a4:	14 c0       	rjmp	.+40     	; 0x30ce <Door+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9a a3       	std	Y+34, r25	; 0x22
    30b8:	89 a3       	std	Y+33, r24	; 0x21
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	9a a1       	ldd	r25, Y+34	; 0x22
    30be:	9e 8f       	std	Y+30, r25	; 0x1e
    30c0:	8d 8f       	std	Y+29, r24	; 0x1d
    30c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <Door+0x68e>
    30ca:	9e 8f       	std	Y+30, r25	; 0x1e
    30cc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		Timer1_init(&config2);
    30ce:	83 e1       	ldi	r24, 0x13	; 19
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <Timer1_init>
		LCD_clearScreen();
    30d6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <Door+0x6b4>
		while(seconds >= 0 && seconds <= 15) // door is opening
		{
			LCD_goToRowColumn(2,0);
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
			LCD_displayString("Door is Opening");
    30e4:	8c ec       	ldi	r24, 0xCC	; 204
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
	{
		LCD_displayString("CORRECT!");
		_delay_ms(500);
		Timer1_init(&config2);
		LCD_clearScreen();
		while(seconds >= 0 && seconds <= 15) // door is opening
    30ec:	80 91 1d 01 	lds	r24, 0x011D
    30f0:	90 91 1e 01 	lds	r25, 0x011E
    30f4:	99 23       	and	r25, r25
    30f6:	3c f0       	brlt	.+14     	; 0x3106 <Door+0x6ce>
    30f8:	80 91 1d 01 	lds	r24, 0x011D
    30fc:	90 91 1e 01 	lds	r25, 0x011E
    3100:	80 31       	cpi	r24, 0x10	; 16
    3102:	91 05       	cpc	r25, r1
    3104:	5c f3       	brlt	.-42     	; 0x30dc <Door+0x6a4>
		{
			LCD_goToRowColumn(2,0);
			LCD_displayString("Door is Opening");
		}
		LCD_clearScreen();
    3106:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
    310a:	08 c0       	rjmp	.+16     	; 0x311c <Door+0x6e4>
		while(seconds >= 16 && seconds <= 18)
		{
			LCD_goToRowColumn(2,0);
    310c:	82 e0       	ldi	r24, 0x02	; 2
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
			LCD_displayString("Door is Opened");
    3114:	8c ed       	ldi	r24, 0xDC	; 220
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
		{
			LCD_goToRowColumn(2,0);
			LCD_displayString("Door is Opening");
		}
		LCD_clearScreen();
		while(seconds >= 16 && seconds <= 18)
    311c:	80 91 1d 01 	lds	r24, 0x011D
    3120:	90 91 1e 01 	lds	r25, 0x011E
    3124:	80 31       	cpi	r24, 0x10	; 16
    3126:	91 05       	cpc	r25, r1
    3128:	3c f0       	brlt	.+14     	; 0x3138 <Door+0x700>
    312a:	80 91 1d 01 	lds	r24, 0x011D
    312e:	90 91 1e 01 	lds	r25, 0x011E
    3132:	83 31       	cpi	r24, 0x13	; 19
    3134:	91 05       	cpc	r25, r1
    3136:	54 f3       	brlt	.-44     	; 0x310c <Door+0x6d4>
		{
			LCD_goToRowColumn(2,0);
			LCD_displayString("Door is Opened");
		}
		LCD_clearScreen();
    3138:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
    313c:	08 c0       	rjmp	.+16     	; 0x314e <Door+0x716>
		while(seconds >= 19 && seconds <= 33) //door is closing
		{
			LCD_goToRowColumn(2,0);
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_goToRowColumn>
			LCD_displayString("Door is Closing");
    3146:	8b ee       	ldi	r24, 0xEB	; 235
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
		{
			LCD_goToRowColumn(2,0);
			LCD_displayString("Door is Opened");
		}
		LCD_clearScreen();
		while(seconds >= 19 && seconds <= 33) //door is closing
    314e:	80 91 1d 01 	lds	r24, 0x011D
    3152:	90 91 1e 01 	lds	r25, 0x011E
    3156:	83 31       	cpi	r24, 0x13	; 19
    3158:	91 05       	cpc	r25, r1
    315a:	3c f0       	brlt	.+14     	; 0x316a <Door+0x732>
    315c:	80 91 1d 01 	lds	r24, 0x011D
    3160:	90 91 1e 01 	lds	r25, 0x011E
    3164:	82 32       	cpi	r24, 0x22	; 34
    3166:	91 05       	cpc	r25, r1
    3168:	54 f3       	brlt	.-44     	; 0x313e <Door+0x706>
		{
			LCD_goToRowColumn(2,0);
			LCD_displayString("Door is Closing");
		}
		if (seconds == 34 )
    316a:	80 91 1d 01 	lds	r24, 0x011D
    316e:	90 91 1e 01 	lds	r25, 0x011E
    3172:	82 32       	cpi	r24, 0x22	; 34
    3174:	91 05       	cpc	r25, r1
    3176:	09 f0       	breq	.+2      	; 0x317a <Door+0x742>
    3178:	9e c0       	rjmp	.+316    	; 0x32b6 <Door+0x87e>
		{
			seconds = 0;
    317a:	10 92 1e 01 	sts	0x011E, r1
    317e:	10 92 1d 01 	sts	0x011D, r1
			Timer1_deinit();
    3182:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_deinit>
    3186:	97 c0       	rjmp	.+302    	; 0x32b6 <Door+0x87e>
		}
	}
	else if (check == '0')// the user entered a wrong password
    3188:	80 91 23 01 	lds	r24, 0x0123
    318c:	80 33       	cpi	r24, 0x30	; 48
    318e:	09 f0       	breq	.+2      	; 0x3192 <Door+0x75a>
    3190:	79 c0       	rjmp	.+242    	; 0x3284 <Door+0x84c>
	{
		LCD_displayString("WRONG!!");
    3192:	8b ef       	ldi	r24, 0xFB	; 251
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	aa ef       	ldi	r26, 0xFA	; 250
    31a0:	b3 e4       	ldi	r27, 0x43	; 67
    31a2:	89 8f       	std	Y+25, r24	; 0x19
    31a4:	9a 8f       	std	Y+26, r25	; 0x1a
    31a6:	ab 8f       	std	Y+27, r26	; 0x1b
    31a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	69 8d       	ldd	r22, Y+25	; 0x19
    31ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8d 8b       	std	Y+21, r24	; 0x15
    31c4:	9e 8b       	std	Y+22, r25	; 0x16
    31c6:	af 8b       	std	Y+23, r26	; 0x17
    31c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ca:	6d 89       	ldd	r22, Y+21	; 0x15
    31cc:	7e 89       	ldd	r23, Y+22	; 0x16
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	98 8d       	ldd	r25, Y+24	; 0x18
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	2c f4       	brge	.+10     	; 0x31ec <Door+0x7b4>
		__ticks = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9c 8b       	std	Y+20, r25	; 0x14
    31e8:	8b 8b       	std	Y+19, r24	; 0x13
    31ea:	3f c0       	rjmp	.+126    	; 0x326a <Door+0x832>
	else if (__tmp > 65535)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	57 e4       	ldi	r21, 0x47	; 71
    31fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	4c f5       	brge	.+82     	; 0x3256 <Door+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e2       	ldi	r20, 0x20	; 32
    3212:	51 e4       	ldi	r21, 0x41	; 65
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9c 8b       	std	Y+20, r25	; 0x14
    322a:	8b 8b       	std	Y+19, r24	; 0x13
    322c:	0f c0       	rjmp	.+30     	; 0x324c <Door+0x814>
    322e:	88 ec       	ldi	r24, 0xC8	; 200
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9a 8b       	std	Y+18, r25	; 0x12
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	9a 89       	ldd	r25, Y+18	; 0x12
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <Door+0x802>
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	9c 8b       	std	Y+20, r25	; 0x14
    324a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324c:	8b 89       	ldd	r24, Y+19	; 0x13
    324e:	9c 89       	ldd	r25, Y+20	; 0x14
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	69 f7       	brne	.-38     	; 0x322e <Door+0x7f6>
    3254:	14 c0       	rjmp	.+40     	; 0x327e <Door+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	98 8b       	std	Y+16, r25	; 0x10
    3270:	8f 87       	std	Y+15, r24	; 0x0f
    3272:	8f 85       	ldd	r24, Y+15	; 0x0f
    3274:	98 89       	ldd	r25, Y+16	; 0x10
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <Door+0x83e>
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		Door();
    327e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Door>
    3282:	19 c0       	rjmp	.+50     	; 0x32b6 <Door+0x87e>
	}
	else if(check == '3') //the user entered the wrong password for three times
    3284:	80 91 23 01 	lds	r24, 0x0123
    3288:	83 33       	cpi	r24, 0x33	; 51
    328a:	a9 f4       	brne	.+42     	; 0x32b6 <Door+0x87e>
	{
		LCD_displayString("ERROR!!");
    328c:	83 e0       	ldi	r24, 0x03	; 3
    328e:	91 e0       	ldi	r25, 0x01	; 1
    3290:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_displayString>
		Timer1_init(&config2);
    3294:	83 e1       	ldi	r24, 0x13	; 19
    3296:	91 e0       	ldi	r25, 0x01	; 1
    3298:	0e 94 76 1b 	call	0x36ec	; 0x36ec <Timer1_init>
		while (seconds != 60);
    329c:	80 91 1d 01 	lds	r24, 0x011D
    32a0:	90 91 1e 01 	lds	r25, 0x011E
    32a4:	8c 33       	cpi	r24, 0x3C	; 60
    32a6:	91 05       	cpc	r25, r1
    32a8:	c9 f7       	brne	.-14     	; 0x329c <Door+0x864>
		seconds = 0;
    32aa:	10 92 1e 01 	sts	0x011E, r1
    32ae:	10 92 1d 01 	sts	0x011D, r1
		Timer1_deinit();
    32b2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_deinit>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	aa ef       	ldi	r26, 0xFA	; 250
    32bc:	b3 e4       	ldi	r27, 0x43	; 67
    32be:	8b 87       	std	Y+11, r24	; 0x0b
    32c0:	9c 87       	std	Y+12, r25	; 0x0c
    32c2:	ad 87       	std	Y+13, r26	; 0x0d
    32c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    32cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a ef       	ldi	r20, 0xFA	; 250
    32d4:	54 e4       	ldi	r21, 0x44	; 68
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	8f 83       	std	Y+7, r24	; 0x07
    32e0:	98 87       	std	Y+8, r25	; 0x08
    32e2:	a9 87       	std	Y+9, r26	; 0x09
    32e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fa:	88 23       	and	r24, r24
    32fc:	2c f4       	brge	.+10     	; 0x3308 <Door+0x8d0>
		__ticks = 1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	3f c0       	rjmp	.+126    	; 0x3386 <Door+0x94e>
	else if (__tmp > 65535)
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	78 85       	ldd	r23, Y+8	; 0x08
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	4c f5       	brge	.+82     	; 0x3372 <Door+0x93a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3320:	6b 85       	ldd	r22, Y+11	; 0x0b
    3322:	7c 85       	ldd	r23, Y+12	; 0x0c
    3324:	8d 85       	ldd	r24, Y+13	; 0x0d
    3326:	9e 85       	ldd	r25, Y+14	; 0x0e
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	9e 83       	std	Y+6, r25	; 0x06
    3346:	8d 83       	std	Y+5, r24	; 0x05
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <Door+0x930>
    334a:	88 ec       	ldi	r24, 0xC8	; 200
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9c 83       	std	Y+4, r25	; 0x04
    3350:	8b 83       	std	Y+3, r24	; 0x03
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <Door+0x91e>
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	69 f7       	brne	.-38     	; 0x334a <Door+0x912>
    3370:	14 c0       	rjmp	.+40     	; 0x339a <Door+0x962>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	9a 83       	std	Y+2, r25	; 0x02
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	9a 81       	ldd	r25, Y+2	; 0x02
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <Door+0x95a>
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500);
	LCD_clearScreen();
    339a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
}
    339e:	ca 59       	subi	r28, 0x9A	; 154
    33a0:	df 4f       	sbci	r29, 0xFF	; 255
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	08 95       	ret

000033b6 <Change_Password>:

void Change_Password()
{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	6e 97       	sbiw	r28, 0x1e	; 30
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    33ca:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_clearScreen>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	aa e7       	ldi	r26, 0x7A	; 122
    33d4:	b3 e4       	ldi	r27, 0x43	; 67
    33d6:	89 8f       	std	Y+25, r24	; 0x19
    33d8:	9a 8f       	std	Y+26, r25	; 0x1a
    33da:	ab 8f       	std	Y+27, r26	; 0x1b
    33dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	69 8d       	ldd	r22, Y+25	; 0x19
    33e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8d 8b       	std	Y+21, r24	; 0x15
    33f8:	9e 8b       	std	Y+22, r25	; 0x16
    33fa:	af 8b       	std	Y+23, r26	; 0x17
    33fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3400:	7e 89       	ldd	r23, Y+22	; 0x16
    3402:	8f 89       	ldd	r24, Y+23	; 0x17
    3404:	98 8d       	ldd	r25, Y+24	; 0x18
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <Change_Password+0x6a>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
    341e:	3f c0       	rjmp	.+126    	; 0x349e <Change_Password+0xe8>
	else if (__tmp > 65535)
    3420:	6d 89       	ldd	r22, Y+21	; 0x15
    3422:	7e 89       	ldd	r23, Y+22	; 0x16
    3424:	8f 89       	ldd	r24, Y+23	; 0x17
    3426:	98 8d       	ldd	r25, Y+24	; 0x18
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	4c f5       	brge	.+82     	; 0x348a <Change_Password+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3438:	69 8d       	ldd	r22, Y+25	; 0x19
    343a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    343c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9c 8b       	std	Y+20, r25	; 0x14
    345e:	8b 8b       	std	Y+19, r24	; 0x13
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <Change_Password+0xca>
    3462:	88 ec       	ldi	r24, 0xC8	; 200
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9a 8b       	std	Y+18, r25	; 0x12
    3468:	89 8b       	std	Y+17, r24	; 0x11
    346a:	89 89       	ldd	r24, Y+17	; 0x11
    346c:	9a 89       	ldd	r25, Y+18	; 0x12
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <Change_Password+0xb8>
    3472:	9a 8b       	std	Y+18, r25	; 0x12
    3474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9c 8b       	std	Y+20, r25	; 0x14
    347e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3480:	8b 89       	ldd	r24, Y+19	; 0x13
    3482:	9c 89       	ldd	r25, Y+20	; 0x14
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	69 f7       	brne	.-38     	; 0x3462 <Change_Password+0xac>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <Change_Password+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	6d 89       	ldd	r22, Y+21	; 0x15
    348c:	7e 89       	ldd	r23, Y+22	; 0x16
    348e:	8f 89       	ldd	r24, Y+23	; 0x17
    3490:	98 8d       	ldd	r25, Y+24	; 0x18
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9c 8b       	std	Y+20, r25	; 0x14
    349c:	8b 8b       	std	Y+19, r24	; 0x13
    349e:	8b 89       	ldd	r24, Y+19	; 0x13
    34a0:	9c 89       	ldd	r25, Y+20	; 0x14
    34a2:	98 8b       	std	Y+16, r25	; 0x10
    34a4:	8f 87       	std	Y+15, r24	; 0x0f
    34a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a8:	98 89       	ldd	r25, Y+16	; 0x10
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <Change_Password+0xf4>
    34ae:	98 8b       	std	Y+16, r25	; 0x10
    34b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	Set_Password();
    34b2:	0e 94 6f 10 	call	0x20de	; 0x20de <Set_Password>
	for(int i = 0 ; i < 5 ; i++)
    34b6:	1e 8e       	std	Y+30, r1	; 0x1e
    34b8:	1d 8e       	std	Y+29, r1	; 0x1d
    34ba:	7f c0       	rjmp	.+254    	; 0x35ba <Change_Password+0x204>
	{
		UART_sendByte(str1[i]);
    34bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c0:	fc 01       	movw	r30, r24
    34c2:	ec 5d       	subi	r30, 0xDC	; 220
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	80 81       	ld	r24, Z
    34c8:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a8 ec       	ldi	r26, 0xC8	; 200
    34d2:	b2 e4       	ldi	r27, 0x42	; 66
    34d4:	8b 87       	std	Y+11, r24	; 0x0b
    34d6:	9c 87       	std	Y+12, r25	; 0x0c
    34d8:	ad 87       	std	Y+13, r26	; 0x0d
    34da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a ef       	ldi	r20, 0xFA	; 250
    34ea:	54 e4       	ldi	r21, 0x44	; 68
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8f 83       	std	Y+7, r24	; 0x07
    34f6:	98 87       	std	Y+8, r25	; 0x08
    34f8:	a9 87       	std	Y+9, r26	; 0x09
    34fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <Change_Password+0x168>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	3f c0       	rjmp	.+126    	; 0x359c <Change_Password+0x1e6>
	else if (__tmp > 65535)
    351e:	6f 81       	ldd	r22, Y+7	; 0x07
    3520:	78 85       	ldd	r23, Y+8	; 0x08
    3522:	89 85       	ldd	r24, Y+9	; 0x09
    3524:	9a 85       	ldd	r25, Y+10	; 0x0a
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <Change_Password+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	0f c0       	rjmp	.+30     	; 0x357e <Change_Password+0x1c8>
    3560:	88 ec       	ldi	r24, 0xC8	; 200
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <Change_Password+0x1b6>
    3570:	9c 83       	std	Y+4, r25	; 0x04
    3572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <Change_Password+0x1aa>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <Change_Password+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e 83       	std	Y+6, r25	; 0x06
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <Change_Password+0x1f2>
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	89 83       	std	Y+1, r24	; 0x01
void Change_Password()
{
	LCD_clearScreen();
	_delay_ms(250);
	Set_Password();
	for(int i = 0 ; i < 5 ; i++)
    35b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	9e 8f       	std	Y+30, r25	; 0x1e
    35b8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35be:	85 30       	cpi	r24, 0x05	; 5
    35c0:	91 05       	cpc	r25, r1
    35c2:	0c f4       	brge	.+2      	; 0x35c6 <Change_Password+0x210>
    35c4:	7b cf       	rjmp	.-266    	; 0x34bc <Change_Password+0x106>
	{
		UART_sendByte(str1[i]);
		_delay_ms(100);
	}
}
    35c6:	6e 96       	adiw	r28, 0x1e	; 30
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <Door_opening>:

void Door_opening(void)
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
	count++;
    35e0:	80 91 1b 01 	lds	r24, 0x011B
    35e4:	90 91 1c 01 	lds	r25, 0x011C
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	90 93 1c 01 	sts	0x011C, r25
    35ee:	80 93 1b 01 	sts	0x011B, r24
	if (count == 123 ) // (8000000 / 65500) = 123
    35f2:	80 91 1b 01 	lds	r24, 0x011B
    35f6:	90 91 1c 01 	lds	r25, 0x011C
    35fa:	8b 37       	cpi	r24, 0x7B	; 123
    35fc:	91 05       	cpc	r25, r1
    35fe:	69 f4       	brne	.+26     	; 0x361a <Door_opening+0x42>
	{
		seconds++;
    3600:	80 91 1d 01 	lds	r24, 0x011D
    3604:	90 91 1e 01 	lds	r25, 0x011E
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	90 93 1e 01 	sts	0x011E, r25
    360e:	80 93 1d 01 	sts	0x011D, r24
		count = 0;
    3612:	10 92 1c 01 	sts	0x011C, r1
    3616:	10 92 1b 01 	sts	0x011B, r1
	}
}
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <__vector_8>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    3620:	1f 92       	push	r1
    3622:	0f 92       	push	r0
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	0f 92       	push	r0
    3628:	11 24       	eor	r1, r1
    362a:	2f 93       	push	r18
    362c:	3f 93       	push	r19
    362e:	4f 93       	push	r20
    3630:	5f 93       	push	r21
    3632:	6f 93       	push	r22
    3634:	7f 93       	push	r23
    3636:	8f 93       	push	r24
    3638:	9f 93       	push	r25
    363a:	af 93       	push	r26
    363c:	bf 93       	push	r27
    363e:	ef 93       	push	r30
    3640:	ff 93       	push	r31
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    364a:	80 91 21 01 	lds	r24, 0x0121
    364e:	90 91 22 01 	lds	r25, 0x0122
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	29 f0       	breq	.+10     	; 0x3660 <__vector_8+0x40>
	{
		(*g_callBackPtr)();
    3656:	e0 91 21 01 	lds	r30, 0x0121
    365a:	f0 91 22 01 	lds	r31, 0x0122
    365e:	09 95       	icall
	}
}
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	bf 91       	pop	r27
    366a:	af 91       	pop	r26
    366c:	9f 91       	pop	r25
    366e:	8f 91       	pop	r24
    3670:	7f 91       	pop	r23
    3672:	6f 91       	pop	r22
    3674:	5f 91       	pop	r21
    3676:	4f 91       	pop	r20
    3678:	3f 91       	pop	r19
    367a:	2f 91       	pop	r18
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	0f 90       	pop	r0
    3682:	1f 90       	pop	r1
    3684:	18 95       	reti

00003686 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    3686:	1f 92       	push	r1
    3688:	0f 92       	push	r0
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	0f 92       	push	r0
    368e:	11 24       	eor	r1, r1
    3690:	2f 93       	push	r18
    3692:	3f 93       	push	r19
    3694:	4f 93       	push	r20
    3696:	5f 93       	push	r21
    3698:	6f 93       	push	r22
    369a:	7f 93       	push	r23
    369c:	8f 93       	push	r24
    369e:	9f 93       	push	r25
    36a0:	af 93       	push	r26
    36a2:	bf 93       	push	r27
    36a4:	ef 93       	push	r30
    36a6:	ff 93       	push	r31
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    36b0:	80 91 21 01 	lds	r24, 0x0121
    36b4:	90 91 22 01 	lds	r25, 0x0122
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	29 f0       	breq	.+10     	; 0x36c6 <__vector_6+0x40>
	{
		(*g_callBackPtr)();
    36bc:	e0 91 21 01 	lds	r30, 0x0121
    36c0:	f0 91 22 01 	lds	r31, 0x0122
    36c4:	09 95       	icall
	}
}
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	ff 91       	pop	r31
    36cc:	ef 91       	pop	r30
    36ce:	bf 91       	pop	r27
    36d0:	af 91       	pop	r26
    36d2:	9f 91       	pop	r25
    36d4:	8f 91       	pop	r24
    36d6:	7f 91       	pop	r23
    36d8:	6f 91       	pop	r22
    36da:	5f 91       	pop	r21
    36dc:	4f 91       	pop	r20
    36de:	3f 91       	pop	r19
    36e0:	2f 91       	pop	r18
    36e2:	0f 90       	pop	r0
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	0f 90       	pop	r0
    36e8:	1f 90       	pop	r1
    36ea:	18 95       	reti

000036ec <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer_ConfigType * Config_Ptr)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <Timer1_init+0x6>
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
    36fa:	af e5       	ldi	r26, 0x5F	; 95
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	ef e5       	ldi	r30, 0x5F	; 95
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	80 68       	ori	r24, 0x80	; 128
    3706:	8c 93       	st	X, r24
	TCCR1A = (1<<FOC1A);
    3708:	ef e4       	ldi	r30, 0x4F	; 79
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	88 e0       	ldi	r24, 0x08	; 8
    370e:	80 83       	st	Z, r24
	TCCR1B |= (TCCR1B & 0xF8) | ((Config_Ptr -> clock)); //zabat el clock bta3 el timer
    3710:	ae e4       	ldi	r26, 0x4E	; 78
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	ee e4       	ldi	r30, 0x4E	; 78
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	28 2f       	mov	r18, r24
    371c:	ee e4       	ldi	r30, 0x4E	; 78
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	98 2f       	mov	r25, r24
    3724:	98 7f       	andi	r25, 0xF8	; 248
    3726:	e9 81       	ldd	r30, Y+1	; 0x01
    3728:	fa 81       	ldd	r31, Y+2	; 0x02
    372a:	80 81       	ld	r24, Z
    372c:	89 2b       	or	r24, r25
    372e:	82 2b       	or	r24, r18
    3730:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xF7) | ((Config_Ptr -> mode) << 3); // mode
    3732:	ae e4       	ldi	r26, 0x4E	; 78
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	ee e4       	ldi	r30, 0x4E	; 78
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	38 2f       	mov	r19, r24
    373e:	ee e4       	ldi	r30, 0x4E	; 78
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	28 2f       	mov	r18, r24
    3746:	27 7f       	andi	r18, 0xF7	; 247
    3748:	e9 81       	ldd	r30, Y+1	; 0x01
    374a:	fa 81       	ldd	r31, Y+2	; 0x02
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	88 2f       	mov	r24, r24
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	88 0f       	add	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	82 2b       	or	r24, r18
    3760:	83 2b       	or	r24, r19
    3762:	8c 93       	st	X, r24
	// condition for checking the mode of the timer for enabling the Timer interrupt mask register (TIMSK)
	if((Config_Ptr -> mode) == CTC)
    3764:	e9 81       	ldd	r30, Y+1	; 0x01
    3766:	fa 81       	ldd	r31, Y+2	; 0x02
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	29 f4       	brne	.+10     	; 0x3778 <Timer1_init+0x8c>
	{
		TIMSK = (1<<OCIE1A);
    376e:	e9 e5       	ldi	r30, 0x59	; 89
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 e1       	ldi	r24, 0x10	; 16
    3774:	80 83       	st	Z, r24
    3776:	09 c0       	rjmp	.+18     	; 0x378a <Timer1_init+0x9e>
	}
	else if((Config_Ptr -> mode) == Normal)
    3778:	e9 81       	ldd	r30, Y+1	; 0x01
    377a:	fa 81       	ldd	r31, Y+2	; 0x02
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	88 23       	and	r24, r24
    3780:	21 f4       	brne	.+8      	; 0x378a <Timer1_init+0x9e>
	{
		TIMSK = (1<<TOIE1);
    3782:	e9 e5       	ldi	r30, 0x59	; 89
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	84 e0       	ldi	r24, 0x04	; 4
    3788:	80 83       	st	Z, r24
	}
	TCNT1 = (Config_Ptr -> initial); // initial value
    378a:	ac e4       	ldi	r26, 0x4C	; 76
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e9 81       	ldd	r30, Y+1	; 0x01
    3790:	fa 81       	ldd	r31, Y+2	; 0x02
    3792:	83 81       	ldd	r24, Z+3	; 0x03
    3794:	94 81       	ldd	r25, Z+4	; 0x04
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	9c 93       	st	X, r25
    379a:	8e 93       	st	-X, r24
	//condition for checking if the mode is compare mode it will insert Final value in Output compare register 1A
	if((Config_Ptr -> mode) == CTC )
    379c:	e9 81       	ldd	r30, Y+1	; 0x01
    379e:	fa 81       	ldd	r31, Y+2	; 0x02
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	49 f4       	brne	.+18     	; 0x37b8 <Timer1_init+0xcc>
	{
		OCR1A = (Config_Ptr -> final);
    37a6:	aa e4       	ldi	r26, 0x4A	; 74
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	e9 81       	ldd	r30, Y+1	; 0x01
    37ac:	fa 81       	ldd	r31, Y+2	; 0x02
    37ae:	85 81       	ldd	r24, Z+5	; 0x05
    37b0:	96 81       	ldd	r25, Z+6	; 0x06
    37b2:	11 96       	adiw	r26, 0x01	; 1
    37b4:	9c 93       	st	X, r25
    37b6:	8e 93       	st	-X, r24
	}
}
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <Timer1_setCallBack+0x6>
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	90 93 22 01 	sts	0x0122, r25
    37d8:	80 93 21 01 	sts	0x0121, r24
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <Timer1_deinit>:

void Timer1_deinit()
{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    37ee:	ef e4       	ldi	r30, 0x4F	; 79
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	10 82       	st	Z, r1
	TCCR1B = 0;
    37f4:	ee e4       	ldi	r30, 0x4E	; 78
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	10 82       	st	Z, r1
	TCNT1 = 0;
    37fa:	ec e4       	ldi	r30, 0x4C	; 76
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	11 82       	std	Z+1, r1	; 0x01
    3800:	10 82       	st	Z, r1
	OCR1A = 0;
    3802:	ea e4       	ldi	r30, 0x4A	; 74
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	11 82       	std	Z+1, r1	; 0x01
    3808:	10 82       	st	Z, r1
	TIMSK = 0;
    380a:	e9 e5       	ldi	r30, 0x59	; 89
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	10 82       	st	Z, r1
}
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	00 d0       	rcall	.+0      	; 0x381c <UART_init+0x6>
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01
	UCSRA |= (1<<U2X);
    3824:	ab e2       	ldi	r26, 0x2B	; 43
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	eb e2       	ldi	r30, 0x2B	; 43
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	82 60       	ori	r24, 0x02	; 2
    3830:	8c 93       	st	X, r24
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    3832:	aa e2       	ldi	r26, 0x2A	; 42
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	ea e2       	ldi	r30, 0x2A	; 42
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	88 61       	ori	r24, 0x18	; 24
    383e:	8c 93       	st	X, r24
	UCSRC |= (1<<URSEL);
    3840:	a0 e4       	ldi	r26, 0x40	; 64
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e0 e4       	ldi	r30, 0x40	; 64
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	80 68       	ori	r24, 0x80	; 128
    384c:	8c 93       	st	X, r24
	UCSRB |= (UCSRB & 0xFB) | (((Config_Ptr -> size)>>2) << 2); // size if the selected bit size is 9 bits
    384e:	aa e2       	ldi	r26, 0x2A	; 42
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ea e2       	ldi	r30, 0x2A	; 42
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	38 2f       	mov	r19, r24
    385a:	ea e2       	ldi	r30, 0x2A	; 42
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	28 2f       	mov	r18, r24
    3862:	2b 7f       	andi	r18, 0xFB	; 251
    3864:	e9 81       	ldd	r30, Y+1	; 0x01
    3866:	fa 81       	ldd	r31, Y+2	; 0x02
    3868:	80 81       	ld	r24, Z
    386a:	86 95       	lsr	r24
    386c:	86 95       	lsr	r24
    386e:	88 2f       	mov	r24, r24
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	88 0f       	add	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	82 2b       	or	r24, r18
    387c:	83 2b       	or	r24, r19
    387e:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | ((Config_Ptr -> size) << 1); // size from 5 to 7 bits
    3880:	a0 e4       	ldi	r26, 0x40	; 64
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e0 e4       	ldi	r30, 0x40	; 64
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	38 2f       	mov	r19, r24
    388c:	e0 e4       	ldi	r30, 0x40	; 64
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	28 2f       	mov	r18, r24
    3894:	29 7f       	andi	r18, 0xF9	; 249
    3896:	e9 81       	ldd	r30, Y+1	; 0x01
    3898:	fa 81       	ldd	r31, Y+2	; 0x02
    389a:	80 81       	ld	r24, Z
    389c:	88 2f       	mov	r24, r24
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	82 2b       	or	r24, r18
    38a6:	83 2b       	or	r24, r19
    38a8:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xBF) | ((Config_Ptr -> mode) << 6); // Mode Select
    38aa:	a0 e4       	ldi	r26, 0x40	; 64
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e0 e4       	ldi	r30, 0x40	; 64
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	38 2f       	mov	r19, r24
    38b6:	e0 e4       	ldi	r30, 0x40	; 64
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	28 2f       	mov	r18, r24
    38be:	2f 7b       	andi	r18, 0xBF	; 191
    38c0:	e9 81       	ldd	r30, Y+1	; 0x01
    38c2:	fa 81       	ldd	r31, Y+2	; 0x02
    38c4:	81 81       	ldd	r24, Z+1	; 0x01
    38c6:	88 2f       	mov	r24, r24
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	00 24       	eor	r0, r0
    38cc:	96 95       	lsr	r25
    38ce:	87 95       	ror	r24
    38d0:	07 94       	ror	r0
    38d2:	96 95       	lsr	r25
    38d4:	87 95       	ror	r24
    38d6:	07 94       	ror	r0
    38d8:	98 2f       	mov	r25, r24
    38da:	80 2d       	mov	r24, r0
    38dc:	82 2b       	or	r24, r18
    38de:	83 2b       	or	r24, r19
    38e0:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | ((Config_Ptr -> parity) << 4); // parity Select
    38e2:	a0 e4       	ldi	r26, 0x40	; 64
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	e0 e4       	ldi	r30, 0x40	; 64
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	80 81       	ld	r24, Z
    38ec:	38 2f       	mov	r19, r24
    38ee:	e0 e4       	ldi	r30, 0x40	; 64
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	28 2f       	mov	r18, r24
    38f6:	2f 7c       	andi	r18, 0xCF	; 207
    38f8:	e9 81       	ldd	r30, Y+1	; 0x01
    38fa:	fa 81       	ldd	r31, Y+2	; 0x02
    38fc:	82 81       	ldd	r24, Z+2	; 0x02
    38fe:	88 2f       	mov	r24, r24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	82 95       	swap	r24
    3904:	92 95       	swap	r25
    3906:	90 7f       	andi	r25, 0xF0	; 240
    3908:	98 27       	eor	r25, r24
    390a:	80 7f       	andi	r24, 0xF0	; 240
    390c:	98 27       	eor	r25, r24
    390e:	82 2b       	or	r24, r18
    3910:	83 2b       	or	r24, r19
    3912:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | ((Config_Ptr -> stopbit) << 3); //stop bit select
    3914:	a0 e4       	ldi	r26, 0x40	; 64
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	e0 e4       	ldi	r30, 0x40	; 64
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	38 2f       	mov	r19, r24
    3920:	e0 e4       	ldi	r30, 0x40	; 64
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	28 2f       	mov	r18, r24
    3928:	27 7f       	andi	r18, 0xF7	; 247
    392a:	e9 81       	ldd	r30, Y+1	; 0x01
    392c:	fa 81       	ldd	r31, Y+2	; 0x02
    392e:	83 81       	ldd	r24, Z+3	; 0x03
    3930:	88 2f       	mov	r24, r24
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	88 0f       	add	r24, r24
    3936:	99 1f       	adc	r25, r25
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	82 2b       	or	r24, r18
    3942:	83 2b       	or	r24, r19
    3944:	8c 93       	st	X, r24
	UBRRH |= BAUD_PRESCALE>>8;
    3946:	a0 e4       	ldi	r26, 0x40	; 64
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e0 e4       	ldi	r30, 0x40	; 64
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8c 93       	st	X, r24
	UBRRL |= BAUD_PRESCALE;
    3952:	a9 e2       	ldi	r26, 0x29	; 41
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	e9 e2       	ldi	r30, 0x29	; 41
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	87 66       	ori	r24, 0x67	; 103
    395e:	8c 93       	st	X, r24
}
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	0f 92       	push	r0
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3976:	eb e2       	ldi	r30, 0x2B	; 43
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	88 2f       	mov	r24, r24
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	80 72       	andi	r24, 0x20	; 32
    3982:	90 70       	andi	r25, 0x00	; 0
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	b9 f3       	breq	.-18     	; 0x3976 <UART_sendByte+0xc>
	UDR = data;
    3988:	ec e2       	ldi	r30, 0x2C	; 44
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	80 83       	st	Z, r24
}
    3990:	0f 90       	pop	r0
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <UART_receiveByte>:
uint8 UART_receiveByte(void)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    39a0:	eb e2       	ldi	r30, 0x2B	; 43
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	88 23       	and	r24, r24
    39a8:	dc f7       	brge	.-10     	; 0x39a0 <UART_receiveByte+0x8>
	return UDR;
    39aa:	ec e2       	ldi	r30, 0x2C	; 44
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
}
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	08 95       	ret

000039b6 <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <UART_sendString+0x6>
    39bc:	00 d0       	rcall	.+0      	; 0x39be <UART_sendString+0x8>
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	9c 83       	std	Y+4, r25	; 0x04
    39c4:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    39c6:	1a 82       	std	Y+2, r1	; 0x02
    39c8:	19 82       	std	Y+1, r1	; 0x01
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    39cc:	29 81       	ldd	r18, Y+1	; 0x01
    39ce:	3a 81       	ldd	r19, Y+2	; 0x02
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	9c 81       	ldd	r25, Y+4	; 0x04
    39d4:	fc 01       	movw	r30, r24
    39d6:	e2 0f       	add	r30, r18
    39d8:	f3 1f       	adc	r31, r19
    39da:	80 81       	ld	r24, Z
    39dc:	0e 94 b5 1c 	call	0x396a	; 0x396a <UART_sendByte>
		i++;
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	01 96       	adiw	r24, 0x01	; 1
    39e6:	9a 83       	std	Y+2, r25	; 0x02
    39e8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void UART_sendString(const uint8 *Str)
{
	int i = 0;
	while(Str[i] != '\0')
    39ea:	29 81       	ldd	r18, Y+1	; 0x01
    39ec:	3a 81       	ldd	r19, Y+2	; 0x02
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	9c 81       	ldd	r25, Y+4	; 0x04
    39f2:	fc 01       	movw	r30, r24
    39f4:	e2 0f       	add	r30, r18
    39f6:	f3 1f       	adc	r31, r19
    39f8:	80 81       	ld	r24, Z
    39fa:	88 23       	and	r24, r24
    39fc:	39 f7       	brne	.-50     	; 0x39cc <UART_sendString+0x16>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <UART_receiveString>:
void UART_receiveString(uint8 *Str)
{
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	62 97       	sbiw	r28, 0x12	; 18
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	9a 8b       	std	Y+18, r25	; 0x12
    3a26:	89 8b       	std	Y+17, r24	; 0x11
	int i = 0;
    3a28:	18 8a       	std	Y+16, r1	; 0x10
    3a2a:	1f 86       	std	Y+15, r1	; 0x0f
	Str[i] = UART_receiveByte();
    3a2c:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a2e:	38 89       	ldd	r19, Y+16	; 0x10
    3a30:	89 89       	ldd	r24, Y+17	; 0x11
    3a32:	9a 89       	ldd	r25, Y+18	; 0x12
    3a34:	8c 01       	movw	r16, r24
    3a36:	02 0f       	add	r16, r18
    3a38:	13 1f       	adc	r17, r19
    3a3a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_receiveByte>
    3a3e:	f8 01       	movw	r30, r16
    3a40:	80 83       	st	Z, r24
    3a42:	82 c0       	rjmp	.+260    	; 0x3b48 <UART_receiveString+0x13c>
	while(Str[i] != '#')
	{
		Str[i] = UART_receiveByte();
    3a44:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a46:	38 89       	ldd	r19, Y+16	; 0x10
    3a48:	89 89       	ldd	r24, Y+17	; 0x11
    3a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a4c:	8c 01       	movw	r16, r24
    3a4e:	02 0f       	add	r16, r18
    3a50:	13 1f       	adc	r17, r19
    3a52:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_receiveByte>
    3a56:	f8 01       	movw	r30, r16
    3a58:	80 83       	st	Z, r24
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	a8 ec       	ldi	r26, 0xC8	; 200
    3a60:	b2 e4       	ldi	r27, 0x42	; 66
    3a62:	8b 87       	std	Y+11, r24	; 0x0b
    3a64:	9c 87       	std	Y+12, r25	; 0x0c
    3a66:	ad 87       	std	Y+13, r26	; 0x0d
    3a68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	4a ef       	ldi	r20, 0xFA	; 250
    3a78:	54 e4       	ldi	r21, 0x44	; 68
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	8f 83       	std	Y+7, r24	; 0x07
    3a84:	98 87       	std	Y+8, r25	; 0x08
    3a86:	a9 87       	std	Y+9, r26	; 0x09
    3a88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8c:	78 85       	ldd	r23, Y+8	; 0x08
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e8       	ldi	r20, 0x80	; 128
    3a98:	5f e3       	ldi	r21, 0x3F	; 63
    3a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a9e:	88 23       	and	r24, r24
    3aa0:	2c f4       	brge	.+10     	; 0x3aac <UART_receiveString+0xa0>
		__ticks = 1;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	9e 83       	std	Y+6, r25	; 0x06
    3aa8:	8d 83       	std	Y+5, r24	; 0x05
    3aaa:	3f c0       	rjmp	.+126    	; 0x3b2a <UART_receiveString+0x11e>
	else if (__tmp > 65535)
    3aac:	6f 81       	ldd	r22, Y+7	; 0x07
    3aae:	78 85       	ldd	r23, Y+8	; 0x08
    3ab0:	89 85       	ldd	r24, Y+9	; 0x09
    3ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	3f ef       	ldi	r19, 0xFF	; 255
    3ab8:	4f e7       	ldi	r20, 0x7F	; 127
    3aba:	57 e4       	ldi	r21, 0x47	; 71
    3abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac0:	18 16       	cp	r1, r24
    3ac2:	4c f5       	brge	.+82     	; 0x3b16 <UART_receiveString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e2       	ldi	r20, 0x20	; 32
    3ad2:	51 e4       	ldi	r21, 0x41	; 65
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	9e 83       	std	Y+6, r25	; 0x06
    3aea:	8d 83       	std	Y+5, r24	; 0x05
    3aec:	0f c0       	rjmp	.+30     	; 0x3b0c <UART_receiveString+0x100>
    3aee:	88 ec       	ldi	r24, 0xC8	; 200
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	9c 83       	std	Y+4, r25	; 0x04
    3af4:	8b 83       	std	Y+3, r24	; 0x03
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <UART_receiveString+0xee>
    3afe:	9c 83       	std	Y+4, r25	; 0x04
    3b00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b02:	8d 81       	ldd	r24, Y+5	; 0x05
    3b04:	9e 81       	ldd	r25, Y+6	; 0x06
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	9e 83       	std	Y+6, r25	; 0x06
    3b0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b10:	00 97       	sbiw	r24, 0x00	; 0
    3b12:	69 f7       	brne	.-38     	; 0x3aee <UART_receiveString+0xe2>
    3b14:	14 c0       	rjmp	.+40     	; 0x3b3e <UART_receiveString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b16:	6f 81       	ldd	r22, Y+7	; 0x07
    3b18:	78 85       	ldd	r23, Y+8	; 0x08
    3b1a:	89 85       	ldd	r24, Y+9	; 0x09
    3b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	9a 83       	std	Y+2, r25	; 0x02
    3b30:	89 83       	std	Y+1, r24	; 0x01
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <UART_receiveString+0x12a>
    3b3a:	9a 83       	std	Y+2, r25	; 0x02
    3b3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		i++;
    3b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b40:	98 89       	ldd	r25, Y+16	; 0x10
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	98 8b       	std	Y+16, r25	; 0x10
    3b46:	8f 87       	std	Y+15, r24	; 0x0f
}
void UART_receiveString(uint8 *Str)
{
	int i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    3b48:	2f 85       	ldd	r18, Y+15	; 0x0f
    3b4a:	38 89       	ldd	r19, Y+16	; 0x10
    3b4c:	89 89       	ldd	r24, Y+17	; 0x11
    3b4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3b50:	fc 01       	movw	r30, r24
    3b52:	e2 0f       	add	r30, r18
    3b54:	f3 1f       	adc	r31, r19
    3b56:	80 81       	ld	r24, Z
    3b58:	83 32       	cpi	r24, 0x23	; 35
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <UART_receiveString+0x152>
    3b5c:	73 cf       	rjmp	.-282    	; 0x3a44 <UART_receiveString+0x38>
	{
		Str[i] = UART_receiveByte();
		_delay_ms(100);
		i++;
	}
}
    3b5e:	62 96       	adiw	r28, 0x12	; 18
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	08 95       	ret

00003b74 <__prologue_saves__>:
    3b74:	2f 92       	push	r2
    3b76:	3f 92       	push	r3
    3b78:	4f 92       	push	r4
    3b7a:	5f 92       	push	r5
    3b7c:	6f 92       	push	r6
    3b7e:	7f 92       	push	r7
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	ca 1b       	sub	r28, r26
    3b9e:	db 0b       	sbc	r29, r27
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	09 94       	ijmp

00003bac <__epilogue_restores__>:
    3bac:	2a 88       	ldd	r2, Y+18	; 0x12
    3bae:	39 88       	ldd	r3, Y+17	; 0x11
    3bb0:	48 88       	ldd	r4, Y+16	; 0x10
    3bb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bba:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bbe:	b9 84       	ldd	r11, Y+9	; 0x09
    3bc0:	c8 84       	ldd	r12, Y+8	; 0x08
    3bc2:	df 80       	ldd	r13, Y+7	; 0x07
    3bc4:	ee 80       	ldd	r14, Y+6	; 0x06
    3bc6:	fd 80       	ldd	r15, Y+5	; 0x05
    3bc8:	0c 81       	ldd	r16, Y+4	; 0x04
    3bca:	1b 81       	ldd	r17, Y+3	; 0x03
    3bcc:	aa 81       	ldd	r26, Y+2	; 0x02
    3bce:	b9 81       	ldd	r27, Y+1	; 0x01
    3bd0:	ce 0f       	add	r28, r30
    3bd2:	d1 1d       	adc	r29, r1
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	de bf       	out	0x3e, r29	; 62
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	ed 01       	movw	r28, r26
    3be0:	08 95       	ret

00003be2 <itoa>:
    3be2:	fb 01       	movw	r30, r22
    3be4:	9f 01       	movw	r18, r30
    3be6:	e8 94       	clt
    3be8:	42 30       	cpi	r20, 0x02	; 2
    3bea:	c4 f0       	brlt	.+48     	; 0x3c1c <itoa+0x3a>
    3bec:	45 32       	cpi	r20, 0x25	; 37
    3bee:	b4 f4       	brge	.+44     	; 0x3c1c <itoa+0x3a>
    3bf0:	4a 30       	cpi	r20, 0x0A	; 10
    3bf2:	29 f4       	brne	.+10     	; 0x3bfe <itoa+0x1c>
    3bf4:	97 fb       	bst	r25, 7
    3bf6:	1e f4       	brtc	.+6      	; 0x3bfe <itoa+0x1c>
    3bf8:	90 95       	com	r25
    3bfa:	81 95       	neg	r24
    3bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfe:	64 2f       	mov	r22, r20
    3c00:	77 27       	eor	r23, r23
    3c02:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__udivmodhi4>
    3c06:	80 5d       	subi	r24, 0xD0	; 208
    3c08:	8a 33       	cpi	r24, 0x3A	; 58
    3c0a:	0c f0       	brlt	.+2      	; 0x3c0e <itoa+0x2c>
    3c0c:	89 5d       	subi	r24, 0xD9	; 217
    3c0e:	81 93       	st	Z+, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	a1 f7       	brne	.-24     	; 0x3bfe <itoa+0x1c>
    3c16:	16 f4       	brtc	.+4      	; 0x3c1c <itoa+0x3a>
    3c18:	5d e2       	ldi	r21, 0x2D	; 45
    3c1a:	51 93       	st	Z+, r21
    3c1c:	10 82       	st	Z, r1
    3c1e:	c9 01       	movw	r24, r18
    3c20:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <strrev>

00003c24 <strrev>:
    3c24:	dc 01       	movw	r26, r24
    3c26:	fc 01       	movw	r30, r24
    3c28:	67 2f       	mov	r22, r23
    3c2a:	71 91       	ld	r23, Z+
    3c2c:	77 23       	and	r23, r23
    3c2e:	e1 f7       	brne	.-8      	; 0x3c28 <strrev+0x4>
    3c30:	32 97       	sbiw	r30, 0x02	; 2
    3c32:	04 c0       	rjmp	.+8      	; 0x3c3c <strrev+0x18>
    3c34:	7c 91       	ld	r23, X
    3c36:	6d 93       	st	X+, r22
    3c38:	70 83       	st	Z, r23
    3c3a:	62 91       	ld	r22, -Z
    3c3c:	ae 17       	cp	r26, r30
    3c3e:	bf 07       	cpc	r27, r31
    3c40:	c8 f3       	brcs	.-14     	; 0x3c34 <strrev+0x10>
    3c42:	08 95       	ret

00003c44 <__udivmodhi4>:
    3c44:	aa 1b       	sub	r26, r26
    3c46:	bb 1b       	sub	r27, r27
    3c48:	51 e1       	ldi	r21, 0x11	; 17
    3c4a:	07 c0       	rjmp	.+14     	; 0x3c5a <__udivmodhi4_ep>

00003c4c <__udivmodhi4_loop>:
    3c4c:	aa 1f       	adc	r26, r26
    3c4e:	bb 1f       	adc	r27, r27
    3c50:	a6 17       	cp	r26, r22
    3c52:	b7 07       	cpc	r27, r23
    3c54:	10 f0       	brcs	.+4      	; 0x3c5a <__udivmodhi4_ep>
    3c56:	a6 1b       	sub	r26, r22
    3c58:	b7 0b       	sbc	r27, r23

00003c5a <__udivmodhi4_ep>:
    3c5a:	88 1f       	adc	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	5a 95       	dec	r21
    3c60:	a9 f7       	brne	.-22     	; 0x3c4c <__udivmodhi4_loop>
    3c62:	80 95       	com	r24
    3c64:	90 95       	com	r25
    3c66:	bc 01       	movw	r22, r24
    3c68:	cd 01       	movw	r24, r26
    3c6a:	08 95       	ret

00003c6c <_exit>:
    3c6c:	f8 94       	cli

00003c6e <__stop_program>:
    3c6e:	ff cf       	rjmp	.-2      	; 0x3c6e <__stop_program>
